<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6的export和export default</title>
      <link href="/Es6%E7%9A%84export%E5%92%8Cexport-default/"/>
      <url>/Es6%E7%9A%84export%E5%92%8Cexport-default/</url>
      
        <content type="html"><![CDATA[<h2 id="es6的导入导出"><a href="#es6的导入导出" class="headerlink" title="es6的导入导出"></a>es6的导入导出</h2><ol><li><p>ES6中导入模块，使用   <code>import 模块名称 from &#39;模块标识符&#39;</code>    <code>import &#39;表示路径&#39;</code></p></li><li><p>在 ES6 中，使用 <code>export default</code> 和 <code>export</code> 向外暴露成员：</p><ul><li>export default 向外暴露的成员，可以使用任意的变量来接收</li><li>在一个模块中，export default 只允许向外暴露1次</li><li>在一个模块中，可以同时使用 export default 和 export 向外暴露成员</li><li>使用 export 向外暴露的成员，只能使用 { } 的形式来接收，这种形式，叫做 【按需导出】</li><li>export 可以向外暴露多个成员， 同时，如果某些成员，我们在 import 的时候，不需要，则可以 不在 {}  中定义</li><li>使用 export 导出的成员，必须严格按照 导出时候的名称，来使用  {}  按需接收；</li><li>使用 export 导出的成员，如果 就想 换个 名称来接收，可以使用 as 来起别名；</li></ul><p>testEs6Export.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导出变量</span><br><span class="line">export const a &#x3D; &#39;100&#39;;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出方法</span><br><span class="line">export const dogSay &#x3D; function()&#123; </span><br><span class="line">    console.log(&#39;wang wang&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出方法第二种</span><br><span class="line">function catSay()&#123;</span><br><span class="line">  console.log(&#39;miao miao&#39;); </span><br><span class="line">&#125;</span><br><span class="line">export &#123; catSay &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;export default导出</span><br><span class="line">const m &#x3D; 100;</span><br><span class="line">export default m; </span><br><span class="line">&#x2F;&#x2F;export defult const m &#x3D; 100;&#x2F;&#x2F; 这里不能写这种格式。</span><br></pre></td></tr></table></figure><p>import.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; dogSay, catSay &#125; from &#39;.&#x2F;testEs6Export&#39;; &#x2F;&#x2F;导出了 export 方法 </span><br><span class="line">import m1 from &#39;.&#x2F;testEs6Export&#39;;  &#x2F;&#x2F;导出了 export default</span><br><span class="line"></span><br><span class="line">import * as testModule from &#39;.&#x2F;testEs6Export&#39;; &#x2F;&#x2F;as 集合成对象导出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nrm</title>
      <link href="/nrm/"/>
      <url>/nrm/</url>
      
        <content type="html"><![CDATA[<h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a>nrm的安装使用</h2><p>  作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；</p><p>  什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装nrm包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li><li>测试所有源的速度：<code>nrm test</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url的构成</title>
      <link href="/url%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>/url%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="url的构成"><a href="#url的构成" class="headerlink" title="url的构成"></a>url的构成</h2><p>   例：<code>http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</code></p><blockquote><p>就以下面这个URL为例，介绍下普通URL的各部分组成</p></blockquote><ol><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</li><li>域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域以及产生原因？"><a href="#什么是跨域以及产生原因？" class="headerlink" title="什么是跨域以及产生原因？"></a>什么是跨域以及产生原因？</h2><p>  跨域是指a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址，b页面为域名地址，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。</p><table><thead><tr><th>url</th><th>说明</th><th>是否跨域</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a><br/><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>是</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a><br/><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同域名下不同文件</td><td>否</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br/><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同域名下不同端口</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同域名 不同协议</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域名相同 子域名不同</td><td>是（cookie不可访问）</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名（同上）</td><td>是</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp</title>
      <link href="/jsonp/"/>
      <url>/jsonp/</url>
      
        <content type="html"><![CDATA[<h2 id="jsonp视频教学"><a href="#jsonp视频教学" class="headerlink" title="jsonp视频教学"></a><a href="https://www.bilibili.com/video/BV1jt411j72F?p=1" target="_blank" rel="noopener">jsonp视频教学</a></h2><h2 id="为什么会有jsonp"><a href="#为什么会有jsonp" class="headerlink" title="为什么会有jsonp"></a>为什么会有jsonp</h2><p>   由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全</p><h2 id="jsonp的实现原理"><a href="#jsonp的实现原理" class="headerlink" title="jsonp的实现原理"></a>jsonp的实现原理</h2><ol><li>初步方案一：用<strong>script</strong>标签<ul><li>服务端：将要发送的数据填充在一条js语句中<code>res.write(document.write(&quot;${weather}&quot;))</code></li><li>客户端：<code>&lt;script src=&quot;服务端接口地址&quot;&gt;&lt;/script&gt;</code></li><li>script发送请求到服务端，浏览器接受到接收到服务器发送的数据进行解析<blockquote><p>问题：服务端代码写死了，客户端只能执行服务端返回的js代码，服务端不能动态操作数据</p></blockquote></li></ul></li><li>完善方案二：提前在客户端定义一个函数，用于处理服务端返回的请求，服务端返回客户端定义的函数名到客户端，客户端接受到函数进行调用，并执行函数中的功能<ul><li>服务端：res.write(`show(${“weather”})`)</li><li>客户端：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> function show(weather) &#123;</span><br><span class="line">  实现代码功能</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务端把返回的方法写死，只能通过这个函数访问服务端返回的数据，不方便管理数据</p></blockquote></li></ul></li><li>完善方案三：用请求参数，将函数名动态传递给服务器<ul><li>服务端：res.write(`${callback}(${weather})`)</li><li>客户端：<code>&lt;script src=&quot;http://localhost:3000?callback=show&quot;&gt;&lt;/script&gt;</code><blockquote><p>script标签在页面写死，只有在页面加载的时候执行一次。无法按需反复执行，例如每次点击按钮时，随时发起请求。</p></blockquote></li></ul></li><li>最终完整版：每次点击按钮时，动态创建script标签<ul><li>客户端：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   $(&#39;button&#39;).click(function() &#123;</span><br><span class="line">   var script &#x3D; document.createElement(&quot;script&quot;)</span><br><span class="line">   script.src&#x3D;&#39;http:&#x2F;&#x2F;localhost:3000?callback&#x3D;show&#39;</span><br><span class="line">   document.body.appendChild(script)</span><br><span class="line">   $(&quot;body&gt;script:last&quot;).remove()&#x2F;&#x2F; 每次点击按钮，页面都会动态生成一个script标签，浪费内存，这句话是用来在函数执行完功能是，删除script标签</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>服务端：res.write(`${callback}(${weather})`)</li></ul></li><li>总结<br>方案一使用script标签虽然获得了数据，但是不能操作数据，由此方案二诞生了，但是方案二只能把返回的数据，返回给固定的函数，数据利用率低，由此方案三诞生了，但是方案三中的script标签只能加载一次，无法多次操作数据，数据利用率低，由此出现了最终方案动态创建script标签，但是在我们的日常工作中是不会这样用的，会有事先大牛们为我们封装出来的库和包来供我们使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/vue/"/>
      <url>/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="vue是什么？"><a href="#vue是什么？" class="headerlink" title="vue是什么？"></a>vue是什么？</h2><ol><li><p>Vue是一套构建用户界面的渐进式框架，也是一个非常典型的 MVVM 的程序结构（model-view-viewmodel）。</p></li><li><p>官方解释：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><ul><li>渐变式框架：你可以把vue用在已经有的项目中，进行页面的渲染，也可以利用vue的全家桶创建大型项目,vue不是把所有东西集成在一起，而是你需要什么，在vue中添加相应的工具(例如vue-resource,vuex)，vue实现是加法操作</li><li>MVC: 是后端(node.js)的程序结构，M是model的缩写代表数据层，V是view的缩写代表视图层，C是controller的缩写代表逻辑层</li><li>MVVM: 是前端的程序结构，是MVC中的V进一步划分，M是每一个页面的单独数据，V是每个页面的html结构，VM是页面的调度者，MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 Model 的双向数据绑定，这使得Model 的状态改变可以自动传递给 View，即所谓的<code>数据双向绑定</code>。<br><img src="../image/vue1.png" alt=""></li><li>自底向上逐层应用：由基层开始做起，把基础的东西写好，再逐层往上添加效果和功能。</li></ul><hr></li></ol><h2 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h2><h3 id="vue的兼容性"><a href="#vue的兼容性" class="headerlink" title="vue的兼容性"></a>vue的兼容性</h3><ul><li>Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容   ECMAScript 5 的浏览器</li></ul><h3 id="Vue-Detools"><a href="#Vue-Detools" class="headerlink" title="Vue Detools"></a>Vue Detools</h3><ul><li>在使用 Vue 时，我们推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Vue Detools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</li></ul><h3 id="直接-lt-script-gt-引入"><a href="#直接-lt-script-gt-引入" class="headerlink" title="直接&lt;script&gt;引入"></a>直接<code>&lt;script&gt;</code>引入</h3><ul><li><p>直接下载并用 <code>&lt;script&gt;</code>标签引入，Vue 会被注册为一个全局变量。</p><blockquote><p>注意：在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告!</p></blockquote></li><li><p>csdn<br>对于制作原型或学习，你可以这样使用最新版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><pre><code>在用 Vue 构建大型应用时推荐使用 NPM 安装。NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。同时 Vue 也提供配套工具来开发单文件组件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure></code></pre><h3 id="命令行工具-CLI"><a href="#命令行工具-CLI" class="headerlink" title="命令行工具(CLI)"></a>命令行工具(CLI)</h3><blockquote><p>vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了     batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以 及生产环境可用的构建版本。更多详情可查阅 Vue CLI 的文档。</p></blockquote><h3 id="对不同版本的理解-以后更新"><a href="#对不同版本的理解-以后更新" class="headerlink" title="对不同版本的理解(以后更新)"></a>对不同版本的理解(以后更新)</h3><h2 id="与vue的第一次相见"><a href="#与vue的第一次相见" class="headerlink" title="与vue的第一次相见"></a>与vue的第一次相见</h2><ul><li><p>注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象</p></li><li><p>注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化,就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;!-- 将来 <span class="keyword">new</span> 的Vue实例，会控制这个 元素中的所有内容 --&gt;</span><br><span class="line">  &lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V  --&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 2. 创建一个Vue的实例</span></span><br><span class="line">    <span class="comment">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span></span><br><span class="line">    <span class="comment">//  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,  <span class="comment">// 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域</span></span><br><span class="line">      <span class="comment">// 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的</span></span><br><span class="line">      data: &#123; <span class="comment">// data 属性中，存放的是 el 中要用到的数据</span></span><br><span class="line">        msg: <span class="string">'欢迎学习Vue'</span> <span class="comment">// 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><h3 id="v-cloak-v-html-v-text"><a href="#v-cloak-v-html-v-text" class="headerlink" title="v-cloak, v-html, v-text"></a>v-cloak, v-html, v-text</h3><ul><li><p><code>v-cloak</code>: 使用v-cloak能够解决 插值表达式闪烁的问题，并且不会替换标签中的内容，只会替换插值表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  [v-cloak] &#123;</span><br><span class="line">    <span class="comment">/* display: none; */</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 使用 v-cloak 能够解决 插值表达式闪烁的问题 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-cloak&gt;++++++++ &#123;&#123; msg &#125;&#125; ----------&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">      el: '#app',</span></span><br><span class="line"><span class="string">      data: &#123;</span></span><br><span class="line"><span class="string">        msg: '123',</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-text</code>: 自身标签就可以解决闪烁问题，但是会替换标签中所有的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h4 v-text=<span class="string">"msg"</span>&gt;==================&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        msg: '123',</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-html</code>: 用于转化html标签的数据, 也会替换标签中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;div v-html=<span class="string">"msg2"</span>&gt;<span class="number">1212112</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;script&gt;</span></span><br><span class="line"><span class="string">     var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">       el: '#app',</span></span><br><span class="line"><span class="string">       data: &#123;</span></span><br><span class="line"><span class="string">         msg2: '&lt;h1&gt;哈哈，我是一个大大的H1， 我大，我骄傲&lt;/h1&gt;',</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">     &#125;)</span></span><br><span class="line"><span class="string">   &lt;/script&gt;</span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li><p>v-bind简写<code>:</code> ,用于数据把数据初始化在html页面(例如照片的渲染:src)</p></li><li><p>v-bind不仅能够绑定数据，而且能够在v-bind中书写<strong>表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + '123'"</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span></span></span><br><span class="line">    &lt;input type="button" value="按钮" :title="mytitle + '123'"&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: '#app',</span><br><span class="line">      data: &#123;</span><br><span class="line">        mytitle: '这是一个自己定义的title'</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>click</span><br></pre></td></tr></table></figure></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li><p>v-on简写@(v-on:click简写为@click)</p></li><li><p>用于绑定各种事件(例如常见的click)</p></li><li><p>v-on会通过绑定在自己身上的变量，在methods中寻找自己的函数进行运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> @click=<span class="string">"show"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">      el: '#app',</span></span><br><span class="line"><span class="string">      data: &#123;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      methods: &#123; // 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span><br><span class="line"><span class="string">        show: function () &#123;</span></span><br><span class="line"><span class="string">          alert('Hello')</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ol><li>v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定,而v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定</li><li>v-model多用于表单(例如：input(radio, text, address, email….)   select    checkbox   textarea )<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">   &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span><br><span class="line">     &lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span><br><span class="line">     &lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span><br><span class="line">     &lt;input type=<span class="string">"text"</span> style=<span class="string">"width:100%;"</span> v-model=<span class="string">"msg"</span>&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">       el: '#app',</span></span><br><span class="line"><span class="regexp">       data: &#123;</span></span><br><span class="line"><span class="regexp">         msg: '大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！'</span></span><br><span class="line"><span class="regexp">       &#125;,</span></span><br><span class="line"><span class="regexp">       methods: &#123;</span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp">     &#125;);</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><p>2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。</p></blockquote><ol><li>迭代普通数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(item, i) in list"</span> :key=<span class="string">"i"</span>&gt;索引值：&#123;&#123;i&#125;&#125; --- 每一项：&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代对象数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(user, i) in list"</span> :key=<span class="string">"i"</span>&gt;Id：&#123;&#123; user.id &#125;&#125; --- 名字：&#123;&#123; user.name &#125;&#125; --- 索引：&#123;&#123;i&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'zs1'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'zs2'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'zs3'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'zs4'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 注意：在遍历对象身上的键值对的时候， 除了 有  val  key  ,在第三个位置还有 一个 索引  --&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(val, key, i) in user"</span> :key=<span class="string">"i"</span>&gt;值是： &#123;&#123; val &#125;&#125; --- 键是： &#123;&#123;key&#125;&#125; -- 索引： &#123;&#123;i&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">'托尼·屎大颗'</span>,</span><br><span class="line">          gender: <span class="string">'男'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="keyword">in</span> 后面我们放过  普通数组，对象数组，对象， 还可以放数字 --&gt;</span><br><span class="line">    &lt;!-- 注意：如果使用 v-<span class="keyword">for</span> 迭代数字的话，前面的 count 值从 <span class="number">1</span> 开始 --&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"count in 10"</span> :key=<span class="string">"count"</span>&gt;这是第 &#123;&#123; count &#125;&#125; 次循环&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><ol><li>v-if<ul><li>每次都会重新删除或创建元素</li><li>有较高的切换性能消耗</li></ul></li><li>v-show<ul><li>每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式</li><li>有较高的初始渲染消耗</li></ul></li><li>建议使用<ul><li>如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show</li><li>如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"toggle"</span> @click=<span class="string">"flag=!flag"</span>&gt;</span><br><span class="line">    &lt;h3 v-<span class="keyword">if</span>=<span class="string">"flag"</span>&gt;这是用v-<span class="keyword">if</span>控制的元素&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3 v-show="flag"&gt;这是用v-show控制的元素&lt;/</span>h3&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="v-if和v-else"><a href="#v-if和v-else" class="headerlink" title="v-if和v-else"></a>v-if和v-else</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">""</span> @click.prevent=<span class="string">"flag=true"</span>&gt;登录&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="" @click.prevent="flag=false"&gt;注册&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;login v-<span class="keyword">if</span>=<span class="string">"flag"</span>&gt;&lt;<span class="regexp">/login&gt;</span></span><br><span class="line"><span class="regexp">    &lt;register v-else="flag"&gt;&lt;/</span>register&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Vue.component('login', &#123;</span></span><br><span class="line"><span class="regexp">      template: '&lt;h3&gt;登录组件&lt;/</span>h3&gt;<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Vue.component('</span>register<span class="string">', &#123;</span></span><br><span class="line"><span class="string">      template: '</span>&lt;h3&gt;注册组件&lt;<span class="regexp">/h3&gt;'</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h3><h4 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h4><ol><li><p>Vue.directive() 定义全局的指令</p></li><li><p>参数1 ： 指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀,  但是： 在调用的时候，必须 在指令名称前 加上 v- 前缀来进行调用</p></li><li><p>参数2： 是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</p><ul><li>bind: 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次,在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象,第二个参数是 binding, 在元素刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用,因为，一个元素，只有插入DOM之后，才能获取焦点<blockquote><p>所以bind中应该操作样式</p></blockquote></li><li>inserted: 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】<blockquote><p>JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</p></blockquote></li><li>updated: 当VNode更新的时候，会执行 updated， 可能会触发多次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;keywords&quot; id&#x3D;&quot;search&quot; v-focus v-color&#x3D;&quot;&#39;green&#39;&quot;&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">  bind(el) &#123;  </span><br><span class="line">    &#x2F;&#x2F; el.focus()</span><br><span class="line">  &#125;,</span><br><span class="line">  inserted(el) &#123; </span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;,</span><br><span class="line">  updated(el) &#123;  </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>全局自定指令简写：</p><blockquote><p>这个 function 等同于把代码写到了 bind 和 update 中去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;color-swatch&#39;, function (el, binding) &#123;</span><br><span class="line">  el.style.backgroundColor &#x3D; binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="局部指令"><a href="#局部指令" class="headerlink" title="局部指令"></a>局部指令</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class="line">    &lt;h3 v-color&#x3D;&quot;&#39;pink&#39;&quot; v-fontweight&#x3D;&quot;900&quot; v-fontsize&#x3D;&quot;50&quot;&gt;&#123;&#123; dt | dateFormat &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app2&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        dt: new Date()</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">      directives: &#123; &#x2F;&#x2F; 自定义私有指令</span><br><span class="line">        &#39;fontweight&#39;: &#123; &#x2F;&#x2F; 设置字体粗细的</span><br><span class="line">          bind: function (el, binding) &#123;</span><br><span class="line">            el.style.fontWeight &#x3D; binding.value</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 私有命令简写</span><br><span class="line">        &#39;fontsize&#39;: function (el, binding) &#123; &#x2F;&#x2F; 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去</span><br><span class="line">          el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></code></pre><ol><li>局部自定义指令简写:<blockquote><p>这个 function 等同于把代码写到了 bind 和 update 中去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app2&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    dt: new Date()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  directives: &#123; &#x2F;&#x2F; 自定义私有指令</span><br><span class="line">    &#39;fontsize&#39;: function (el, binding) &#123; &#x2F;&#x2F; 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去</span><br><span class="line">      el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h4><ol><li>el：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象，包含以下 property：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li></ul></li></ol><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li><strong>数组</strong>(如果直接写一个字符串，vue会把这个变量解析成一个变量，在vue实例中寻找变量，寻找不到就会报错)<br>例：<code>&lt;h1 :class=&quot;thin&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 <span class="class"><span class="keyword">class</span> 需要使用  <span class="title">v</span>-<span class="title">bind</span> 做数据绑定 --&gt;</span></span><br><span class="line">    &lt;!-- &lt;h1 :class="['thin', 'italic']"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>数组</strong>中使用 <strong>三元表达式</strong>(其中flag大多数是条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 在数组中使用三元表达式 --&gt;</span><br><span class="line">    &lt;!-- 其中flag大多数是条件语句 --&gt;</span><br><span class="line">    &lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['thin', 'italic', flag?'active':'']"</span>&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><strong>数组</strong>中嵌套<strong>对象</strong>(其中flag大多数是条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1 :class="['thin', 'italic', &#123;'active':flag&#125; ]"&gt;这是一个很大很大的H1，大到你无法想象</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><strong>直接使用对象</strong>(通常情况下不直接给false，或者true，经常条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 在为 <span class="class"><span class="keyword">class</span> 使用 <span class="title">v</span>-<span class="title">bind</span> 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;</span></span><br><span class="line">    &lt;h1 :class=" classObj: &#123; red: true, thin: true, italic: false, active: false &#125;"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: true,</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li>直接在元素上通过 :style 的形式，书写样式对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"&#123;color: 'red', 'font-size': '40px'&#125;"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li>将样式对象，定义到<code>data</code> 中，并直接引用到 <code>:style</code> 中<ul><li>在data上定义样式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"h1StyleObj"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>在 <code>:style</code> 中通过数组，引用多个<code>data</code> 上的样式对象<ul><li>在data上定义样式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;,</span><br><span class="line">    h1StyleObj2: &#123; <span class="attr">fontStyle</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"[h1StyleObj, h1StyleObj2]"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue的过滤器"><a href="#Vue的过滤器" class="headerlink" title="Vue的过滤器"></a>Vue的过滤器</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote></blockquote><ul><li>过滤器的第一个参数要处理的值(也就是管道符前面的值)，过滤器可以传递多个参数</li><li>一个值也可以使用多个过滤器<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><ul><li>所谓的全局过滤器，就是所有的VM实例都共享的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat(<span class="string">'疯狂+1'</span>, <span class="string">'123'</span>) | test &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.filter(<span class="string">'msgFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, arg, arg2</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 字符串的  replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则</span></span><br><span class="line">      <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg + arg2)</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.filter(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> msg + <span class="string">'========'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: <span class="string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ul><li>私有过滤器只能应用于自己vm的区域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat(<span class="string">'疯狂+1'</span>, <span class="string">'123'</span>)&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: <span class="string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      filters: &#123; </span><br><span class="line">        msgFormat(msg, arg, arg2) &#123;</span><br><span class="line">          <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg + arg2)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ol><li><p>事件修饰符可以叠加使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组织默认行为，并且只能触发一次 --&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent.once=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>.stop</strong>用于阻止冒泡(例如子元素与父元素都有点击事件，默认触发子元素事件，父元素事件也要被触发，通过.stop可以实现触发子元素事件，父元素事件不会被触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用  .stop  阻止冒泡 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click.stop=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.prevent</strong>用于阻止默认行为(例如：a链接默认是提供超链接的，我们可以通过.prevent来阻止默认行为)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span><br><span class="line">    &lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        linkClick() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'触发了连接的点击事件'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.capture</strong> 实现捕获触发事件的机制(默认是冒泡机制，触发子元素事件，父元素事件被冒泡触发，使用.capture后触发子元素，父元素事件先触发，子元素事件再触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click.capture=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.self</strong> 实现只有点击当前元素时候，才会触发事件处理函数(.self使只有触发当前元素才会触发事件，其他元素冒泡或者捕获都不会触发这个元素事件，但是他只作用与自己，其他元素冒泡和捕获继续执行)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>.once 只触发一次事件处理函数(事件只触发一次，事件触发过后，不能再触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span><br><span class="line">    &lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent.once=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        linkClick() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'触发了连接的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        div2Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 outer div 的点击事件'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>.self 和 .stop的区别<br>.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为<br>.stop是真正的组织了冒泡</p></li></ol><h3 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h3><ol><li>以下是vue官方为我们定义的键盘修饰符<ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up(↑)</li><li>.down(↓)</li><li>.left(←)</li><li>.right(→)</li></ul></li><li>自定义修饰符<ul><li>通过Vue.config.keyCodes.名称 = 按键值来自定义案件修饰符的别名：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = <span class="number">113</span></span><br></pre></td></tr></table></figure></li><li>使用自定义的按键修饰符：<br><a href="https://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">键盘事件对应的键码</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt; &#x2F;&#x2F; 只有按下键盘f2才有效</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue-resource的基本使用"><a href="#Vue-resource的基本使用" class="headerlink" title="Vue-resource的基本使用"></a>Vue-resource的基本使用</h2><h3 id="vue-resource-的配置步骤："><a href="#vue-resource-的配置步骤：" class="headerlink" title="vue-resource 的配置步骤："></a>vue-resource 的配置步骤：</h3><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件<blockquote><p>引用的先后顺序是：先引用 Vue 的脚本文件，再引用 vue-resource 的脚本文件；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 注意：vue-resource 依赖于 Vue，所以先后顺序要注意  --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>lib/vue-resource<span class="number">-1.3</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于已经导入了 Vue-resource这个包，所以 ，可以直接通过  this.$http 来发起数据请求</li><li>如果我们通过全局配置了，请求的数据接口 根域名，则 ，在每次单独发起 http 请求的时候，请求的 url 路径，应该以相对路径开头，前面不能带 /  ，否则 不会启用根路径做拼接；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.root &#x3D; &#39;http:&#x2F;&#x2F;vue.studyit.io&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>如果全局启用 emulateJSON 选项, post请求就不用写第三个参数了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.emulateJSON &#x3D; true;</span><br></pre></td></tr></table></figure></li></ul><h3 id="发起get请求"><a href="#发起get请求" class="headerlink" title="发起get请求"></a>发起get请求</h3><ul><li>this.$http.get(‘url’).then(function(result){})</li><li>当通过 then 指定回调函数之后，在回调函数中，可以拿到数据服务器返回的 result</li><li>先判断 result.body.status 是否等于0，如果等于0，就成功了，可以 把 result..body.message 赋值给 this.list ; 如果不等于0，可以弹框提醒，获取数据失败！<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">     getAllList() &#123; </span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">'api/getprodlist'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 注意： 通过 $http 获取到的数据，都在 result.body 中放着</span></span><br><span class="line">          <span class="keyword">var</span> result = result.body</span><br><span class="line">          <span class="keyword">if</span> (result.status === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功了</span></span><br><span class="line">            <span class="keyword">this</span>.list = result.message</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败了</span></span><br><span class="line">            alert(<span class="string">'获取数据失败！'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h3><ol><li>this.$http.post() 中接收三个参数：<ul><li>第一个参数： 要请求的URL地址</li><li>第二个参数： 要提交给服务器的数据 ，要以对象形式提交给服务器 { name: this.name }</li><li>第三个参数： 是一个配置对象，要以哪种表单数据类型提交过去， { emulateJSON: true }, 以普通表单格式，将数据提交给服务器 application/x-www-form-urlencoded</li></ul></li><li>在 post 方法中，使用 .then 来设置成功的回调函数，如果想要拿到成功的结果，需要 result.body<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="string">'api/addproduct'</span>, &#123; <span class="attr">name</span>: <span class="keyword">this</span>.name &#125;, &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (result.body.status === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功了！</span></span><br><span class="line">            <span class="comment">// 添加完成后，只需要手动，再调用一下 getAllList 就能刷新品牌列表了</span></span><br><span class="line">            <span class="keyword">this</span>.getAllList()</span><br><span class="line">            <span class="comment">// 清空 name </span></span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">''</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败了</span></span><br><span class="line">            alert(<span class="string">'添加失败！'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="发送JSONP请求获取数据"><a href="#发送JSONP请求获取数据" class="headerlink" title="发送JSONP请求获取数据"></a>发送JSONP请求获取数据</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       jsonpInfo() &#123; <span class="comment">// 发起JSONP 请求</span></span><br><span class="line">         <span class="keyword">this</span>.$http.jsonp(<span class="string">'http://vue.studyit.io/api/jsonp'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(result.body)</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue的生命周期函数"><a href="#vue的生命周期函数" class="headerlink" title="vue的生命周期函数"></a>vue的生命周期函数</h2><h3 id="vue生命函数图解"><a href="#vue生命函数图解" class="headerlink" title="vue生命函数图解"></a>vue生命函数图解</h3><p> <img src="/image/vue2.png" alt=""></p><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><ol><li>这是我们遇到的第1个生命周期函数，表示实例完全被创建出来之前，会执行它</li><li>在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</li></ol><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><ol><li>这是遇到的第2个生命周期函数</li><li>在 created 中，data 和 methods 都已经被初始化好了！</li><li>如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</li><li>最好在created函数中执行<strong>请求函数</strong></li></ol><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><ol><li>这是遇到的第3个生命周期函数</li><li>模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</li><li>在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</li></ol><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ol><li>这是遇到的第4个生命周期函数</li><li>内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了<blockquote><p>注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</p></blockquote></li></ol><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><ol><li>这是遇到的第5个生命周期函数</li><li>这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】<blockquote><p>得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</p></blockquote></li></ol><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><ol><li>这是遇到的第6个生命周期函数</li><li>updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</li></ol><h2 id="Vue动画"><a href="#Vue动画" class="headerlink" title="Vue动画"></a>Vue动画</h2><h3 id="过渡类实现动画"><a href="#过渡类实现动画" class="headerlink" title="过渡类实现动画"></a>过渡类实现动画</h3><ol><li>v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入</li><li>v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了</li><li>v-enter-active 【入场动画的时间段】</li><li>v-leave-active 【离场动画的时间段】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  &#x2F;* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 *&#x2F;</span><br><span class="line">  &#x2F;* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 *&#x2F;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(150px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;* v-enter-active 【入场动画的时间段】 *&#x2F;</span><br><span class="line">  &#x2F;* v-leave-active 【离场动画的时间段】 *&#x2F;</span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active&#123;</span><br><span class="line">    transition: all 0.8s ease;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br><span class="line">    &lt;!-- 1. 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span><br><span class="line">    &lt;!-- transition 元素，是 Vue 官方提供的 --&gt;</span><br><span class="line">    &lt;transition&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改过渡类前缀v"><a href="#修改过渡类前缀v" class="headerlink" title="修改过渡类前缀v-"></a>修改过渡类前缀v-</h3><ol><li>将过渡类的v-换成自行定义的名字</li><li>在transition标签name属性中指定该名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    .my-enter,</span><br><span class="line">    .my-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(70px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .my-enter-active,</span><br><span class="line">    .my-leave-active&#123;</span><br><span class="line">      transition: all 0.8s ease;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle2&quot; @click&#x3D;&quot;flag2&#x3D;!flag2&quot;&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;my&quot;&gt;</span><br><span class="line">      &lt;h6 v-if&#x3D;&quot;flag2&quot;&gt;这是一个H6&lt;&#x2F;h6&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag2: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用第三方库实现动画"><a href="#使用第三方库实现动画" class="headerlink" title="使用第三方库实现动画"></a>使用第三方库实现动画</h3><ol><li>在head标签中引入animate库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>transition标签中设置2个类，enter-active-class与leave-active-class<ul><li>enter-active-class可以在里面指定进场动画类, 但是必须在类中加入animated类，如果不想在这个类中添加，那请在被作用的元素添加<code>class=&quot;animated&quot;</code></li><li>leave-active-class可以在里面指定出场动画类, 但是必须在类中加入animated类，如果不想在这个类中添加，那请在被作用的元素添加<code>class=&quot;animated&quot;</code></li></ul></li><li>transition标签中设置duration属性来控制动画的时间，指定一个值，进场时间和出场时间都是这个时间，也可以分别指定进场时间，和出场时间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition :duration&#x3D;&quot;200&quot;&gt;</span><br><span class="line">  &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;transition :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;&gt;</span><br><span class="line">  &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br><span class="line">    &lt;!-- &lt;transition enter-active-class&#x3D;&quot;animated bounceIn&quot; leave-active-class&#x3D;&quot;animated bounceOut&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用 :duration&#x3D;&quot;毫秒值&quot; 来统一设置 入场 和 离场 时候的动画时长 --&gt;</span><br><span class="line">    &lt;!-- &lt;transition enter-active-class&#x3D;&quot;bounceIn&quot; leave-active-class&#x3D;&quot;bounceOut&quot; :duration&#x3D;&quot;200&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用  :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;  来分别设置 入场的时长 和 离场的时长  --&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">    enter-active-class&#x3D;&quot;bounceIn&quot; </span><br><span class="line">    leave-active-class&#x3D;&quot;bounceOut&quot; </span><br><span class="line">    :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="钩子函数实现半场动画"><a href="#钩子函数实现半场动画" class="headerlink" title="钩子函数实现半场动画"></a>钩子函数实现半场动画</h3><ol><li>每一个钩子函数表视每一个时间段</li><li>如果要具体每个时间段要做什么具体操作，请用钩子函数实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"快到碗里来"</span> @click=<span class="string">"flag=!flag"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="number">1.</span> 使用 transition 元素把 小球包裹起来 --&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">      @before-enter=<span class="string">"beforeEnter"</span></span><br><span class="line">      @enter=<span class="string">"enter"</span></span><br><span class="line">      @after-enter=<span class="string">"afterEnter"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ball"</span> v-show=<span class="string">"flag"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>transition&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 注意： 动画钩子函数的第一个参数：el，表示 要执行动画的那个DOM元素，是个原生的 JS DOM对象</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 大家可以认为 ， el 是通过 document.getElementById('') 方式获取到的原生JS DOM对象</span></span><br><span class="line"><span class="regexp">        beforeEnter(el)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 设置小球开始动画之前的，起始位置</span></span><br><span class="line"><span class="regexp">          el.style.transform = "translate(0, 0)"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        enter(el, done)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 这句话，没有实际的作用，但是，如果不写，出不来动画效果；</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 可以认为 el.offsetWidth 会强制动画刷新</span></span><br><span class="line"><span class="regexp">          el.offsetWidth</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ enter 表示动画 开始之后的样式，这里，可以设置小球完成动画之后的，结束状态</span></span><br><span class="line"><span class="regexp">          el.style.transform = "translate(150px, 450px)"</span></span><br><span class="line"><span class="regexp">          el.style.transition = 'all 1s ease'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 这里的 done， 起始就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</span></span><br><span class="line"><span class="regexp">          done()</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        afterEnter(el)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 动画完成之后，会调用 afterEnter</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ console.log('ok')</span></span><br><span class="line"><span class="regexp">          this.flag = !this.flag</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="transition-group"><a href="#transition-group" class="headerlink" title="transition-group"></a>transition-group</h3><ul><li><p>在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup </p></li><li><p>如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性</p></li><li><p>给 transition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果</p></li><li><p>通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">      border: 1px dashed #999;</span><br><span class="line">      margin: <span class="number">5</span>px;</span><br><span class="line">      line-height: <span class="number">35</span>px;</span><br><span class="line">      padding-left: <span class="number">5</span>px;</span><br><span class="line">      font-size: <span class="number">12</span>px;</span><br><span class="line">      width: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">      background-color: hotpink;</span><br><span class="line">      transition: all <span class="number">0.8</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    .v-enter,</span><br><span class="line">    .v-leave-to &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">      transform: translateY(<span class="number">80</span>px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .v-enter-active,</span><br><span class="line">    .v-leave-active &#123;</span><br><span class="line">      transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span></span><br><span class="line">    .v-move &#123;</span><br><span class="line">      transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        Id:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"id"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;label&gt;</span></span><br><span class="line"><span class="regexp">        Name:</span></span><br><span class="line"><span class="regexp">        &lt;input type="text" v-model="name"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>label&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"添加"</span> @click=<span class="string">"add"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- &lt;ul&gt; --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;transition-group appear tag="ul"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li v-for="(item, i) in list" :key="item.id" @click="del(i)"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/transition-group&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- &lt;/u</span>l&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        id: '',</span></span><br><span class="line"><span class="regexp">        name: '',</span></span><br><span class="line"><span class="regexp">        list: [</span></span><br><span class="line"><span class="regexp">          &#123; id: 1, name: '赵高' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 2, name: '秦桧' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 3, name: '严嵩' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 4, name: '魏忠贤' &#125;</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        add() &#123;</span></span><br><span class="line"><span class="regexp">          this.list.push(&#123; id: this.id, name: this.name &#125;)</span></span><br><span class="line"><span class="regexp">          this.id = this.name = ''</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        del(i) &#123;</span></span><br><span class="line"><span class="regexp">          this.list.splice(i, 1)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="全局组件定义的四种方式"><a href="#全局组件定义的四种方式" class="headerlink" title="全局组件定义的四种方式"></a>全局组件定义的四种方式</h3><ol><li><p>使用 Vue.extend 配合 Vue.component 方法：</p><ul><li><p>第一种形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 Vue.extend 来创建全局的Vue组件</span><br><span class="line"> var com1 &#x3D; Vue.extend(&#123;</span><br><span class="line">    &#x2F;&#x2F;   template: &#39;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;&#x2F;h3&gt;&#39; &#x2F;&#x2F; 通过 template 属性，指定了组件要展示的HTML结构</span><br><span class="line"> &#125;)</span><br><span class="line"> &#x2F;&#x2F; 使用 Vue.component(&#39;组件的名称&#39;, 创建出来的组件模板对象)</span><br><span class="line"> &#x2F;&#x2F; 如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接；</span><br><span class="line"> Vue.component(&#39;myCom1&#39;, com1)</span><br></pre></td></tr></table></figure></li><li><p>第二种形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;mycom1&#39;, Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 如果要使用组件，直接，把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&gt;</span><br><span class="line">    &lt;mycom1&gt;&lt;<span class="regexp">/mycom1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">      template: <span class="string">'&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用 Vue.component 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 还是使用 标签形式,引入自己的组件 --&gt;</span><br><span class="line">    &lt;mycom2&gt;&lt;&#x2F;mycom2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</span><br><span class="line">    Vue.component(&#39;mycom2&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div&gt;&lt;h3&gt;这是直接使用 Vue.component 创建出来的组件&lt;&#x2F;h3&gt;&lt;span&gt;123&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件模板template配合component：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;mycom3&gt;&lt;&#x2F;mycom3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 在 被控制的 #app 外面,使用 template 元素,定义组件的HTML模板结构  --&gt;</span><br><span class="line">  &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h4&gt;好用,不错!&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&#39;mycom3&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过 对象 字面量的形式， 定义了一个 组件模板对象,来构造组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;mylogin&gt;&lt;&#x2F;mylogin&gt; --&gt;</span><br><span class="line">    &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义组件的时候，如果要定义全局的组件， Vue.component(&#39;组件的名称&#39;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 通过 对象 字面量的形式， 定义了一个 组件模板对象</span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;1234&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;  通过  Vue.component 把 组件模板对象，注册为一个全局的Vue 组件，同时，为这个组件起了一个名称，可以让我们  通过 标签形式，在页面中直接引入这个组件</span><br><span class="line">    &#x2F;&#x2F; Vue.component(&#39;mylogin&#39;, login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        &#x2F;&#x2F; &#39;组件的名称&#39;: 组件的模板对象</span><br><span class="line">        &#x2F;&#x2F; &#39;mylogin&#39;: login</span><br><span class="line">        login</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用components属性定义局部子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class="line">      &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id&#x3D;&quot;tmpl2&quot;&gt;</span><br><span class="line">      &lt;h1&gt;这是私有的 login 组件&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    </span><br><span class="line">      var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app2&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        components: &#123; &#x2F;&#x2F; 定义实例内部私有组件的</span><br><span class="line">          login: &#123;</span><br><span class="line">            template: &#39;#tmpl2&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3></li></ol></li></ul><ol><li>组件可以有自己的 data 数据</li><li>组件的 data 和 实例的 data 有点不一样,实例中的 data 可以为一个对象,但是 组件中的 data 必须是一个方法</li><li>组件中的 data 除了必须为一个方法之外,这个方法内部,还必须返回一个对象才行;</li><li>组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;mycom1&gt;&lt;&#x2F;mycom1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt; </span><br><span class="line">    Vue.component(&#39;mycom1&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;这是全局组件 --- &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">      data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#39;这是组件的中data定义的数据&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="component"><a href="#component" class="headerlink" title="component"></a>component</h3><ol><li>component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">     &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- Vue提供了 component ,来展示对应名称的组件 --&gt;</span><br><span class="line">     &lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --&gt;</span><br><span class="line">     &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 总结:当前学习了几个 Vue 提供的标签了??? --&gt;</span><br><span class="line">     &lt;!-- component,  template,  transition,  transitionGroup  --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     &#x2F;&#x2F; 组件名称是 字符串</span><br><span class="line">     Vue.component(&#39;login&#39;, &#123;</span><br><span class="line">       template: &#39;&lt;h3&gt;登录组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     Vue.component(&#39;register&#39;, &#123;</span><br><span class="line">       template: &#39;&lt;h3&gt;注册组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         comName: &#39;login&#39; &#x2F;&#x2F; 当前 component 中的 :is 绑定的组件的名称</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;&#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ol><li>子组件中，默认无法访问到 父组件中的 data 上的数据 和 methods 中的方法</li><li>父组件，可以在引用子组件的时候， 通过 属性绑定（v-bind:） 的形式, 把 需要传递给 子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用<blockquote><p> 注意： 子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到子组件 data 身上,data 上的数据，都是可读可写的；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;com1 v-bind:parentmsg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;com1&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         msg: &#39;123 啊-父组件中的数据&#39;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         com1: &#123;</span><br><span class="line">           data() &#123; </span><br><span class="line">             return &#123;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           template: &#39;&lt;h1 @click&#x3D;&quot;change&quot;&gt;这是子组件 --- &#123;&#123; parentmsg &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line"></span><br><span class="line">           &lt;!-- 注意： 组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的</span><br><span class="line">           props 中的数据，都是只读的，无法重新赋值 --&gt;</span><br><span class="line">           props: [&#39;parentmsg&#39;], &#x2F;&#x2F; 把父组件传递过来的 parentmsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="父组件把方法传给子组件"><a href="#父组件把方法传给子组件" class="headerlink" title="父组件把方法传给子组件"></a>父组件把方法传给子组件</h3><ol><li><p>父组件向子组件传递方法多用于，把子组件的数据传递给父组件</p></li><li><p>父组件向子组件传递方法，使用的是事件绑定机制； v-on, 当我们自定义了一个 事件属性之后，那么，子组件就能够，通过某些方式，来调用传递进去的这个方法了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;com2 @func&#x3D;&quot;show&quot;&gt;&lt;&#x2F;com2&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h1&gt;这是 子组件&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是子组件中的按钮 - 点击它，触发 父组件传递过来的 func 方法&quot; @click&#x3D;&quot;myclick&quot;&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var com2 &#x3D; &#123;</span><br><span class="line">       template: &#39;#tmpl&#39;,</span><br><span class="line">       data() &#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           sonmsg: &#123; name: &#39;小头儿子&#39;, age: 6 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         myclick() &#123;</span><br><span class="line">           &#x2F;&#x2F; 当点击子组件的按钮的时候，如何 拿到 父组件传递过来的 func 方法，并调用这个方法？？？</span><br><span class="line">           &#x2F;&#x2F; this.$emit(&#39;func123&#39;, 123, 456) 可以向父组件的函数传递多个值</span><br><span class="line">           this.$emit(&#39;func&#39;, this.sonmsg)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         datamsgFormSon: null</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         show(data) &#123;</span><br><span class="line">           this.datamsgFormSon &#x3D; data</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         com2</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><ol><li><p>refs既可以操作元素也可以操作组件中的数据和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素&quot; @click&#x3D;&quot;getElement&quot; ref&#x3D;&quot;mybtn&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;h3 id&#x3D;&quot;myh3&quot; ref&#x3D;&quot;myh3&quot;&gt;哈哈哈， 今天天气太好了！！！&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">   &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">   &lt;login ref&#x3D;&quot;mylogin&quot;&gt;&lt;&#x2F;login&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"></span><br><span class="line">   var login &#x3D; &#123;</span><br><span class="line">     template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         msg: &#39;son msg&#39;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       show() &#123;</span><br><span class="line">         console.log(&#39;调用了子组件的方法&#39;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">   var vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#app&#39;,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       getElement() &#123;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 使用refs操作元素输出h3中的内容</span><br><span class="line">         console.log(this.$refs.myh3.innerText) --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 使用refs操作子组件的数据和方法</span><br><span class="line">         console.log(this.$refs.mylogin.msg)</span><br><span class="line">          this.$refs.mylogin.show() --&gt;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     components: &#123;</span><br><span class="line">       login</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="router的基本使用"><a href="#router的基本使用" class="headerlink" title="router的基本使用"></a>router的基本使用</h3><ol><li>router-link 默认渲染为一个a 标签</li><li>vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去, 我们可以把 router-view 认为是一个占位符</li><li>创建一个路由对象， 当 导入 vue-router 包之后，在 window 全局对象中，就有了一个 路由的构造函数，叫做 VueRouter, 在 new 路由对象的时候，可以为 构造函数，传递一个配置对象</li><li>routes路由匹配规则<ul><li>每个路由规则，都是一个对象，这个规则对象，身上，有两个必须的属性：</li><li>属性1 是 path， 表示监听 哪个路由链接地址；</li><li>属性2 是 component， 表示，如果 路由是前面匹配到的 path ，则展示 component 属性对应的那个组件<blockquote><p>component 的属性值，必须是一个 组件的模板对象， 不能是 组件的引用名称；</p></blockquote></li></ul></li><li>router高亮的两种方式<ul><li>linkActiveClass 里面添加类</li><li>也可以直接在router-link-active中抒写样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .router-link-active,</span><br><span class="line">  .myactive &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: 800;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    font-size: 80px;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot; tag&#x3D;&quot;span&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 组件的模板对象</span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var register &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var routerObj &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [ </span><br><span class="line">        &#x2F;&#x2F; &#123; path: &#39;&#x2F;&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;login&#39; &#125;, &#x2F;&#x2F; 这里的 redirect 和 Node 中的 redirect 完全是两码事</span><br><span class="line">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">      ],</span><br><span class="line">      linkActiveClass: &#39;myactive&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: routerObj &#x2F;&#x2F; 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="路由中的传参"><a href="#路由中的传参" class="headerlink" title="路由中的传参"></a>路由中的传参</h3><ol><li><p>使用 查询字符串，给路由传递参数方式一:</p><ul><li>如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性</li><li>传递后需要用this.$route.query调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;login?id&#x3D;10&amp;name&#x3D;zs&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;登录 --- &#123;&#123; $route.query.id &#125;&#125; --- &#123;&#123; $route.query.name &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">       data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           msg: &#39;123&#39;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       created()&#123; &#x2F;&#x2F; 组件的生命周期钩子函数</span><br><span class="line">         &#x2F;&#x2F; console.log(this.$route)</span><br><span class="line">         &#x2F;&#x2F; console.log(this.$route.query.id)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var register &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var router &#x3D; new VueRouter(&#123;</span><br><span class="line">       routes: [</span><br><span class="line">         &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">         &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       &#x2F;&#x2F; router: router</span><br><span class="line">       router</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 查询字符串，给路由传递参数方式二:</p></li></ol><ul><li>如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性</li><li>传递后需要用this.$route.params调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;12&#x2F;ls&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;登录 --- &#123;&#123; $route.params.id &#125;&#125; --- &#123;&#123; $route.params.name &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">       data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           msg: &#39;123&#39;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       created()&#123; &#x2F;&#x2F; 组件的生命周期钩子函数</span><br><span class="line">         console.log(this.$route.params.id)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var register &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var router &#x3D; new VueRouter(&#123;</span><br><span class="line">       routes: [</span><br><span class="line">         &#123; path: &#39;&#x2F;login&#x2F;:id&#x2F;:name&#39;, component: login &#125;,</span><br><span class="line">         &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       &#x2F;&#x2F; router: router</span><br><span class="line">       router</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><ol><li>使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是 Account 组件&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 组件的模板对象</span><br><span class="line">    var account &#x3D; &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;登录&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var register &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;注册&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#39;&#x2F;account&#39;,</span><br><span class="line">          component: account,</span><br><span class="line">          &#x2F;&#x2F; </span><br><span class="line">          children: [</span><br><span class="line">            &#123; path: &#39;login&#39;, component: login &#125;,</span><br><span class="line">            &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="导航对象"><a href="#导航对象" class="headerlink" title="导航对象"></a>导航对象</h3><ol><li><p>this.$router.push(‘/home’)</p><ul><li>这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</li></ul></li><li><p>this.$router.replace(‘/home’)</p><ul><li>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</li></ul></li><li><p>this.$router.go(n)</p><ul><li>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在浏览器记录中前进一步，等同于 history.forward()</span><br><span class="line">this.$router.go(1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 后退一步记录，等同于 history.back()</span><br><span class="line">this.$router.go(-1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前进 3 步记录</span><br><span class="line"> this.$router.go(3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果 history 记录不够用，那就默默地失败呗</span><br><span class="line"> this.$router.go(-100)</span><br><span class="line"> this.$router.go(100)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>this.$router.back()</p></li></ol><h2 id="watch和computed"><a href="#watch和computed" class="headerlink" title="watch和computed"></a>watch和computed</h2><ol><li>watch使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstname&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastname&quot;&gt; &#x3D;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;fullname&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstname: &#39;&#39;,</span><br><span class="line">        lastname: &#39;&#39;,</span><br><span class="line">        fullname: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123; </span><br><span class="line">        firstname(newVal, oldVal) &#123;</span><br><span class="line">          this.fullname &#x3D; newVal + &#39;-&#39; + this.lastname</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;lastname&#39;: function (newVal) &#123;</span><br><span class="line">          this.fullname &#x3D; this.firstname + &#39;-&#39; + newVal</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li>computed 中，可以定义一些属性，这些属性，叫做 【计算属性】， 计算属性的本质，就是一个方法，只不过，我们在使用这些计算属性的时候，是把它们的名称，直接当作属性来使用的；并不会把计算属性，当作方法去调用；<ul><li>计算属性，在引用的时候，一定不要加 () 去调用，直接把它当作普通属性去使用就好了；</li><li>只要计算属性，这个 function 内部，所用到的任何data中的数据发送了变化，就会立即重新计算这个计算属性的值</li><li>计算属性的求值结果，会被缓存起来，方便下次直接使用； 如果计算属性方法中，所以来的任何数据，都没有发生过变化，则，不会重新对计算属性求值；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstname&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;middlename&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastname&quot;&gt; &#x3D;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;fullname&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstname: &#39;&#39;,</span><br><span class="line">        lastname: &#39;&#39;,</span><br><span class="line">        middlename: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; </span><br><span class="line">        fullname() &#123;</span><br><span class="line">          return this.firstname + &#39;-&#39; + this.middlename + &#39;-&#39; + this.lastname</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>watch和computed的区别<ul><li>watch是监听data身上的数据， 主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体；</li><li>computed只是单纯的将数据处理后返回回来，只是对数据进行了处理，只能进行简单的处理，不能进行具体的业务逻辑操作，计算后会缓存下来，直到数据发生变化，才会重新计算</li></ul></li></ol><h2 id="vue项目式结构"><a href="#vue项目式结构" class="headerlink" title="vue项目式结构"></a>vue项目式结构</h2><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><ol><li>普通形式渲染页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;33333&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         login</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li>render函数渲染页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;444444&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       render: function (createElements) &#123; &#x2F;&#x2F; createElements 是一个 方法，调用它，能够把 指定的 组件模板，渲染为 html 结构</span><br><span class="line">         return createElements(login)</span><br><span class="line">         &#x2F;&#x2F; 注意：这里 return 的结果，会 替换页面中 el 指定的那个 容器</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="项目中vue的版本问题"><a href="#项目中vue的版本问题" class="headerlink" title="项目中vue的版本问题"></a>项目中vue的版本问题</h3><ol><li>在项目中我们用import导入的vue是阉割版的vue(vue.runtime.commom.js), 阉割版的vue没有编译器，不能解析模板字符串（比如传入一个字符串给 template 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板）<ul><li>在阉割版中不能在main.js中通过el：#app，找到相应的位置，把数据和组件渲染到页面中，只能通过render函数把组件渲染到#app相应的位置</li><li>如果想在Vue项目中使用模板对象，在webpack中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ul><li>默认阉割版不能解析.vue文件需要安装<code>cnpm i vue-loader vue-template-compiler -D</code>, 在配置文件中，新增loader哦配置项 { test:/.vue$/, use: ‘vue-loader’ }</li></ul></li></ul></li></ol><h3 id="webpack-中如何使用-vue"><a href="#webpack-中如何使用-vue" class="headerlink" title="webpack 中如何使用 vue"></a>webpack 中如何使用 vue</h3><ol><li>安装vue的包：  cnpm i vue -S</li><li>由于 在 webpack 中，推荐使用 .vue 这个组件模板文件定义组件，所以，需要安装 能解析这种文件的 loader    cnpm i vue-loader vue-template-complier -D</li><li>在webpack.config.js中，添加如下module规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> module: &#123;</span><br><span class="line"></span><br><span class="line">  rules: [</span><br><span class="line"></span><br><span class="line">    &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; test: &#x2F;\.vue$&#x2F;, use: &#39;vue-loader&#39; &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建App.js组件页面：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;我是h3&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      msg: &#39;OK&#39;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line"></span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li>创建main.js入口文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 导入 Vue 组件</span><br><span class="line"></span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 App组件</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;components&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个 Vue 实例，使用 render 函数，渲染指定的组件</span><br><span class="line"></span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  render: c &#x3D;&gt; c(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h3><ol><li>在main.js中导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> import Vue from &#39;vue&#39;</span><br><span class="line"> import router from &#39;.&#x2F;index.js&#39;</span><br><span class="line"></span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; render: c &#x3D;&gt; &#123; return c(App) &#125;</span><br><span class="line"></span><br><span class="line">  render(c) &#123;</span><br><span class="line"></span><br><span class="line">    return c(App);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  router &#x2F;&#x2F; 将路由对象，挂载到 Vue 实例上</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>创建index.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> import Vue from &#39;vue&#39;</span><br><span class="line"> import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line"> Vue.use(Router)</span><br><span class="line"></span><br><span class="line"> import login from &#39;.&#x2F;components&#x2F;account&#x2F;login.vue&#39;</span><br><span class="line"> import register from &#39;.&#x2F;components&#x2F;account&#x2F;register.vue&#39;</span><br><span class="line"> </span><br><span class="line"> export default new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#x2F;&#x2F; account  goodslist</span><br><span class="line">    &#123; path: &#39;&#x2F;account&#39;, component: account &#125;,</span><br><span class="line">    &#123; path: &#39;&#x2F;goodslist&#39;, component: goodslist &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在.vue组件中使用vue-resource获取数据</h3><ol><li>运行cnpm i vue-resource -S安装模块</li><li>导入 vue-resource组件并使用在main.js如下配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line">Vue.use(VueResource)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/Hexo/"/>
      <url>/Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli</title>
      <link href="/vue-cli/"/>
      <url>/vue-cli/</url>
      
        <content type="html"><![CDATA[<p>Vue.js 开发的标准工具</p><a id="more"></a><h2 id="vue-cli脚手架的安装"><a href="#vue-cli脚手架的安装" class="headerlink" title="vue-cli脚手架的安装"></a>vue-cli脚手架的安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><hr><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p><code>vue create hello-world</code></p><hr><h3 id="项目搭建过程"><a href="#项目搭建过程" class="headerlink" title="项目搭建过程"></a>项目搭建过程</h3><ol><li><p>命令行输入<code>vue create 文件名</code><br><img src="../image/vuecli1.png" alt=""></p><ul><li><p>Please pick a preset: (Use arrow keys) preset是之前预设过的配置(如果没有选择下面两个选项, 如果有选择直接安装)enter</p></li><li><p>default (babel, eslint): 默认配置(直接enter)非常适合快速创建一个新的项目的原型, 但是没有带任何辅助功能的npm包</p></li><li><p>Manually select feature: 手动配置(按下方向键↓调换选项)是我们所需要的面向生产的项目，提供可选择的npm包</p></li></ul></li><li><p>vue配置 (方向键↑和↓进行切换，空格键进行确定)<br><img src="../image/vuecli2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel  <span class="comment">// Babel 是一个 JavaScript 编译器</span></span><br><span class="line">( ) TypeScript <span class="comment">// javaScript的超集</span></span><br><span class="line">( ) Progressive Web App (PWA) Support <span class="comment">// 渐变式web应用程序</span></span><br><span class="line">( ) Router <span class="comment">// vue-router(vue路由)</span></span><br><span class="line">( ) Vuex <span class="comment">// vuex(vue的状态管理模式)</span></span><br><span class="line">( ) CSS Pre-processors <span class="comment">// css 预处理器</span></span><br><span class="line">(*) Linter / Formatter <span class="comment">// 代码风险检测和格式化(如：Eslnt)</span></span><br><span class="line">( ) Unit Testing <span class="comment">// 单元测试</span></span><br><span class="line">( ) E2E Testing <span class="comment">// e2e测试</span></span><br></pre></td></tr></table></figure></li><li><p>Router<br><img src="../image/vuecli3.png" alt=""></p><ul><li>首先会让你选择是否使用history router: Vue-Router有两种模式分别是hash和history(建议选择no), 这样直接可以使用， 如果想使用可以查看下面的方法尽享配置</li><li>如果想切换到history模式,在路由中填上如下代码:<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">具体配置</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CSS Pre-processors(根据自己的需要选择配置)<br><img src="../image/vuecli4.png" alt=""></p><ul><li>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目</li><li>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</li><li>Stylus - 富有表现力的、动态的、健壮的CSS</li></ul></li><li><p>Linter / Formatter(如下是代码检测错误的不同版本, 根据自己的需要选择配置)<br><img src="../image/vuecli5.png" alt=""></p><ul><li>ESLint with error prevention only(仅仅给你报语法上的错误，不给你代码进行规范)</li><li>ESLint + Airbnb config(这三个选项不仅有语法错误上的提示，而且有自己不同的代码规范原则，想进行具体了解，自行看官方文档)<br>ESLint + Standard config<br>ESLint + Prettier</li></ul></li><li><p>把babel,postcss,eslint这些配置文件放哪：(建议选择In dedicated config files，这样不会时package.json太过杂乱)<br><img src="../image/vuecli6.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files <span class="comment">// 单独放在一个文件</span></span><br><span class="line">  In package.json <span class="comment">// 放在package.json</span></span><br></pre></td></tr></table></figure></li><li><p>是否保存配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Save <span class="keyword">this</span> <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? (Y/n) <span class="comment">// 是否记录一下以便下次继续使用这套配置</span></span><br><span class="line"><span class="comment">// 选保存之后，会让你写一个配置的名字：</span></span><br><span class="line">Save preset <span class="keyword">as</span>:  name <span class="comment">// 然后你下次进入配置可以直接使用你这次的配置了</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="通过vue-ui进行项目构建"><a href="#通过vue-ui进行项目构建" class="headerlink" title="通过vue ui进行项目构建"></a>通过<code>vue ui</code>进行项目构建</h3><ol><li>在命令行执行如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><img src="../image/vuecli7.png" alt=""></li><li>浏览器弹出如图弹框<br><img src="../image/vuecli8.png" alt=""></li><li>打开项目管理器 -&gt; 创建 -&gt; 在此创建新项目<br><img src="../image/vuecli9.png" alt=""></li><li>在详情中创建项目名 -&gt; 下一步<br><img src="../image/vuecli10.png" alt=""></li><li>预设中选择手动 -&gt; 下一步<br><img src="../image/vuecli11.png" alt=""></li><li>在功能中选自自己需要的配置 -&gt; 下一步<br><img src="../image/vuecli12.png" alt=""></li><li>在配置中选择自己需要的配置 -&gt; 创建项目<br><img src="../image/vuecli13.png" alt=""></li><li>保存预设名(我选择了不保存)<br><img src="../image/vuecli14.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
