<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小程序</title>
      <link href="/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="微信⼩程序介绍"><a href="#微信⼩程序介绍" class="headerlink" title="微信⼩程序介绍"></a>微信⼩程序介绍</h1><p> 微信⼩程序，简称⼩程序，英⽂名 Mini Program ，是⼀种不需要下载安装即可使⽤的应⽤，它实现 了应⽤“触⼿可及”的梦想，⽤⼾扫⼀扫或搜⼀下即可打开应⽤</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p> 开发微信⼩程序之前，必须要准备好相应的环境</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p> 建议使用全新的邮箱，没有注册过其他小程序或者公众号的。访问<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">注册⻚⾯</a>耐⼼完成注册即可。</p><h2 id="获取APPID"><a href="#获取APPID" class="headerlink" title="获取APPID"></a>获取APPID</h2><p> 由于后期调⽤微信⼩程序的接⼝等功能，需要索取开发者的⼩程序中的 APPID ，所以在注册成功后， 可登录，然后获取APPID。</p><p> <a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=1571393054" target="_blank" rel="noopener">登录</a>，成功后可看到如下界⾯</p><p> 然后复制你的APPID,悄悄的保存起来，不要给别⼈看到😄。<br> <img src="../image/xiao1.png" alt=""><br> <img src="../image/xiao2.png" alt=""></p><h2 id="开发⼯具"><a href="#开发⼯具" class="headerlink" title="开发⼯具"></a>开发⼯具</h2><p> <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">下载地址</a></p><p> <img src="../image/xiao3.png" alt=""><br> 微信⼩程序⾃带开发者⼯具，集 <code>开发</code> <code>预览</code> <code>调试</code> <code>发布</code> 于⼀⾝的 完整环境。</p><p> 但是由于编码的体验不算好，因此 建议使⽤ <code>vs code</code> + <code>微信小程序编辑工具</code> 来实现编码</p><p> <code>vs code</code> 负责敲代码， <code>微信编辑工具</code>负责预览</p><h1 id="第⼀个微信⼩程序"><a href="#第⼀个微信⼩程序" class="headerlink" title="第⼀个微信⼩程序"></a>第⼀个微信⼩程序</h1><h2 id="打开微信开发者⼯具"><a href="#打开微信开发者⼯具" class="headerlink" title="打开微信开发者⼯具"></a>打开微信开发者⼯具</h2><p> 注意 第⼀次登录的时候 需要扫码登录<br> <img src="../image/xiao4.png" alt=""></p><h2 id="新建⼩程序项⽬"><a href="#新建⼩程序项⽬" class="headerlink" title="新建⼩程序项⽬"></a>新建⼩程序项⽬</h2><p> <img src="../image/xiao5.png" alt=""></p><h2 id="填写项⽬信息"><a href="#填写项⽬信息" class="headerlink" title="填写项⽬信息"></a>填写项⽬信息</h2><p> <img src="../image/xiao6.png" alt=""></p><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2><p> <img src="../image/xiao3.png" alt=""></p><h1 id="微信开发者⼯具介绍"><a href="#微信开发者⼯具介绍" class="headerlink" title="微信开发者⼯具介绍"></a>微信开发者⼯具介绍</h1><p> 详细的使⽤，可以查看<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">官⽹</a></p><p> <img src="../image/xiao7.png" alt=""></p><h1 id="⼩程序结构⽬录"><a href="#⼩程序结构⽬录" class="headerlink" title="⼩程序结构⽬录"></a>⼩程序结构⽬录</h1><p> <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html" target="_blank" rel="noopener">⼩程序框架</a>的⽬标是通过尽可能简单、⾼效的⽅式让开发者可以在微信中开发具有原⽣ <code>APP</code> 体验的服务。</p><p> ⼩程序框架提供了⾃⼰的视图层描述语⾔ <code>WXML</code> 和 <code>WXSS</code> ，以及 <code>JavaScript</code> ，并在视图层与逻辑层间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑。</p><h2 id="⼩程序⽂件结构和传统web对⽐"><a href="#⼩程序⽂件结构和传统web对⽐" class="headerlink" title="⼩程序⽂件结构和传统web对⽐"></a>⼩程序⽂件结构和传统web对⽐</h2><table><thead><tr><th>结构</th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>逻辑</td><td>Javascript</td><td>Javascript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table><p> 通过以上对⽐得出，传统web 是三层结构。⽽微信⼩程序 是四层结构，多了⼀层 配置<code>.json</code></p><h2 id="基本的项⽬⽬录"><a href="#基本的项⽬⽬录" class="headerlink" title="基本的项⽬⽬录"></a>基本的项⽬⽬录</h2><p> <img src="../image/xiao8.png" alt=""></p><h1 id="⼩程序配置⽂件"><a href="#⼩程序配置⽂件" class="headerlink" title="⼩程序配置⽂件"></a>⼩程序配置⽂件</h1><p>⼀个⼩程序应⽤程序会包括最基本的两种配置⽂件。⼀种是全局的 <code>app.json</code> 和 ⻚⾯⾃⼰的<code>page.json</code></p><blockquote><p>注意：配置文件中不能出现注释</p></blockquote><h2 id="全局配置-app-json"><a href="#全局配置-app-json" class="headerlink" title="全局配置 app.json"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">全局配置 app.json</a></h2><p> <code>app.json</code> 是当前⼩程序的全局配置，包括了⼩程序的所有⻚⾯路径、界⾯表现、⽹络超时时间、底 部 <code>tab</code> 等。普通快速启动项⽬⾥边的 <code>app.json</code> 配置<br> <img src="../image/xiao9.png" alt=""><br> 字段的含义</p><ol><li><code>pages</code> 字段⸺⽤于描述当前⼩程序所有⻚⾯路径，这是为了让微信客⼾端知道当前你的⼩程序 ⻚⾯定义在哪个⽬录。</li><li><code>window</code> 字段⸺定义⼩程序所有⻚⾯的顶部背景颜⾊，⽂字颜⾊定义等。</li><li>完整的配置信息请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">app.json配置</a></li></ol><h3 id="tabbar"><a href="#tabbar" class="headerlink" title="tabbar"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar" target="_blank" rel="noopener">tabbar</a></h3><p> <img src="../image/xiao10.png" alt=""></p><h2 id="⻚⾯配置-page-json"><a href="#⻚⾯配置-page-json" class="headerlink" title="⻚⾯配置 page.json"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html" target="_blank" rel="noopener">⻚⾯配置 page.json</a></h2><p> 这⾥的 <code>page.json</code> 其实⽤来表⽰⻚⾯⽬录下的 <code>page.json</code> 这类和⼩程序⻚⾯相关的配置。 开发者可以独⽴定义每个⻚⾯的⼀些属性，如顶部颜⾊、是否允许下拉刷新等等。</p><p> ⻚⾯的配置只能设置 <code>app.json</code> 中部分 <code>window</code> 配置项的内容，⻚⾯中配置项会覆盖 <code>app.json</code>的 <code>window</code> 中相同的配置项。<br> <img src="../image/xiao11.png" alt=""></p><h2 id="sitemap-配置-了解即可"><a href="#sitemap-配置-了解即可" class="headerlink" title="sitemap 配置-了解即可"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html" target="_blank" rel="noopener">sitemap 配置-了解即可</a></h2><p> ⼩程序根⽬录下的 <code>sitemap.json</code> ⽂件⽤于配置⼩程序及其⻚⾯是否允许被微信索引。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/TypeScript/"/>
      <url>/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a>什么是TypeScript</h1><p> <code>TypeScript</code>是 <code>Javascript</code><strong>类型</strong>的<strong>超集</strong>，它可以编译成纯 <code>Javascript</code>, <code>TypeScript</code>可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的</p><ol><li>类型：这里的类型机制是指<strong>静态类型</strong><ul><li>在<code>javaScript</code>中的类型机制是<strong>动态类型</strong>，定义完类型，在后面的代码中可以更改类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span></span><br><span class="line">a = <span class="string">'123'</span> <span class="comment">// 不会报错</span></span><br></pre></td></tr></table></figure></li><li><code>TypeScript</code>与<code>javaScript</code>有所不同，类型机制是<strong>静态类型</strong>，一旦定义完类型，将无法改变其类型。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">b = <span class="string">'1'</span> <span class="comment">// 代码报错</span></span><br></pre></td></tr></table></figure></li></ul></li><li>超集<br><code>TypeScript</code>是<code>javaScript</code>的超集，<code>TypeScript</code>不但包含<code>javaScript</code>的语法特性，而且还延伸出了自己的语法特性。<blockquote><p><strong>注意</strong><br><code>TypeScript</code>不能直接在浏览器中运行，需要编译成<code>javaScript</code>，浏览器才能识别</p></blockquote></li></ol><h1 id="TypeScript的安装与环境的搭建"><a href="#TypeScript的安装与环境的搭建" class="headerlink" title="TypeScript的安装与环境的搭建"></a>TypeScript的安装与环境的搭建</h1><ol><li>TypeScript安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li><li>编译<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc helloworld.ts</span><br><span class="line">node helloworld.js</span><br></pre></td></tr></table></figure></li><li>安装工具简化便于过程<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ts-node</span><br></pre></td></tr></table></figure><ul><li>这样我们就可以这样编译<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node helloworld.ts</span><br></pre></td></tr></table></figure></li><li>还是不够简洁<br>推荐在<code>vscode</code>编译器中安装<code>Code Runner</code>插件，直接右键，<code>Run Code</code>执行代码</li></ul></li></ol><h1 id="静态类型的深入理解"><a href="#静态类型的深入理解" class="headerlink" title="静态类型的深入理解"></a>静态类型的深入理解</h1><p> 静态类型不仅规定了这个变量的类型(类型一旦规定，将无法改变)，而且这个变量将具备这个类型所有的属性和方法<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="number">1</span> <span class="comment">// 规定了a的类型，并且a具有number的所有属性和方法</span></span><br></pre></td></tr></table></figure></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p> <code>TypeScript</code> 的类型分为两种：<code>原始数据</code>类型（Primitive data types）和<code>对象类型</code>（Object types）。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>  基本数据类型包括：<code>布尔值</code>、<code>数值</code>、<code>字符串</code>、<code>null</code>、<code>undefined</code>以及 ES6 中的新类型 <code>Symbol</code>和<code>void</code>。</p><ol><li><strong>boolean</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><strong>number</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当变量采用两句话声明时，ts无法自动推断出类型</span></span><br><span class="line"><span class="keyword">let</span> count: <span class="built_in">number</span> </span><br><span class="line">count = <span class="number">123</span> <span class="comment">//count为number类型</span></span><br></pre></td></tr></table></figure></li><li><strong>string</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username: <span class="built_in">string</span> = <span class="string">'wormnimaya'</span></span><br></pre></td></tr></table></figure></li><li><strong>undefined</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li><li><strong>null</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><strong>void</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure></li><li><strong>|</strong><br>可以通过<code>|</code>来规定变量有多种静态类型<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">124</span></span><br><span class="line">temp = <span class="string">'str'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p> 基本数据类型包括：<code>对象</code>，<code>数组</code>，<code>类</code>，<code>函数</code></p><ol><li><strong>对象</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teacher: &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125; = &#123;</span><br><span class="line">  name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">  age: <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>数组</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><strong>函数</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getTotal: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以为数组指定返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">firstNumber: <span class="built_in">number</span>, secondNumber: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstNumber + secondNumber</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line">sayHello()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数永远执行不完</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorEmitter</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: &#123; first: <span class="built_in">number</span>, second: <span class="built_in">number</span> &#125;</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(&#123; first: <span class="number">1</span>, second: <span class="number">2</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数的两种定义方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">const</span> func = (str: <span class="built_in">string</span>) :<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str,<span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = func(<span class="string">'ha'</span>) <span class="comment">// total number类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> &#123; <span class="comment">// 这里的number可以省略，函数自己能够推断出类型</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str,<span class="number">10</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = func(<span class="string">'ha'</span>) <span class="comment">// total number类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">const</span> func1: <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = func1(<span class="string">'ha'</span>)</span><br></pre></td></tr></table></figure></li><li><strong>类</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dell: Person = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></li></ol><h2 id="类型的注解和类型的推断"><a href="#类型的注解和类型的推断" class="headerlink" title="类型的注解和类型的推断"></a>类型的注解和类型的推断</h2><p> 如果<code>TS</code>能够自动分析变量类型，我们就什么也不需要做了，如果<code>TS</code>无法分析变量类型的话，我们就需要使用类型注解</p><ol><li><strong>type annotation 类型注解</strong><br><code>type annotation</code>类型注解，我们来告诉<code>TS</code>变量是什么类型，<strong>大部分用在函数的形参上</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getToal</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getToal(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure></li><li><strong>type inference类型推断</strong><br><code>type inference</code>类型推断，<code>TS</code>会自动的去尝试分析变量的类型, <strong>用于大部分的基本数据类型</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span></span><br><span class="line"><span class="keyword">let</span> username = <span class="string">'wormnimaya'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> firstNumber = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> secondNumber = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> total = firstNumber + sencondNumber</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'dell'</span>,</span><br><span class="line">  age: <span class="string">'18'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组和元组"><a href="#数组和元组" class="headerlink" title="数组和元组"></a>数组和元组</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// (string | number) [] 代表数组每个元素式string类型或number类型</span></span><br><span class="line"><span class="keyword">const</span> arr:(<span class="built_in">string</span> | <span class="built_in">number</span>) [] = [<span class="number">1</span>, <span class="string">'a'</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// string[] 代表数组每个元素式string类型</span></span><br><span class="line"><span class="keyword">const</span> stringArr: <span class="built_in">string</span>[] = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中每个都是这个类型的对象</span></span><br><span class="line"><span class="comment">//第一种写法：</span></span><br><span class="line"><span class="keyword">const</span> objectArr: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125;[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种 type alias 类型别名</span></span><br><span class="line"><span class="keyword">type</span> User = &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">const</span> objectArr: User[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组中每个都是这个类型的对象</span></span><br><span class="line"><span class="keyword">class</span> Teacher &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectArr: Teacher[] = [</span><br><span class="line">  <span class="keyword">new</span> Teacher(),</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p> 元组就是有<code>固定长度</code>，并且每个元素有<code>固定的静态类型</code>的数组<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组 tuple</span></span><br><span class="line"> <span class="keyword">const</span> teacherInfo: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'wormnimaya'</span>, <span class="string">'male'</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> teacherList: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>] [] = [</span><br><span class="line">   [<span class="string">'dell'</span>, <span class="string">'male'</span>, <span class="number">22</span>],</span><br><span class="line">   [<span class="string">'wormnimaya'</span>, <span class="string">'male'</span>, <span class="number">21</span>],</span><br><span class="line">   [<span class="string">'jack'</span>, <span class="string">'male'</span>, <span class="number">12</span>],</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></p><h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><h2 id="用interface来进行类型规范的检验"><a href="#用interface来进行类型规范的检验" class="headerlink" title="用interface来进行类型规范的检验"></a>用<code>interface</code>来进行类型规范的检验</h2><ol><li><strong><code>interface</code>定义对象规范</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">// redonly name: string 这个redonly属性的意思是只能读不能写</span></span><br><span class="line">  name: <span class="built_in">string</span> <span class="comment">// 对象中必须含有 name 属性</span></span><br><span class="line">  age?: <span class="built_in">number</span> <span class="comment">// 可以 含有也可以不含有 age 属性</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 对象中可以添加string类型的任意名称的 属性名 属性值任意类型</span></span><br><span class="line">  say(): <span class="built_in">string</span> <span class="comment">// 方法必须返回string类型的数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPersonName = (person: Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">  sex: <span class="string">'male'</span>,</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getPersonName(person)</span><br></pre></td></tr></table></figure></li><li><strong>在<code>class</code>类中应用<code>interface</code></strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">   <span class="comment">// redonly name: string 这个redonly属性的意思是只能读不能写</span></span><br><span class="line">   name: <span class="built_in">string</span> <span class="comment">// 对象中必须含有 name 属性</span></span><br><span class="line">   age?: <span class="built_in">number</span> <span class="comment">// 可以 含有也可以不含有 age 属性</span></span><br><span class="line">   [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 对象中可以添加string类型的任意名称的 属性名 属性值任意类型</span></span><br><span class="line">   say(): <span class="built_in">string</span> <span class="comment">// 方法必须返回string类型的数组</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> User <span class="keyword">implements</span> Person &#123;</span><br><span class="line">   name: <span class="string">'wormnimaya'</span></span><br><span class="line">   grade: <span class="number">95</span></span><br><span class="line">   say() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'123'</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><strong><code>interface</code>的继承</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">   name: <span class="built_in">string</span> <span class="comment">// 对象中必须含有 name 属性</span></span><br><span class="line">   age?: <span class="built_in">number</span> <span class="comment">// 可以 含有也可以不含有 age 属性</span></span><br><span class="line">   [propName: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 对象中可以添加string类型的任意名称的 属性名 属性值任意类型</span></span><br><span class="line">   say(): <span class="built_in">string</span> <span class="comment">// 方法必须返回string类型的数组</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">interface</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">   sayHello(): <span class="built_in">string</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> getPersonName = (person: Teacher): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(person.name);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> person = &#123;</span><br><span class="line">   name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">   sex: <span class="string">'male'</span>,</span><br><span class="line">   say() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   sayHello() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> getPersonName(person)</span><br></pre></td></tr></table></figure></li><li><strong><code>interface</code>应用于函数</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SayHi &#123;</span><br><span class="line">   (word: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> func: SayHi = <span class="function">(<span class="params">word: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> word</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(func(<span class="string">'hi'</span>))</span><br></pre></td></tr></table></figure><h2 id="interface和type-alias的区别"><a href="#interface和type-alias的区别" class="headerlink" title="interface和type alias的区别"></a><strong>interface和type alias的区别</strong></h2><code>type alias</code>可以声明基本类型，但是<code>interface</code>不可以，在<code>typescript</code>的规范当中能用<code>interface</code>表述类型就用<code>interface</code>，<code>interface</code>表述不出来才用<code>type</code><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = <span class="built_in">string</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h1><h2 id="class类定义与继承"><a href="#class类定义与继承" class="headerlink" title="class类定义与继承"></a>class类定义与继承</h2><ol><li><strong>类的定义</strong><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">   name = <span class="string">'wormnimaya'</span></span><br><span class="line">   getName() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.getName());</span><br></pre></td></tr></table></figure></li><li><strong>类的继承</strong><br>子类继承父类后，<code>子类</code>有父类的<code>所有方法和属性</code>，同时子类还可以<code>重写父类的方法</code>，重写父类的方法后可以利用<code>super调用</code>父类被重写的方法。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    name = <span class="string">'wormnimaya'</span></span><br><span class="line">    getName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacher() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'my teacher'</span></span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'我重写了父类的方法'</span> + <span class="keyword">super</span>.getName()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher()</span><br><span class="line"><span class="built_in">console</span>.log(teacher.getName());</span><br><span class="line"><span class="built_in">console</span>.log(teacher.getTeacher());</span><br></pre></td></tr></table></figure></li></ol><h2 id="类的访问类型"><a href="#类的访问类型" class="headerlink" title="类的访问类型"></a>类的访问类型</h2><p> <code>private</code>, <code>protected</code>, <code>public</code>访问类型</p><ul><li><code>public</code>允许我在类的内外被调用</li><li><code>private</code>允许在类内被使用</li><li><code>protected</code>允许在类内及继承的子类中使用<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">   <span class="keyword">private</span> name = <span class="string">'wormnimaya'</span></span><br><span class="line">   <span class="keyword">protected</span> age = <span class="number">22</span></span><br><span class="line">   <span class="keyword">public</span> getName() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">   say() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.age <span class="comment">// protected定义的属性子类和自身能够访问和使用</span></span><br><span class="line">     <span class="keyword">this</span>.getName() <span class="comment">// public 定义的属性允许我在类的内外被调用和子类中使用</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"> <span class="comment">// person.name 属性name定义了private只能在类的内部访问和使用</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="constructor构造器"><a href="#constructor构造器" class="headerlink" title="constructor构造器"></a>constructor构造器</h2><p> <strong><code>super</code>可以调用父类的方法，也可以调用<code>父类的构造器</code>向父类传值</strong><br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">   <span class="comment">// 传统写法</span></span><br><span class="line">   <span class="comment">// public name: string</span></span><br><span class="line">   <span class="comment">// constructor(name: string) &#123;</span></span><br><span class="line">   <span class="comment">//   this.name = name</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'wormnimaya'</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure><br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">     <span class="keyword">super</span>(name) <span class="comment">// 在子类的构造其中必须调用super(), 不管是否需要传参</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(<span class="string">'wormnimaya'</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(teacher.name)</span><br><span class="line"><span class="built_in">console</span>.log(teacher.age)</span><br></pre></td></tr></table></figure></p><h2 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h2><p> 外部无法访问private定义的内容，可以通过setter和getter来实现<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span></span>)&#123;&#125;</span><br><span class="line">   <span class="keyword">get</span> name() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>._name</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">     <span class="keyword">this</span>._name = name</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'wormnimya'</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(person.name)</span><br><span class="line"> person.name = <span class="string">'xiaoming'</span></span><br><span class="line"> <span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure></p><h2 id="利用static实现单例模式"><a href="#利用static实现单例模式" class="headerlink" title="利用static实现单例模式"></a>利用static实现单例模式</h2><p>  在<code>TypeScript</code>中与<code>ES6</code>不同，<code>ES6</code>只能用<code>static</code>修饰方法，不能修饰属性，<code>TypeScrip</code>t中<code>static</code>既能修饰方法又能修饰属性<br>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Demo &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: Demo</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">      <span class="keyword">this</span>.instance = <span class="keyword">new</span> Demo(<span class="string">'wormnimaya'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> demo = Demo.getInstance()</span><br><span class="line"><span class="built_in">console</span>.log(demo.name)</span><br></pre></td></tr></table></figure></p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><p> 可以把<code>类中公共的部分定义</code>在<code>抽象类中</code>，抽象类不能通过<code>new</code>关键字来创建实例，只能<code>进行类的继承</code>，抽象类也可以有自己的<code>属性</code>和<code>方法</code>，如果在抽象类的方法前面加上关键字<code>abstract</code>，表明这个方法是<code>抽象方法</code>，具体实现由<code>被继承的类实现</code><br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> shape &#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">width: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">   getType() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'shape'</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> Circle <span class="keyword">extends</span> shape &#123;</span><br><span class="line">   getArea() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> Square <span class="keyword">extends</span> shape &#123;</span><br><span class="line">   getArea() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">456</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong><br>继承了抽象类，必须实现抽象类中的抽象方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/ajax/"/>
      <url>/ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器 </span></span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址</span></span><br><span class="line"> xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"> <span class="comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求 </span></span><br><span class="line"> xhr.send(<span class="literal">null</span>) </span><br><span class="line"> <span class="comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作 </span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">   <span class="comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成 </span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">     <span class="comment">// 通过 xhr 的 responseText 获取到响应的响应体</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>) </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h1><p> 由于 <code>readystatechange</code> 事件是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被 触发多次，所以我们有必要了解每一个状态值代表的含义：</p><table><thead><tr><th>readyState</th><th>状态描述</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用，建立了连接。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td></tr><tr><td>3</td><td>LOADING</td><td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>响应体下载完成，可以直接使用 <code>responseText</code> 。</td></tr></tbody></table><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState) </span><br><span class="line"><span class="comment">// =&gt; 0 </span></span><br><span class="line"><span class="comment">// 初始化 请求代理对象</span></span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'time.php'</span>) </span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState) </span><br><span class="line"><span class="comment">// =&gt; 1 </span></span><br><span class="line"><span class="comment">// open 方法已经调用，建立一个与服务端特定端口的连接</span></span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">this</span>.readyState) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">       <span class="comment">// =&gt; 2 </span></span><br><span class="line">       <span class="comment">// 已经接受到了响应报文的响应头 </span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 可以拿到头 </span></span><br><span class="line">       <span class="comment">// console.log(this.getAllResponseHeaders()) </span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'server'</span>)) </span><br><span class="line">       <span class="comment">// 但是还没有拿到体 console.log(this.responseText) </span></span><br><span class="line">       <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">       <span class="comment">// =&gt; 3 </span></span><br><span class="line">       <span class="comment">// 正在下载响应报文的响应体，有可能响应体为空，也有可能不完整 </span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 在这里处理响应体不保险（不可靠） </span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) </span><br><span class="line">       <span class="keyword">break</span> </span><br><span class="line">     </span><br><span class="line">     <span class="keyword">case</span> <span class="number">4</span>: </span><br><span class="line">       <span class="comment">// =&gt; 4 </span></span><br><span class="line">       <span class="comment">// 一切 OK （整个响应报文已经完整下载下来了） </span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 这里处理响应体 </span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) </span><br><span class="line">       <span class="keyword">break</span> </span><br><span class="line">   &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p> 通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 4 时，执行响应的后续逻辑。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">    <span class="comment">// 后续逻辑...... </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="遵循-HTTP"><a href="#遵循-HTTP" class="headerlink" title="遵循 HTTP"></a>遵循 HTTP</h1><p> 本质上 <code>XMLHttpRequest</code> 就是 <code>JavaScript</code> 在 <code>Web</code> 平台中发送 <code>HTTP</code> 请求的手段，所以我们发送出去的请求任然是 <code>HTTP</code> 请求，同样符合 <code>HTTP</code> 约定的格式：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置请求报文的请求行 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>) </span><br><span class="line"><span class="comment">// 设置请求头 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>) </span><br><span class="line"><span class="comment">// 设置请求体 </span></span><br><span class="line">xhr.send(<span class="literal">null</span>) </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">    <span class="comment">// 获取响应状态码 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.status) </span><br><span class="line">    <span class="comment">// 获取响应状态描述 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.statusText) </span><br><span class="line">    <span class="comment">// 获取响应头信息 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getResponseHeader(<span class="string">'Content‐Type'</span>)) <span class="comment">// 指定响应头 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.getAllResponseHeader()) <span class="comment">// 全部响应头 </span></span><br><span class="line">    <span class="comment">// 获取响应体 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) <span class="comment">// 文本形式</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseXML) <span class="comment">// XML 形式，了解即可不用了 </span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>参考文档</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</a></li></ul></blockquote><h1 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h1><h2 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><blockquote><p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 ? 参数传递。</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// GET 请求传递参数通常使用的是问号传参 </span></span><br><span class="line"><span class="comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./delete.php?id=1'</span>) </span><br><span class="line"><span class="comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传 </span></span><br><span class="line">xhr.send(<span class="literal">null</span>) </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span><br></pre></td></tr></table></figure><h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><blockquote><p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// open 方法的第一个参数的作用就是设置请求的 method </span></span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'./add.php'</span>) </span><br><span class="line"><span class="comment">// 设置请求头中的 Content‐Type 为 application/x‐www‐form‐urlencoded </span></span><br><span class="line"><span class="comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数据 </span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>) </span><br><span class="line"><span class="comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递 </span></span><br><span class="line"><span class="comment">// 格式：key1=value1&amp;key2=value2 </span></span><br><span class="line">xhr.send(<span class="string">'key1=value1&amp;key2=value2'</span>) </span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p> 关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p><blockquote><p>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等待<br>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</p></blockquote><p> <code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认 为 <code>true</code> ，如果需要同步执行可以通过传递 <code>false</code> 实现：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>) </span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// 默认第三个参数为 true 意味着采用异步方式执行 </span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'./time.php'</span>, <span class="literal">true</span>) </span><br><span class="line">xhr.send(<span class="literal">null</span>) xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">     <span class="comment">// 这里的代码最后执行 console.log('request done') </span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><br> 如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'before ajax'</span>) </span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest() </span><br><span class="line"><span class="comment">// 同步方式 xhr.open('GET', './time.php', false) </span></span><br><span class="line"><span class="comment">// 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发 </span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">    <span class="comment">// 这里的代码最后执行 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request done'</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>) </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after ajax'</span>)</span><br></pre></td></tr></table></figure><br> 演示同步异步差异。<br> 一定在发送请求 send() 之前注册 readystatechange （不管同步或者异步）</p><ul><li>为了让这个事件可以更加可靠（一定触发），一定是先注册<br>了解同步模式即可，切记不要使用同步模式。<br>至此，我们已经大致了解了 AJAX 的基本 API 。</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p> 一种数据描述手段<br> 老掉牙的东西，简单演示一下，不在这里浪费时间，基本现在的项目不用了。<br> 淘汰的原因：数据冗余太多</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p> 也是一种数据描述手段，类似于 JavaScript 字面量方式<br> 服务端采用 JSON 格式返回数据，客户端按照 JSON 格式解析数据。</p><blockquote><p>不管是 JSON 也好，还是 XML，只是在 AJAX 请求过程中用到，并不代表它们之间有必然的联系，它们只是 数据协议罢了</p></blockquote><h2 id="response、responseText和resonpseXML"><a href="#response、responseText和resonpseXML" class="headerlink" title="response、responseText和resonpseXML"></a>response、responseText和resonpseXML</h2><p> <strong>都是返回数据</strong></p><ol><li><p><code>resonpseXML</code> 专门用于获取服务器返回的 XML 数据，操作方式就是通过 <code>DOM</code> 的方式操作，但是需要服务端响应头中设置 <code>Content-Type</code></p></li><li><p><code>reponse</code> 获取的结果会根据 <code>responseType</code>的变化而变化</p><ul><li><code>xhr.responseType = &#39;&#39;</code>的方式告诉服务器，客户端想获取的格式。</li></ul></li><li><p><code>reponseText</code> 永远获得的结果都是字符串形式的响应体</p></li></ol><h2 id="处理响应数据渲染"><a href="#处理响应数据渲染" class="headerlink" title="处理响应数据渲染"></a>处理响应数据渲染</h2><blockquote><p><strong>模板引擎：</strong></p><ul><li>artTemplate: <a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">https://aui.github.io/art-template/</a><br>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到 HTML中</li></ul></blockquote><h2 id="兼容方案"><a href="#兼容方案" class="headerlink" title="兼容方案"></a>兼容方案</h2><p> XMLHttpRequest 在老版本浏览器（IE5/6）中有兼容问题，可以通过另外一种方式代替<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h2 id="AJAX-请求封装"><a href="#AJAX-请求封装" class="headerlink" title="AJAX 请求封装"></a>AJAX 请求封装</h2><blockquote><p>函数就可以理解为一个想要做的事情，函数体中约定了这件事情做的过程，直到调用时才开始工作。 将函数作为参数传递就像是将一个事情交给别人，这就是委托的概念</p></blockquote> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送一个 AJAX 请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>method 请求方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>url 请求地址 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>params 请求参数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Function&#125;</span> </span>done 请求完成过后需要做的事情（委托/回调） </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span> (<span class="params">method, url, params, done</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// 统一转换为大写便于后续判断 </span></span><br><span class="line">  method = method.toUpperCase() </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象形式的参数转换为 urlencoded 格式 </span></span><br><span class="line">  <span class="keyword">var</span> pairs = [] </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> params) &#123; </span><br><span class="line">    pairs.push(key + <span class="string">'='</span> + params[key]) </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> querystring = pairs.join(<span class="string">'&amp;'</span>) </span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> XMLHttpRequest() : <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>) </span><br><span class="line"></span><br><span class="line">  xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试通过 JSON 格式解析响应体 </span></span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">      done(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)) </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123; </span><br><span class="line">      done(<span class="keyword">this</span>.responseText) </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果是 GET 请求就设置 URL 地址 问号参数 </span></span><br><span class="line">   <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123; </span><br><span class="line">     url += <span class="string">'?'</span> + querystring </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   xhr.open(method, url) </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果是 POST 请求就设置请求体 </span></span><br><span class="line">   <span class="keyword">var</span> data = <span class="literal">null</span> </span><br><span class="line">   <span class="keyword">if</span> (method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">'Content‐Type'</span>, <span class="string">'application/x‐www‐form‐urlencoded'</span>) </span><br><span class="line">      data = querystring </span><br><span class="line">   &#125;</span><br><span class="line">   xhr.send(data) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'./get.php'</span>, &#123; <span class="attr">id</span>: <span class="number">123</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data) </span><br><span class="line">&#125;)</span><br><span class="line">ajax(<span class="string">'post'</span>, <span class="string">'./post.php'</span>, &#123; <span class="attr">foo</span>: <span class="string">'posted data'</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="built_in">console</span>.log(data) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery-中的-AJAX"><a href="#jQuery-中的-AJAX" class="headerlink" title="jQuery 中的 AJAX"></a>jQuery 中的 AJAX</h2><p> jQuery 中有一套专门针对 AJAX 的封装，功能十分完善，经常使用，需要着重注意。</p><blockquote><p><strong>参考：</strong></p><ul><li><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/</a></li><li><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></li></ul></blockquote><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p> 常用选项参数介绍：</p><ul><li><p>url：请求地址</p></li><li><p>type：请求方法，默认为 get</p></li><li><p>dataType：服务端响应数据类型</p></li><li><p>contentType：请求体内容类型，默认 application/x-www-form-urlencoded</p></li><li><p>data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</p></li><li><p>timeout：请求超时时间</p></li><li><p>beforeSend：请求发起之前触发</p></li><li><p>success：请求成功之后触发（响应状态码 200）</p></li><li><p>error：请求失败触发</p></li><li><p>complete：请求完成触发（不管成功与否）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: <span class="string">'./get.php'</span>, </span><br><span class="line">   type: <span class="string">'get'</span>, </span><br><span class="line">   dataType: <span class="string">'json'</span>, </span><br><span class="line">   data: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, </span><br><span class="line">   beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'before send'</span>) </span><br><span class="line">   &#125;,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(data) </span><br><span class="line">   &#125;,</span><br><span class="line">   error: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(err) </span><br><span class="line">   &#125;,</span><br><span class="line">   complete: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'request completed'</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h3><p> GET 请求快捷方法</p><h3 id="post"><a href="#post" class="headerlink" title="$.post"></a>$.post</h3><p> POST 请求快捷方法</p><h3 id="全局事件处理"><a href="#全局事件处理" class="headerlink" title="全局事件处理"></a>全局事件处理</h3><p> <a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noopener">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown如何写出项目目录结构</title>
      <link href="/markdown%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/markdown%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d536d3b6fb9a06ad229c449" target="_blank" rel="noopener">文章转自</a></p><ol><li>就是使用mddir来生成项目目录的结构<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install mddir --save</span><br><span class="line">cd node_modules/mddir/src</span><br><span class="line">node mddir "../../../" // 根目录(也可以自定义要输出的目录，必须写相对路径，相对于node_modules/mddir/src)</span><br></pre></td></tr></table></figure></li><li>命令完成后，在node_modules/mddir/src下生成了一个文件“directoryList.md”，直接给我们生成了md格式的项目目录，打开可以看到是这样子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">|-- webpack-demo</span><br><span class="line">    |-- .browserslistrc</span><br><span class="line">    |-- .eslintrc.js</span><br><span class="line">    |-- .gitignore</span><br><span class="line">    |-- README.md</span><br><span class="line">    |-- babel.config.js</span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- postcss.config.js</span><br><span class="line">    |-- vue.config.js</span><br><span class="line">    |-- public</span><br><span class="line">    |   |-- favicon.ico</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |-- src</span><br><span class="line">        |-- App.vue</span><br><span class="line">        |-- iview-variables.css</span><br><span class="line">        |-- iview-variables.less</span><br><span class="line">        |-- main.js</span><br><span class="line">        |-- router.js</span><br><span class="line">        |-- store.js</span><br><span class="line">        |-- assets</span><br><span class="line">        |   |-- logo.png</span><br><span class="line">        |-- components</span><br><span class="line">        |   |-- HelloWorld.vue</span><br><span class="line">        |-- plugins</span><br><span class="line">        |   |-- iview.js</span><br><span class="line">        |-- views</span><br><span class="line">            |-- About.vue</span><br><span class="line">            |-- Home.vue</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6~ES10</title>
      <link href="/ES%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
      <url>/ES%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="http://es.xiecheng.live/" target="_blank" rel="noopener">原作者文章ECMAScript2015~2020语法全解析</a></p><h1 id="ECMAScript2015-ES6"><a href="#ECMAScript2015-ES6" class="headerlink" title="ECMAScript2015(ES6)"></a>ECMAScript2015(ES6)</h1><h2 id="新的声明方式"><a href="#新的声明方式" class="headerlink" title="新的声明方式"></a>新的声明方式</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p> <strong>什么是作用域？</strong><br> 几乎所有编程语言就是在变量中存储值，并且能读取和修改此值。事实上，在变量中存储值和取出值的能力，给程序赋予了状态。 如果没有这样的概念，一个程序虽然可以执行一些任务，但是它们将会受到极大的限制而且不会非常有趣。 但是这些变量该存储在哪，又给如何读取？为了完成这个目标，需要制定一些规则，这个规则就是：作用域。</p><p> 常见的作用域主要分为几个类型：全局作用域、函数作用域、块状作用域、动态作用域。</p><table><thead><tr><th>对象</th><th>类型</th></tr></thead><tbody><tr><td>global/window</td><td>全局作用域</td></tr><tr><td>function</td><td>函数作用域（局部作用域）</td></tr><tr><td>{}</td><td>块状作用域</td></tr><tr><td>this</td><td>动态作用域</td></tr></tbody></table><blockquote><p>TIP 如果一个 变量 或者其他表达式不在 “当前的作用域”，那么JavaScript机制会继续沿着作用域链上查找直到全局作用域（global或浏览器中的window）如果找不到将不可被使用。 作用域也可以根据代码层次分层，以便子作用域可以访问父作用域，通常是指沿着链式的作用域链查找，而不能从父作用域引用子作用域中的变量和引用</p></blockquote><ol><li><p>全局作用域<br>变量在函数或者代码块 {} 外定义，即为全局作用域。不过，在函数或者代码块 {} 内未定义的变量也是拥有全局作用域的（不推荐）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> course = <span class="string">"es"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处可调用 course 变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数内可调用 course 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中变量 course 就是在函数外定义的，它是拥有全局作用域的。这个变量可以在任意地方被读取或者修改，当然如果变量在函数内没有声明（没有使用 var 关键字），该变量依然为全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处可调用 course 变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    course = <span class="string">"es"</span></span><br><span class="line">    <span class="comment">// 此处可调用 course 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例中 course 在函数内，但是拥有全局作用域，它将作为 global 或者 window 的属性存在。</p><blockquote><p>注意：在函数内部或代码块中没有定义的变量实际上是作为 window/global 的属性存在，而不是全局变量。换句话说没有使用 var 定义的变量虽然拥有全局作用域，但是它是可以被 delete 的，而全局变量不可以。参考：<a href="https://www.runoob.com/js/js-scope.html" target="_blank" rel="noopener">https://www.runoob.com/js/js-scope.html</a></p></blockquote></li><li><p>函数作用域</p><p>在函数内部定义的变量，就是局部作用域。函数作用域内，对外是封闭的，从外层的作用域无法直接访问函数内部的作用域！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testValue = <span class="string">'inner'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(testValue) <span class="comment">// 报错：ReferenceError: testValue is not defined</span></span><br></pre></td></tr></table></figure><p>如果想读取函数内的变量，必须借助 return 或者闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testValue = <span class="string">'inner'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> testValue + value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>)) <span class="comment">// "innerfun"</span></span><br></pre></td></tr></table></figure><p>这是借助 return 的方式，下面是闭包的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testValue = <span class="string">'inner'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rusult = testValue + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rusult</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> innser()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bar(<span class="string">'fun'</span>)) <span class="comment">// "innerfun"</span></span><br></pre></td></tr></table></figure><p>通俗的讲，return 是函数对外交流的出口，而 return 可以返回的是函数，根据作用域的规则，函数内部的子函数是可以获取函数作用域内的变量的。</p><p>说到这其实大家会想到嵌套函数的作用域问题，如果 inner 函数再嵌套函数呢？这就涉及到另一个概念：作用域链。</p><p><img src="../image/es1.png" alt=""></p><p>仔细观察上图，其实不难理解作用域链是什么，因为你可以按照原型链那样去理解。任何一个作用域链都是一个堆栈，首先先把全局作用域压入栈底，再按照函数的嵌套关系一次压入堆栈。在执行的时候就按照这个作用域链寻找变量。</p></li><li><p>块状作用域<br>在其他编程语言中，块状作用域是很熟悉的概念，但是在JavaScript中不被支持，就像上述知识一样，除了全局作用域就是函数作用域，一直没有自己的块状作用域。在 ES6 中已经改变了这个现象，块状作用域得到普及。关于什么是块，只要认识 <code>{}</code> 就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个代码中， <code>if 后 {}</code> 就是“块”，这个里面的变量就是拥有这个块状作用域，按照规则， <code>{}</code>之外是无法访问这个变量的。</p></li><li><p>动态作用域<br>在 JavaScript 中很多同学对 this 的指向时而清楚时而模糊，其实结合作用域会对 this 有一个清晰的理解。不妨先来看下这段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.bind(&#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;)() <span class="comment">// 2</span></span><br><span class="line">test() <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>在这里 bind 已经把作用域的范围进行了修改指向了 <code>{ a: 2 }</code>，而 this 指向的是当前作用域对象，是不是可以清楚的理解了呢？</p><p>接下来我们再思考另一个问题：作用域是在代码编写的时候就已经决定了呢，还是在代码执行的过程中才决定的？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var course &#x3D; &quot; es&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处可调用 course 变量</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    &#x2F;&#x2F; 函数内可调用 course 变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看看这段代码，写代码的时候就知道 course 就是全局作用域，函数内部的用 var 定义的变量就是函数作用域。这个也就是专业术语：词法作用域。 通俗的讲变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。 相反，只能在执行阶段才能决定变量的作用域，那就是动态作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 3  (不是 2!)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    foo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p>为什么会这样？</p><p>因为当 foo() 不能为 a 解析出一个变量引用时，它不会沿着嵌套的（词法）作用域链向上走一层，而是沿着调用栈向上走，以找到 foo() 是 从何处 被调用的。因为 foo() 是从 bar() 中被调用的，它就会在 bar() 的作用域中检查变量，并且在这里找到持有值 3 的 a。</p><p><strong>推荐阅读</strong></p><ul><li><a href="https://www.kancloud.cn/kancloud/you-dont-know-js-scope-closures/516610" target="_blank" rel="noopener">什么是作用域</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></li><li><a href="https://github.com/creeperyang/blog/issues/16" target="_blank" rel="noopener">深入理解JS中声明提升、作用域（链）和 this 关键字</a></li></ul></li></ol><h3 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h3><p> ES6 新增了let命令，用来声明变量。</p><ol><li><p>let 声明的全局变量不是全局对象window的属性<br>这就意味着，你不可以通过 window. 变量名 的方式访问这些变量，而 var 声明的全局变量是 window 的属性，是可以通过 window. 变量名 的方式访问的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>用let定义变量不允许重复声明<br>这个很容易理解，使用 var 可以重复定义，使用 let 却不可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>如果是 let ，则会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">6</span></span><br><span class="line"><span class="comment">// VM131:1 Uncaught SyntaxError: Identifier 'a' has already been declared</span></span><br><span class="line"><span class="comment">//   at &lt;anonymous&gt;:1:1</span></span><br></pre></td></tr></table></figure></li><li><p>let声明的变量不存在变量提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>上述代码中， a 的调用在声明之前，所以它的值是 undefined，而不是 Uncaught ReferenceError。实际上因为 var 会导致变量提升，上述代码和下面的代码等同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo() <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>而对于 let 而言，变量的调用是不能先于声明的，看如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span></span><br></pre></td></tr></table></figure><p>在这个代码中， a 的调用是在声明之前，因为 let 没有发生变量提升，所有读取 a 的时候，并没有找到，而在调用之后才找到 let 对 a 的定义，所以按照 tc39 的定义会报错。</p></li><li><p>let声明的变量具有暂时性死区<br>只要块级作用域内存在 <code>let</code> 命令，它所声明的变量就绑定在了这个区域，不再受外部的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    a = <span class="number">6</span></span><br><span class="line">    <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span></span><br></pre></td></tr></table></figure><p>上面代码中，存在全局变量 a ，但是块级作用域内 let 又声明了一个局部变量 a ，导致后者绑定这个块级作用域，所以在let声明变量前，对 a 赋值会报错。</p><p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”</p><p>有时“暂时性死区”比较隐蔽，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">b = a, a = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span></span><br></pre></td></tr></table></figure></li><li><p>let 声明的变量拥有块级作用域<br>let实际上为 JavaScript 新增了块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>a 变量是在代码块 {} 中使用 let 定义的，它的作用域是这个代码块内部，外部无法访问。</p><p>我们再看一个项目中很常见的 for 循环:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'循环内:'</span> + i) <span class="comment">// 0、1、2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'循环外:'</span> + i) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果改为 let 会怎么样呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'循环内:'</span> + i) <span class="comment">// 0、1、2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'循环外:'</span> + i) <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>继续看下面两个例子的对比，这时 a 的值又是多少呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p><strong>思考</strong><br>请问 i 的值是多少？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、3、3</span></span><br></pre></td></tr></table></figure><p>答案是3次3。<br>但我希望的值是0、1、2，也就是每次保存住循环时候 i 的值，应该如何做呢？</p><p>方案1：闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案2：使用let</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可以把上面这段代码粘贴到 babel 中：<a href="https://www.babeljs.cn/repl" target="_blank" rel="noopener">https://www.babeljs.cn/repl</a> , 看下经过 babel 转化为的 ES5 代码是什么样子的。</p><p>大家会发现其实 babel 把这段代码转化成了闭包的形式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _loop = <span class="function"><span class="keyword">function</span> <span class="title">_loop</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> i &lt; <span class="number">3</span> i++) &#123;</span><br><span class="line">    _loop(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信通过这个思考题，大家对于 let 关键字的使用会有进一步的理解。</p><blockquote><p>总结<br>使用let声明的变量：</p><ul><li>不属于顶层对象window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul></blockquote><p><strong>推荐阅读</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">内存管理</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener">let</a></li></ul></li></ol><h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p> 不能被改变的叫做常量，请大家思考在 <code>ES5</code> 中如何定义一个常量呢？</p><p> <code>ES5</code> 中可以使用 <code>Object.defineProperty()</code> 来实现定义常量：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'PI'</span>, &#123;</span><br><span class="line">    value: <span class="number">3.14</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(PI)</span><br><span class="line">PI = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(PI)</span><br></pre></td></tr></table></figure><br> const 除了具有 let 的块级作用域和不会变量提升外，还有就是它定义的是常量，在用 const 定义变量后，我们就不能修改它了，对变量的修改会抛出异常。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI)</span><br><span class="line"></span><br><span class="line">PI = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI)</span><br><span class="line"><span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><br> 这个代码块中因为对 PI 尝试修改，导致浏览器报错，这就说明 const 定义的变量是不能被修改的，它是只读的。聪明的同学一定会发现只读属性是不是一定要进行初始化呢？<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI</span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.1415</span></span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意<br>const 声明的变量必须进行初始化，不然会抛出异常 Uncaught SyntaxError: Missing initializer in const declaration。</p></blockquote><p> <strong>重点来喽</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'xiecheng'</span>,</span><br><span class="line">    age: <span class="number">34</span></span><br><span class="line">&#125;</span><br><span class="line">obj.school = <span class="string">'imooc'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="comment">// &#123;name: "xiecheng", age: 34, school: "imooc"&#125;</span></span><br></pre></td></tr></table></figure><br> 大家会发现 const 定义的 obj 竟然被改变了… 这到底是为什么呢？有点懵啊…</p><p> 这时我们就需要了解JS中的变量是如何存储的，见下图：<br> <img src="../image/es2.png" alt=""></p><p> 基本数据类型存储在 栈内存 中，引用数据类型存储在 堆内存 中然后在栈内存中保存 引用地址 。</p><blockquote><p>TIP<br>const 实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</p></blockquote><p> 如何让对象或者数组这种引用数据类型也不被改变呢？<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.freeze(obj)</span><br></pre></td></tr></table></figure></p><blockquote><p>注意<br><code>Object.freeze()</code> 只是浅层冻结，只会对最近一层的对象进行冻结，并不会对深层对象冻结。</p></blockquote><blockquote><p>总结<br>使用const声明的常量：</p><ul><li>不属于顶层对象window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul></blockquote><p> <strong>推荐阅读</strong></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noopener">const</a></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p> 在 ES6 中新增了变量赋值的方式：解构赋值。允许按照一定模式，从数组和对象中提取值，对变量进行赋值。如果对这个概念不了解，我们可以快速展示一个小示例一睹风采：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> b = arr[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> c = arr[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br> 想从数组中找出有意义的项要单独赋值给变量，在 ES6 中就可以这样写了：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>TIP</strong><br>解构赋值重点是在赋值，赋值的元素是要拷贝出来赋值给变量，赋值的元素本身是不会被改变的。</p></blockquote><p> 是不是非常的简洁，在解构赋值里用的最多的就是 Object 和 Array ，我们可以分别来看下两者的解构赋值是如何操作的。</p><h3 id="数组解构赋值"><a href="#数组解构赋值" class="headerlink" title="数组解构赋值"></a>数组解构赋值</h3><p> 上述的小示例已经在描述数组的解构赋值了，可是那只是开始。</p><ul><li><strong>赋值元素可以是任意可遍历的对象</strong><br>赋值的元素不仅是数组，它可以是任意可遍历的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="string">"abc"</span> <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></li><li><strong>左边的变量(测试报错)</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught ReferenceError: Cannot access &#39;user&#39; before initialization</span><br></pre></td></tr></table></figure>被赋值的变量还可以是对象的属性，不局限于单纯的变量。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;</span><br><span class="line">[user.firstName, user.secondName] = <span class="string">'Kobe Bryant'</span>.split(<span class="string">' '</span>) <span class="comment">//split是以' '把字符串分割成了数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.firstName, user.secondName) <span class="comment">// Kobe Bryant</span></span><br></pre></td></tr></table></figure></li><li><strong>循环体</strong><br>解构赋值在循环体中的应用，可以配合 <code>entries</code> 使用。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> user = &#123;</span><br><span class="line">name: <span class="string">'John'</span>,</span><br><span class="line">age: <span class="number">30</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// loop over keys-and-values</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(user)) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>) <span class="comment">// name:John, then age:30</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>当然，对于 <code>map</code> 对象依然适用：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">user.set(<span class="string">'name'</span>, <span class="string">'John'</span>)</span><br><span class="line">user.set(<span class="string">'age'</span>, <span class="string">'30'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> user.entries()) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;value&#125;</span>`</span>) <span class="comment">// name:John, then age:30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>可以跳过赋值元素</strong><br>如果想忽略数组的某个元素对变量进行赋值，可以使用逗号来处理。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// second element is not needed</span></span><br><span class="line"><span class="keyword">let</span> [name, , title] = [<span class="string">'John'</span>, <span class="string">'Jim'</span>, <span class="string">'Sun'</span>, <span class="string">'Moon'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( title ) <span class="comment">// Sun</span></span><br></pre></td></tr></table></figure></li><li><strong>rest 参数</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">"Julius"</span>, <span class="string">"Caesar"</span>, <span class="string">"Consul"</span>, <span class="string">"of the Roman Republic"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name1) <span class="comment">// Julius</span></span><br><span class="line"><span class="built_in">console</span>.log(name2) <span class="comment">// Caesar</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Note that type of `rest` is Array.</span></span><br><span class="line"><span class="built_in">console</span>.log(rest[<span class="number">0</span>]) <span class="comment">// Consul</span></span><br><span class="line"><span class="built_in">console</span>.log(rest[<span class="number">1</span>]) <span class="comment">// of the Roman Republic</span></span><br><span class="line"><span class="built_in">console</span>.log(rest.length) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>我们可以使用 rest 来接受赋值数组的剩余元素，不过要确保这个 rest 参数是放在被赋值变量的最后一个位置上。</p></blockquote></li><li><strong>默认值</strong><br>如果数组的内容少于变量的个数，并不会报错，没有分配到内容的变量会是 undefined。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [firstName, surname] = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstName) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(surname) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure> 当然你也可以给变量赋予默认值，防止 undefined 的情况出现： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default values</span></span><br><span class="line"><span class="keyword">let</span> [name = <span class="string">"Guest"</span>, surname = <span class="string">"Anonymous"</span>] = [<span class="string">"Julius"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name)    <span class="comment">// Julius (from array)</span></span><br><span class="line"><span class="built_in">console</span>.log(surname) <span class="comment">// Anonymous (default used)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="对象解构赋值"><a href="#对象解构赋值" class="headerlink" title="对象解构赋值"></a>对象解构赋值</h3><ul><li><p><strong>基本用法</strong><br>解构赋值除了可以应用在 <code>Array</code>，也可以应用在 <code>Object</code>。基本的语法如下：</p><blockquote><p>let {var1, var2} = {var1:…, var2…}<br> 大致的意思是我们有一个 Object 想把里面的属性分别拿出来而无需通过调用属性的方式赋值给指定的变量。具体的做法是在赋值的左侧声明一个和 Object 结构等同的模板，然后把关心属性的 value 指定为新的变量即可。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">title: <span class="string">"Menu"</span>,</span><br><span class="line">width: <span class="number">100</span>,</span><br><span class="line">height: <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;title, width, height&#125; = options</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(title)  <span class="comment">// Menu</span></span><br><span class="line"><span class="built_in">console</span>.log(width)  <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(height) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><p><strong>TIP</strong><br>在这个结构赋值的过程中，左侧的“模板”结构要与右侧的 Object 一致，但是属性的顺序无需一致。</p></blockquote><p> 上述的赋值左侧是采用了对象简写的方式，类似于：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">title</span>: title, <span class="attr">width</span>: width, <span class="attr">height</span>: height&#125; = options</span><br></pre></td></tr></table></figure><p> 如果不想这么写或者想使用其他的变量名，可以自定义的，如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">width</span>: w, <span class="attr">height</span>: h, title&#125; = options</span><br></pre></td></tr></table></figure></li><li><p><strong>默认值</strong><br>  当然，这个赋值的过程中也是可以指定默认值的，这样做：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> options = &#123;</span><br><span class="line">title: <span class="string">"Menu"</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;width = <span class="number">100</span>, height = <span class="number">200</span>, title&#125; = options</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(title)  <span class="comment">// Menu</span></span><br><span class="line"><span class="built_in">console</span>.log(width)  <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(height) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure></li><li><p><strong>rest 运算符</strong><br>如果我们想象操作数组一样，只关心指定的属性，其他可以暂存到一个变量下，这就要用到 rest 运算符了</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">title: <span class="string">"Menu"</span>,</span><br><span class="line">height: <span class="number">200</span>,</span><br><span class="line">width: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;title, ...rest&#125; = options</span><br><span class="line"></span><br><span class="line"><span class="comment">// now title="Menu", rest=&#123;height: 200, width: 100&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(rest.height)  <span class="comment">// 200</span></span><br><span class="line"><span class="built_in">console</span>.log(rest.width)   <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li><li><p><strong>嵌套对象</strong><br>如果一个 Array 或者 Object 比较复杂，它嵌套了 Array 或者 Object，那只要被赋值的结构和右侧赋值的元素一致就好了。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">size: &#123;</span><br><span class="line">width: <span class="number">100</span>,</span><br><span class="line">height: <span class="number">200</span></span><br><span class="line">&#125;,</span><br><span class="line">items: [<span class="string">"Cake"</span>, <span class="string">"Donut"</span>],</span><br><span class="line">extra: <span class="literal">true</span>    <span class="comment">// something extra that we will not destruct</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// destructuring assignment on multiple lines for clarity</span></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">size: &#123; <span class="comment">// put size here</span></span><br><span class="line">width,</span><br><span class="line">height</span><br><span class="line">&#125;,</span><br><span class="line">items: [item1, item2], <span class="comment">// assign items here</span></span><br><span class="line">title = <span class="string">'Menu'</span> <span class="comment">// not present in the object (default value is used)</span></span><br><span class="line">&#125; = options</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(title)  <span class="comment">// Menu</span></span><br><span class="line"><span class="built_in">console</span>.log(width)  <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(height) <span class="comment">// 200</span></span><br><span class="line"><span class="built_in">console</span>.log(item1)  <span class="comment">// Cake</span></span><br><span class="line"><span class="built_in">console</span>.log(item2)  <span class="comment">// Donut</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串解构赋值"><a href="#字符串解构赋值" class="headerlink" title="字符串解构赋值"></a><strong>字符串解构赋值</strong></h3><p> 可以当做是数组的解构:<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'imooc'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = str</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c, d, e)</span><br></pre></td></tr></table></figure><br> <strong>思考</strong></p><ol><li>有时候我们写一个函数需要传入很多参数，而且很多参数是可选的，是否可以利用解构赋值来简化操作呢？</li><li>如何在业务开发中对接口数据进行解构赋值呢？</li></ol><p> <strong>推荐阅读</strong></p><ul><li><a href="https://www.sitepoint.com/es6-destructuring-assignment/" target="_blank" rel="noopener">Destructuring Assignment</a></li><li><a href="https://ponyfoo.com/articles/es6-destructuring-in-depth" target="_blank" rel="noopener">ES6 JavaScript Destructuring in Depth</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">解构赋值</a></li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="ES5-中数组遍历方式"><a href="#ES5-中数组遍历方式" class="headerlink" title="ES5 中数组遍历方式"></a>ES5 中数组遍历方式</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p> <strong>for循环</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 后来语法有所升级，到 <code>ES5</code> 遍历数组的 <code>API</code> 多了起来，其中有 <code>forEach</code>、<code>every</code>、<code>filter</code>等，同样的功能可以用 <code>forEach</code> 、 <code>map</code> 、 <code>every</code> 等方法来实现。</p><p> <strong>forEach() 没有返回值，只是针对每个元素调用func</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elem, index, array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (arr[i] == <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(elem, index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br> 这个语法看起来要简洁很多，不需要通过索引去访问数组项，然而它的缺点也是很明显，不支持 break、continue 等。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i === <span class="number">2</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br> 这段代码的”本意”是从第一个元素开始遍历，遇到数组项 2 之后就结束遍历，不然打印出所遍历过的数值项。可是，事实让你大跌眼镜，因为它的输出是 1, 3, 4, 5。</p><blockquote><p>注意<br><code>forEach</code> 的代码块中不能使用 <code>break</code>、<code>continue</code>，它会抛出异常。</p></blockquote><p> <strong>map() 返回新的数组，每个元素为调用func的结果</strong><br>  return的值会返回一个新数组<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> result = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   value += <span class="number">1</span></span><br><span class="line">   <span class="built_in">console</span>.log(value)</span><br><span class="line">   <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, result)</span><br></pre></td></tr></table></figure></p><p> <strong>filter() 返回符合func条件的元素数组</strong><br>  筛选符合条件的值，返回新的数组<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value)</span><br><span class="line">   <span class="keyword">return</span> value == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, result)</span><br></pre></td></tr></table></figure></p><p> <strong>some() 返回boolean，判断是否有元素符合func条件</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value)</span><br><span class="line">   <span class="keyword">return</span> value == <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, result)</span><br></pre></td></tr></table></figure></p><p> <strong>every() 返回boolean，判断每个元素都符合func条件</strong><br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value)</span><br><span class="line">   <span class="keyword">return</span> value == <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, result)</span><br></pre></td></tr></table></figure><br> 同样完成刚才的目标，使用 <code>every</code> 遍历就可以做到 <code>break</code> 那样的效果，简单的说 <code>return false</code> 等同于 <code>break</code>，<code>return true</code> 等同于 <code>continue</code>。如果不写，默认是 <code>return false</code>。</p><blockquote><p><strong>注意</strong><br><code>every</code> 的代码块中不能使用 <code>break</code>、<code>continue</code>，它会抛出异常。</p></blockquote><p> <strong>reduce() 接收一个函数作为累加器</strong><br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure><br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev, cur)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure><br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">   prev.indexOf(cur) == <span class="number">-1</span> &amp;&amp; prev.push(cur)</span><br><span class="line">   <span class="keyword">return</span> prev</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br></pre></td></tr></table></figure></p><p> 有的同学会说，还有 <code>for...in</code> 可以遍历数组。<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> array) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(array[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 说的没错，<code>for...in</code> 确实可以遍历数组，而且还支持 <code>continue</code>、<code>break</code>等功能，但是它真的没有瑕疵吗？如果 <code>array</code> 有自定义属性，你发现也会被遍历出来(显然不合理)。这是因为 <code>for...in</code> 是为遍历对象创造的<code>（{a:1, b:2}）</code>，不是为数组设计的。</p><blockquote><p>注意<br>for…in不能用于遍历数组。<br>for…in代码块中不能有 return，不然会抛出异常。</p></blockquote><h3 id="ES6-中数组遍历方式-for…of"><a href="#ES6-中数组遍历方式-for…of" class="headerlink" title="ES6 中数组遍历方式 for…of"></a>ES6 中数组遍历方式 for…of</h3><p> 接下来就要步入正题，说说我们今天的主角：<code>for...of</code>。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><br> 上述代码中轻松实现了数组的遍历，乍一看没有绝对它有非常强大之处。我们不得不强调下，<code>for...of</code>的来历和作用。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 看下这个伪代码，<code>of</code> 后面是 <code>iterable</code> 既不是 <code>for</code> 循环规定的 <code>array</code>，也不是 <code>for...in</code> 规定的 <code>Object</code>，而是 <code>iterable</code>。如果查查 <code>iterable</code> 的含义就很直观的感受到 <code>for...of</code> 遍历的是一切可遍历的元素（数组、对象、集合）等，不要小瞧这个功能，因为在 <code>ES6</code> 中允许开发者自定义遍历，换句话说任何数据结构都可以自定义一个遍历，这个遍历是不能被 <code>for</code>、<code>for...in</code> 理解和实现的。很抽象吧？<code>Iterator</code> 是如何实现的这是ES6的新增语法，后面课程中 <code>Iterator</code> 一节会讲。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>TIP</strong><br>for…of是支持 break、continue、return的，所以在功能上非常贴近原生的 for。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4</title>
      <link href="/webpack4/"/>
      <url>/webpack4/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h1><p>  <strong>webpack是模块打包工具</strong>，它可以打包<code>ES6</code>的模块引入方式、<code>CommonJS</code>模块引入方式、<code>CMD</code>、<code>AMD</code>, 通俗的说<code>webpack</code>就是把多个文件打包成一个文件的工具，他并不能称为代码解析工具，高级语法webpack自身不识别，它只是一个模块打包工具。随着<code>webpack</code>的发展，<code>webapck</code>不仅能打包<code>js文件</code>了，通过loader，也可以打包<code>css样式</code>，<code>图片</code>等</p><h1 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h1><p>  在原来的模式中，在<code>index.html</code>中，我们需要引入多个<code>js文件</code>，并且要考虑<code>js文件</code>的先后顺序，这使得我们项目难以维护，同时加大了浏览器负载。通过<code>wenpack</code>进行打包构建，我们的只用在<code>index.hmtl</code>中引入一个<code>js文件</code>，帮助我们很好的解决了上面的问题，更加适合于大型项目的应用。</p><h1 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h1><ol><li>全局安装<ul><li>我们并不推荐全局安装<code>webpack</code>，这会是我们对<code>webpack</code>的使用具有局限性，我们在不同的项目中需要使用不同版本的<code>webpack</code>，如果全局安装了webpack，这会对项目造成麻烦<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure></li></ul></li><li>局部安装<ul><li>推荐方案<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure></li></ul></li><li>npx<br>在项目中执行命令，优先会到全局查找执行命令，如果全局没有这个命令，就会报错，不会执行局部命令， 这时候我们可以在要执行的命令前面<code>加上npx</code>，就可以解决问题。</li><li><code>npm info webpack</code> 查看<code>webpack</code>所有版本</li><li><strong>package.json</strong> 文件中的 <code>script</code><ul><li>在script可以配置npm的执行命令，这个命令查找是局部命令。以后可以通过npm run 自己设置的名称 就可以执行 命令了。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "bundle" : "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h1><ol><li>webpack.config.js 是webpack默认的执行文件，执行webapck命令的时候，webpack会首先到这个配置文件查看如何进行打包构建。</li><li>在webpack.config.js可以进行webpack的配置</li><li>修改配置文件名字为webpackconfig.js，执行配置文件可以如下执行：<ul><li>我们不建议修改webpack.config.js文件名字吗，修改后每次执行都要执行下面的代码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config webpackconfig.js</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="entry与output"><a href="#entry与output" class="headerlink" title="entry与output"></a>entry与output</h1><ol><li><p><code>entry</code>设置打包文件的入口文件，不需要绝对路径，<code>output</code>设置打包文件的路径和文件名，默认是<code>dist/main.js</code>，需要绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'bundle'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当需要打包多个js文件时</p><ul><li><code>entry: &#39;./src/index.js&#39;</code> 是<code>entry: {main: &#39;./src/index.js&#39;}</code>的简写形式</li><li><code>entry: {main: &#39;./src/index.js&#39;}</code> 这句语句表达了main是打包后的文件名（output设置了filename以output为准）和要打包的文件路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: <span class="string">'./src/index.js'</span>,</span><br><span class="line">      sub: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">      filename: <span class="string">"[name].js"</span>, <span class="comment">//以entry对象的键作为文件名</span></span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>output</code>中<code>publicPath</code>属性</p><ul><li>作用：使<code>index.html</code>引入打包文件前添加一串<code>url地址</code></li><li>多用于<code>index.html</code>引用布置到<code>cdn</code>上打包好的文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.wormnimaya.top/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>output中<code>chunkFilename</code>属性<br><strong>此选项确定非输入块文件的名称</strong></p><p>请注意，这些文件名需要在运行时生成，以发送对块的请求。因此，需要使用webpack运行时添加<code>[name]</code>和<code>[chunkhash]</code>之类的占位符从块ID到占位符值的映射到输出包。这会增加大小，并且当任何块的占位符值更改时，捆绑包可能会失效。</p><p>默认情况下，使用<code>[id] .js</code>或从<code>output.filename</code>推断出的值（<code>[name]</code>替换为<code>[id]</code>。）。</p><ul><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">      publicPath: <span class="string">"http://www.wormnimaya.top"</span>,</span><br><span class="line">      filename: <span class="string">"[name].js"</span>, <span class="comment">//以entry对象的键作为文件名</span></span><br><span class="line">      chunkFilename: <span class="string">'[id].js'</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h1><p> 这个属性是设置webpack在那种环境下运行：</p><ul><li>production 生产环境下运行，打包后的代码不会进行压缩</li><li>development 开发环境下运行，打包后的代码不会进行压缩<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mode: &#39;production&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><h2 id="loader是什么？"><a href="#loader是什么？" class="headerlink" title="loader是什么？"></a>loader是什么？</h2><p>  由于webapck只能打包js文件，如果我们想打包其他形式地文件，就需要loader地帮助了，例如 图片 字体图标 .vue文件</p><h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><ol><li>作用<br>可以把文件打包到dist目录下，并把url返回到被打包文件中（主要打包图片和字体，也可以打包其它需要打包到dist目录下，并返回打包后的文件url）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> avator <span class="keyword">from</span> <span class="string">'./1.jpg'</span></span><br><span class="line"><span class="keyword">import</span> txt <span class="keyword">from</span> <span class="string">'./1.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line"><span class="built_in">console</span>.log(txt) <span class="comment">// 7623965e41d1b6998084c5d9f81bc947.txt</span></span><br><span class="line"><span class="built_in">console</span>.log(avator) <span class="comment">// bdfd6987a89acb6742e812ec6110ef33.jpg</span></span><br><span class="line">img.src = avator</span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line">root.append(img)</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure></li><li>配置</li></ol><ul><li>outputPath：设置文件把图片打包到到同一文件中</li><li>name：配置打包后的文件名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[name]_[hash].[ext]'</span>, <span class="comment">// 由原文件名_hash值.原文件格式</span></span><br><span class="line">                    outputPath:<span class="string">'images/'</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><ol><li>作用<br>url-loader能够实现一切file-loader的功能，但是url-loader可以把较小的资源直接打包到main.js文件中，使index.html文件少一次请求，但是当文件过大的时候，打包到main.js文件中会使main.js过大，浏览器请求资源过长，这时候就不适合把资源打包到main.js文件中，url-loader这时候又可以把文件打包到dist目录下。</li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br></pre></td></tr></table></figure></li><li>配置<ul><li>limit: 设置小于这个数字的打包到main.js文件中，大于打包到dist目录下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[name]_[hash].[ext]'</span>,</span><br><span class="line">                    outputPath:<span class="string">'images/'</span>,</span><br><span class="line">                    limit: <span class="number">48333</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="loader处理样式"><a href="#loader处理样式" class="headerlink" title="loader处理样式"></a>loader处理样式</h2><p>  loader使从后往前依次执行</p><h3 id="css-loader和style-loader"><a href="#css-loader和style-loader" class="headerlink" title="css-loader和style-loader"></a>css-loader和style-loader</h3><ol><li>作用<br>css-loader把所有的css文件合并成一个css文件，style-loader把合成好的css文件挂载到index.js文件上</li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br></pre></td></tr></table></figure></li><li>配置<ul><li><code>importLoaders 启用/禁用或设置在</code>CSS<code>加载器之前应用的加载器数目</code>，如果在样式的嵌套的情况下，外层的样式文件从第一个执行，但是内部嵌套的样式文件可能不会从第一个模块执行，而是从外部样式文件解析到的<code>loader</code>进行解析。<code>importLoaders</code>可以规定内部样式文件从外部文件解析到<code>loader</code>前面几个开始解析。</li><li><code>module: true 开启css模块化</code>，不开启<code>css模块化</code>在入口文件引入的样式作用于全局，这样会使子组件的造成样式混乱。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./index.scss'</span></span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = avator</span><br><span class="line">img.classList.add(style.box) <span class="comment">//使用样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">root.append(img)</span><br></pre></td></tr></table></figure><h3 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h3></li></ul></li><li>作用<br>sass-loader的作用使把scss语法转换成css语法</li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-loader sass --save-dev</span><br></pre></td></tr></table></figure></li></ol><h3 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h3><ol><li>作用<br>postcss-loader的作用是给样式添加前缀，使样式兼容所有浏览器</li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure></li><li>创建postcss的配置文件postcss.config.js文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123; </span><br><span class="line">    plugins: [ </span><br><span class="line">        require(&#39;autoprefixer&#39;)(&#123; overrideBrowserslist: [&#39;last 15 versions&#39;] &#125;) </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(css|scss)$/i</span>,</span><br><span class="line">            use: [</span><br><span class="line">                <span class="string">'style-loader'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: <span class="number">2</span>,</span><br><span class="line">                        modules: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'postcss-loader'</span>,</span><br><span class="line">                <span class="string">'sass-loader'</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意<br>postcss-loader必须放在css-loader的后面，如果不放在这个位置，在样式嵌套的时候post-loader将不会生效</p></blockquote></li></ol><h3 id="loader处理字体图标"><a href="#loader处理字体图标" class="headerlink" title="loader处理字体图标"></a>loader处理字体图标</h3><ol><li>字体图标的使用<br>保留下载后的<code>iconfont.css</code>, <code>iconfont.svg</code>, <code>iconfont.eto</code>, <code>iconfont.tff</code>, <code>iconfont.woff</code>, <code>iconfont.woff2</code>等字体文件，把iconfont.css引入项目中，<strong>注意</strong>:<code>iconfont.css</code>需要与其他字体文件同一个文件目录，图标才会起作用，如果<code>iconfont.css</code>与其他字体文件不在同一个文件目录中，请修改<code>iconfont.css</code>文件中字体文件所对应的<code>url地址</code>。</li><li>安装<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>字体图标打包时，css-loader不能打开<code>modules: true</code>,打开后字体图标将不会显示</p></blockquote></li></ol><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><h2 id="plugin是什么？"><a href="#plugin是什么？" class="headerlink" title="plugin是什么？"></a>plugin是什么？</h2><p>  plugin 可以在webpack运行到某个时刻的时候，帮你做一些事情</p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><ol><li><p>作用<br><code>htmlWebpackPlugin</code> 会在打包结束后，自动生成一个html文件，并把打包生成的js自动引入到这个html中</p></li><li><p>安装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ul><li><code>html-webpack-plugin</code>可以用<code>template</code>指定一个模板来生成dist目录下的index.html<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'src/index.html'</span></span><br><span class="line">  &#125;)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>template</strong>  例如:想在生成的index.html中生成一个<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>,就可以指定一个模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="cleanWebpackPlugin"><a href="#cleanWebpackPlugin" class="headerlink" title="cleanWebpackPlugin"></a>cleanWebpackPlugin</h2><ol><li>作用<br><code>cleanWebpackPlugin</code> 会在打包之前删除dist文件下的所有文件，便于webpack从新打包</li><li>安装<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   plugins: [<span class="keyword">new</span> CleanWebpackPlugin()]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h1><ol><li><strong>作用</strong><br><code>sourceMap</code> 它是一个映射关系，他把<code>main.js</code>与<code>src文件</code>下的文件建立对应关系，浏览器报错时通过<code>main.js</code>与<code>src文件</code>下的文件建立对应关系找到对应那个文件的那行代码出错。</li><li>如果你启用了<code>mode: &#39;production&#39;</code>, <code>production</code>中已经帮助你启用<code>sourceMap</code>了</li><li>SourceMap的配置<ul><li>source-map 把对应文件独自打包到dist目录下</li><li>inline-source-map 把对应文件打包到main.js中</li><li><code>cheap-</code>前缀 使对应关系之精确到行不精确那个字母 使对应关系指建立业务代码的对应关系，不关心第三方库</li><li>module 建立业务代码和第三方库都与main.js建立相应关系</li><li>eval 打包速度最快，但是不适合复杂代码 ，把对应文件打包到main.js中  <code>eval(&quot;consola.log(1111)\n\n//# sourceURL=webpack:///./src/index.js?&quot;);</code></li></ul></li><li>推荐SourceMap的配置<ul><li>development环境: <code>cheap-module-eval-source-map</code></li><li>production环境: <code>cheap-module-source-map</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   mode: <span class="string">'development'</span>,</span><br><span class="line">   devtool: <span class="string">'cheap-module-eval-source-map'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="webpackDevServer"><a href="#webpackDevServer" class="headerlink" title="webpackDevServer"></a>webpackDevServer</h1><h2 id="webpack-–watch"><a href="#webpack-–watch" class="headerlink" title="webpack –watch"></a>webpack –watch</h2><p>  这个很简单，直接在package.json中配置如下即可(<strong>但是这里我没有配置出来，不知道为什么运行<code>npm run watch</code>后，修改代码保存就找不到index.html</strong>)<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;watch&quot;: &quot;webpack --watch&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  当运行<code>npm run watch</code>后，只要在源代码中修改代码，webpack就会监听到打包文件发生了变化，它就会重新进行打包。</p><p>  虽然这个方法比我们单纯的用npm run bundle方便很多，但是它还是有很多的不方便：</p><ul><li><p>页面修改时，不能自动更新，还需要人为的手动刷新浏览器</p></li><li><p>不能自动开启一个浏览器</p></li><li><p>不能模拟一些服务器上的东西</p><p>这个时候光光<code>webpack --watch</code>就不行了，我们可以借助<code>webpack-dev-server</code>来帮助我们实现更酷炫的效果。  </p></li></ul><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ul><li>contentBase： 是借助webpack-dev-serve启动一个服务器的根路径</li><li>open： 是否浏览器自动访问服务器的地址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  open: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>package.json</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如果大家有实践的话应该知道，当修改代码的时候，<code>webpack-dev-serve</code>会自动帮我们刷新浏览器，所以使用它可以更方便的提升代码开发的效率。</p><p>好奇的朋友可能会问，问什么需要借助<code>webpack-dev-serve</code>来开启一个服务器呢</p><p>如果我们还像之前一样使用<code>npm run bundle</code>， 以<code>file</code>的形式打开<code>html</code>，这个页面想发<code>ajax</code>请求就不可以了。大家有见过浏览器中有以<code>file</code>开头的浏览器么？所以如果想发<code>ajax</code>请求，就要求<code>html</code>文件必须在一个服务器上，以<code>http</code>的形式打开。</p><p>所以一般像<code>react</code>脚手架工具或者<code>vue</code>脚手架工具都会帮助我们自动开启一个服务器，其实这个服务器就是通过<code>webpack-dev-serve</code>开启的。</p><blockquote><p>这里我想扩充一下，为什么上面说的脚手架工具可以使用接口代理呢，是因为<code>webpack-dev-serve</code>本质上就接受跨域的代理，详细内容请移步<a href="https://www.webpackjs.com/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">devServer-proxy</a></p></blockquote><p><strong>我还想问问大家有没有发现打包生成的文件没有出现在你所指定的文件夹中，这是为什么呢？</strong></p><p>打包生成的文件不会放在dist目录下，而是放在了电脑的内存里面，这样做可以提升打包的速度，让开发速度更快。</p></li></ol><h2 id="自建一个类似webpack-dev-server"><a href="#自建一个类似webpack-dev-server" class="headerlink" title="自建一个类似webpack-dev-server"></a>自建一个类似webpack-dev-server</h2><ol><li>先安装<code>webpack-dev-middleware</code>中间件，这个中间件可以监听文件代码发生了变化，只要发生变化了就会重新打包,安装<code>express</code>, <code>express</code>是<code>node</code>中帮助我们快速搭建服务器的<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express webpack-dev-middleware -D</span><br></pre></td></tr></table></figure></li><li>然后先添加npm脚本， 让我们可以运行服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;server&quot;: &quot;node server.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先在<code>webpack.config.js</code>中的<code>output</code>中添加<code>publicPath</code>，它表示的是所有打包生成的文件之间的引用前面都加一个根路径(<strong>这块的配置不是必须配置</strong>)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  publicPath: <span class="string">'/'</span>,</span><br><span class="line">  filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完成了如上的简单操作后，现在的核心任务是怎样去写这个<code>server.js</code>帮助我们去创建一个服务器<br><strong>server.js</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在node中直接使用webpack</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>)</span><br><span class="line"><span class="comment">// 用webpack结合配置文件,随时进行代码的编译</span></span><br><span class="line"><span class="keyword">const</span> complier = webpack(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要文件发生改变，compiler就会重新运行，重新运行的生成文件对应的打包输出内容的publicPath就是config.output.publicPath</span></span><br><span class="line">app.use(webpackDevMiddleware(complier, &#123;</span><br><span class="line">    publicPath: config.output.publicPath</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>但是大家会发现，当页面发生变化时，我们还是需要自己手动进行刷新，如果想要写出像<code>webpack-dev-serve</code>这样的<code>server</code>服务器的话， 还需要很多的配置项。这其中还是很耗费精力的。</li></ol><h1 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h1><ol><li>作用<br>不刷新页面，只更新修改的代码</li><li>配置<ul><li>不需要安装任何插件，webpack内置的插件就能完成热加载<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">     contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">     open: <span class="literal">true</span>,</span><br><span class="line">     hot: <span class="literal">true</span>, <span class="comment">// 启动热加载</span></span><br><span class="line">     <span class="comment">// hotOnly: true // 样式不生效，页面也不会刷新</span></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">     <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul></li><li>原理<ul><li>当模块中启用了热加载，<code>.number</code>路径下文件改变时，会调用箭头函数</li><li>一般样式文件不用配置这个，因为<code>css-loader</code>已经帮我们配置好了</li><li>但是<code>js</code>文件并没有配置，启动热加载后，<code>js</code>文件不会重新调用，需要利用下面的代码自行调用</li><li>成熟的<code>js</code>框架也已经帮我们配置好了，例如<code>React</code>，<code>Vue</code>等。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./number'</span>,() =&gt; &#123;</span><br><span class="line">    <span class="comment">// 进行相应的操作</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="babel解决ES6版本不兼容浏览器问题"><a href="#babel解决ES6版本不兼容浏览器问题" class="headerlink" title="babel解决ES6版本不兼容浏览器问题"></a>babel解决ES6版本不兼容浏览器问题</h1><p> <strong>在高版本的浏览器已经支持<code>ES6</code>的代码了，但是低版本浏览器却不支持，因此我们还学要配置<code>babel</code></strong></p><h2 id="安装方式一"><a href="#安装方式一" class="headerlink" title="安装方式一"></a>安装方式一</h2><p>  <strong>这种配置方法适合绝大多数情况，但是它会通过全局变量的形式注入，污染全局环境，不适合开发类库、第三方模块和组件库</strong></p><ol><li><p>帮助<code>webpack</code>解析<code>ES6</code>的代码，只是为<code>webpack</code>与<code>babel</code>建议一个桥梁，并不能解析<code>ES6</code>的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> rules: [</span><br><span class="line">  &#123; </span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader: <span class="string">"babel-loader"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>用来解析<code>ES6</code>代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure><p>在项目根目录新建一个文件<code>.babelrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>虽然上面已经把ES6语法解析成ES5语法，但是像promise的语法，ES6无法转换成ES5,需要把这部分语法添加到低版本的浏览器中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel/polyfill</span><br></pre></td></tr></table></figure><p>在入口文件导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;@babel&#x2F;polyfill&quot;;</span><br></pre></td></tr></table></figure><p>配置<code>promise类似语法</code>按需加载,在<code>.babelrc</code>文件中进行配置完后，我们可以去掉页面中的<code>import &quot;@babel/polyfill&quot;;</code>，<code>useBuiltIns</code>帮我们实现了按需的加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We noticed you&#39;re using the &#96;useBuiltIns&#96; option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the &#96;corejs&#96; option.</span><br></pre></td></tr></table></figure><p>解决报错信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save core-js@3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;@babel&#x2F;preset-env&quot;,&#123;</span><br><span class="line">      &quot;useBuiltIns&quot;: &#39;usage&#39;,</span><br><span class="line">      &quot;corejs&quot;: &quot;3.0.0&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些高版本的浏览器已经兼容了<code>ES6</code>, 当我们使用高版本的浏览器的时候就可以不使用<code>babel</code>，在低版本中在使用<code>babel</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;@babel&#x2F;preset-env&quot;,&#123;</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;edge&quot;: &quot;17&quot;,</span><br><span class="line">        &quot;firefox&quot;: &quot;60&quot;,</span><br><span class="line">        &quot;chrome&quot;: &quot;67&quot;,</span><br><span class="line">        &quot;safari&quot;: &quot;11.1&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;useBuiltIns&quot;: &#39;usage&#39;,</span><br><span class="line">      &quot;corejs&quot;: &quot;3.0.0&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装方式二"><a href="#安装方式二" class="headerlink" title="安装方式二"></a>安装方式二</h2><p> <strong>适合开发类库、第三方模块和组件库</strong></p><ol><li>帮助<code>webpack</code>解析<code>ES6</code>的代码，只是为<code>webpack</code>与<code>babel</code>建议一个桥梁，并不能解析<code>ES6</code>的代码<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader @babel/core</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> rules: [</span><br><span class="line">  &#123; </span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    loader: <span class="string">"babel-loader"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel/runtime</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @babel/runtime-corejs2</span><br></pre></td></tr></table></figure></li><li>配置在项目根目录新建一个<code>.babelrc文件</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [&quot;@babel&#x2F;plugin-transform-runtime&quot;,&#123;</span><br><span class="line">      &quot;absoluteRuntime&quot;: false,</span><br><span class="line">      &quot;corejs&quot;: 2,</span><br><span class="line">      &quot;helpers&quot;: true,</span><br><span class="line">      &quot;regenerator&quot;: true,</span><br><span class="line">      &quot;useESModules&quot;: false,</span><br><span class="line">      &quot;version&quot;: &quot;7.0.0-beta.0&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="React代码进行打包"><a href="#React代码进行打包" class="headerlink" title="React代码进行打包"></a>React代码进行打包</h1><ol><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/preset-react</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;@babel&#x2F;preset-react&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h1><p> <code>Tree Shaking</code>支持<code>ES6 import</code>导入</p><ol><li>作用<br>只打包在项目中使用的代码，在项目中定义但是没有被使用的不进行打包</li><li>在<code>development</code>的情况下<br><strong>即使在<code>development</code>配置了<code>Tree Shaking</code>，没有使用的代码也会进行打包，这是因为<code>source-map</code>已经与文件建立了对应，删除代码会造成错误（我有点不明白，<code>development</code>环境下，配置了<code>Tree Shaking</code>，没有使用的代码也会进行打包，为什么还要配置它）</strong><ul><li>在webpack.config.js中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    usedExports: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在package.json中<br><code>sideEffects</code>可以去除某些模块的<code>Tree Shaking</code>，例如在我们配置了<code>Tree Shaking</code>的情况下，有些时候，我们引入样式文件，但是并没有导出对象，<code>Tree Shaking</code>会认为样式文件没有被使用，不会进行打包，这时候我们可以为<code>sideEffects</code>属性添加一个数组，在数组里面添加的文件，不会进行<code>Tree Shaking</code>，如果<code>sideEffects设置为false</code>，代表全部文件进行<code>Tree Shaking</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"sideEffects": false,</span><br><span class="line"><span class="comment">//"sideEffects": ["*.css"],</span></span><br></pre></td></tr></table></figure></li></ul></li><li>在<code>production</code>的情况下<br><strong>在<code>production</code>的情况下,production已经帮我们配置好了<code>Tree Shaking</code>，我们只需要在package.json中加入如下代码，这时候没有使用的代码没有被打包</strong><ul><li>在package.json中<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"sideEffects": false,</span><br><span class="line"><span class="comment">//"sideEffects": [],</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="webpack-config-js的拆分"><a href="#webpack-config-js的拆分" class="headerlink" title="webpack.config.js的拆分"></a>webpack.config.js的拆分</h1><ol><li>在根目录中建<code>build</code>文件夹,里面分别建文件<code>webpack.common.js</code>，<code>webpack.dev.js</code>，<code>webpack.prod.js</code>,公共代码放在<code>webpack.common.js</code>里，开发环境代码放在<code>webpack.dev.js</code>里，生产环境代码放在<code>webpack.prod.js</code>里。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|-- webpack-demo</span><br><span class="line">    |-- .babelrc</span><br><span class="line">    |-- package-lock.json</span><br><span class="line">    |-- package.json</span><br><span class="line">    |-- postcss.config.js</span><br><span class="line">    |-- build</span><br><span class="line">    |   |-- webpack.common.js</span><br><span class="line">    |   |-- webpack.dev.js</span><br><span class="line">    |   |-- webpack.prod.js</span><br><span class="line">    |-- dist</span><br><span class="line">    |   |-- index.html</span><br><span class="line">    |   |-- main.js</span><br><span class="line">    |   |-- main.js.map</span><br><span class="line">    |-- src</span><br><span class="line">        |-- index.html</span><br><span class="line">        |-- index.js</span><br><span class="line">        |-- math.js</span><br></pre></td></tr></table></figure></li><li>安装<code>webpack-merge</code>将模块合并<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D webpack-merge</span><br></pre></td></tr></table></figure></li><li>webpack.common.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">'./src/index.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[name]_[hash].[ext]'</span>,</span><br><span class="line">                    limit: <span class="number">48333</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: <span class="regexp">/\.(css|scss)$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                <span class="string">'style-loader'</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: <span class="number">2</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'postcss-loader'</span>,</span><br><span class="line">                <span class="string">'sass-loader'</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            test: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'file-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'src/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ],</span><br><span class="line">     optimization: &#123;</span><br><span class="line">        usedExports: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>webpack.dev.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"> <span class="keyword">const</span> Webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"> <span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>)</span><br><span class="line"> <span class="keyword">const</span> devConfig = &#123;</span><br><span class="line">     mode: <span class="string">'development'</span>,</span><br><span class="line">     devtool: <span class="string">'cheap-module-eval-source-map'</span>,</span><br><span class="line">     devServer: &#123;</span><br><span class="line">         contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">         open: <span class="literal">true</span>,</span><br><span class="line">         hot: <span class="literal">true</span>,</span><br><span class="line">         hotOnly: <span class="literal">true</span></span><br><span class="line">     &#125;,</span><br><span class="line">     plugins: [</span><br><span class="line">         <span class="keyword">new</span> Webpack.HotModuleReplacementPlugin()</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">module</span>.exports = merge(devConfig, commonConfig)</span><br></pre></td></tr></table></figure></li><li>webpack.prod.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;merge&#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> commonConfig = <span class="built_in">require</span>(<span class="string">'./webpack.common'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prodConfig = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    devtool: <span class="string">'cheap-module-source-map'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(commonConfig, prodConfig)</span><br></pre></td></tr></table></figure></li><li>package.json<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack-dev-server --config ./build/webpack.dev.js",</span><br><span class="line">  "build": "webpack --config ./build/webpack.prod.js"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p><strong>CleanWebpackPlugin文章推荐</strong><br><a href="https://awdr74100.github.io/2020-03-25-webpack-cleanwebpackplugin/" target="_blank" rel="noopener">clean-webpack-plugin 清除構建資料夾</a><br><a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">clean-webpack-plugin</a></p></blockquote></li></ol><h1 id="splitChunksPlugin"><a href="#splitChunksPlugin" class="headerlink" title="splitChunksPlugin"></a>splitChunksPlugin</h1><ol><li>作用<br>进行代码分割，减轻浏览器的压力</li><li><code>webpack</code>中实现代码分割，分为两种方式<ul><li>同步代码： 只需要在<code>webpack.common.js</code>中做<code>optimization</code>的配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;&#125; <span class="comment">// 代表官方的默认配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>异步代码: 异步代码，无需做任何配置，会自动进行代码分割, 在没有配置的情况下自动在dist目录下生成文件.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:"lodash" */</span> <span class="string">'lodash'</span>).then(<span class="function">(<span class="params">&#123;<span class="keyword">default</span>:_&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        element.innerHTML = _.join([<span class="string">'dell'</span>,<span class="string">'lee'</span>],<span class="string">'_'</span>)</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getComponent().then(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>配置<ul><li>chunks: 1.<code>all</code> 同步和异步 2.<code>async</code> 异步 3.<code>initial</code> 同步</li><li>minSize 大于这个数字的进行代码分割，小于这个数字直接打包到<code>main.js</code>中</li><li>minChunks 在不同模块引入的次数，满足次数进行代码分割</li><li>maxSize(不太懂,但是不重要, 基本不用配置这个选项)</li><li>maxAsyncRequests 按需加载时并行请求的最大数量。</li><li>maxInitialRequests 入口点的最大并行请求数。</li><li>automaticNameDelimiter 打包名称的连接符</li><li>cacheGroups 缓冲组把模块缓存在这里，等模块都缓存完，进行分配给两个组进行打包</li><li>priority 优先级 当一个模块同时满足两个组，<code>priority</code>越大，就那个组</li><li>filename 设置代码分割打包后的文件名</li><li>test: <code>/[\\/]node_modules[\\/]/</code> 如果满足<code>node_modules</code>模块就进入这个组，不满足就进入下面的组，通知满足看<code>priority</code>优先级</li><li>reuseExistingChunk 不重复进行打包 例如a模块中嵌套b模块,但是a模块已经打包完成, b模块就无需再打包了, 当用到b模块的时候, 直接到a模块嵌套b模块代码中查找使用即可<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">'all'</span>,</span><br><span class="line">    minSize: <span class="number">30000</span>,</span><br><span class="line">   <span class="comment">// minRemainingSize: 0,</span></span><br><span class="line">    maxSize: <span class="number">0</span>,</span><br><span class="line">    minChunks: <span class="number">1</span>,</span><br><span class="line">    maxAsyncRequests: <span class="number">6</span>,</span><br><span class="line">    maxInitialRequests: <span class="number">4</span>,</span><br><span class="line">    automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      defaultVendors: &#123;</span><br><span class="line">        test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        priority: <span class="number">-10</span>，</span><br><span class="line">        filename: <span class="string">'vender.js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">default</span>: &#123;</span><br><span class="line">        minChunks: <span class="number">2</span>,</span><br><span class="line">        priority: <span class="number">-20</span>,</span><br><span class="line">        reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">        filename: <span class="string">'commom.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>打包时的报错信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: SplitChunksPlugin: You are trying to set a filename for a chunk which is (also) loaded on demand.The runtime can only handle loading of chunks which match the chunkFilename schema. Using a custom filename would fail at runtime. (cache group: vendors)</span><br></pre></td></tr></table></figure><ul><li>产生原因<br>缓存组设置<code>filename</code>时，在<code>chunk</code>项配置为<code>initial</code>时才会生效，因为默认<code>chunk</code>为<code>all</code>，所以这里会报错，如果要提取的模块初始就加载，可以设置<code>chunk</code>为<code>inital</code>，这样就可以自定义<code>filename</code>了</li><li>解决办法: <code>将filenam改成 name:&#39;vendors&#39;</code></li></ul></li></ol><blockquote><p><strong>splitChunksPlugin心得</strong><br>默认<code>splitChunksPlugin</code>会把<code>node_modules</code>模块的代码打包一个文件中, 超过minSize不管是<code>异步或同步的逻辑代码</code>都会打包到分割到一个文件中，尽管是异步分割也会把引入的<code>node_modules</code>打包到<code>node_modules</code>模块中。<br><strong>总结</strong>: 就是把<code>node_modules</code>打包到<code>node_modules</code>模块中，逻辑代码打包到逻辑代码中。</p></blockquote><h1 id="打包分析"><a href="#打包分析" class="headerlink" title="打包分析"></a>打包分析</h1><p> <a href="https://github.com/webpack/analyse" target="_blank" rel="noopener">官方打包分析文档</a></p><ol><li>配置package.json后，重新打包根目录会生成stats.json文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;webpack --profile --json &gt; stats.json --config .&#x2F;build&#x2F;webpack.dev.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把stats.json文件上传到<a href="http://webpack.github.io/analyse/" target="_blank" rel="noopener">http://webpack.github.io/analyse/</a> 进行分析</li><li><a href="https://webpack.js.org/guides/code-splitting/#bundle-analysis" target="_blank" rel="noopener">官方更多打包分析方案</a></li></ol><h1 id="Prefetching-Preloading-modules-预取-预加载模块"><a href="#Prefetching-Preloading-modules-预取-预加载模块" class="headerlink" title="Prefetching/Preloading modules(预取/预加载模块)"></a>Prefetching/Preloading modules(预取/预加载模块)</h1><ol><li><p>在导入时使用这些内联指​​令可以使<code>webpack</code>输出“ 资源提示”，告诉浏览器进行如何操作：</p><ul><li>prefetch: 将来可能需要一些导航资源</li><li>preload: 当前导航期间可能需要资源</li></ul></li><li><p>预取/预加载模块区别</p><ul><li>预加载的块开始并行于父块加载。父块完成加载后，预取的块开始。(资源请求)</li><li>预加载的块具有中等优先级，可以立即下载。浏览器空闲时，将下载预提取的块。(资源下载)</li><li>父块应立即请求预加载的块。预取的块可以在将来的任何时候使用。(资源使用)</li><li>浏览器支持不同。</li></ul></li><li><p>prefetch<br>简单的预取示例可以包含一个<code>HomePage</code>组件，该组件呈现一个<code>LoginButton</code>组件，然后按需在单击后加载<code>LoginModal</code>组件。</p><p><strong>LoginButton.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">'LoginModal'</span>);</span><br></pre></td></tr></table></figure><p>这将导致<code>&lt;link rel =“ prefetch” href =“ login-modal-chunk.js”&gt;</code>附加在页面顶部，这将指示浏览器在空闲时间预取<code>login-modal-chunk.js</code>文件。</p><blockquote><p>一旦父块被加载，webpack将添加预取提示。</p></blockquote></li><li><p>preload<br>一个简单的预加载示例可以是一个组件，该组件始终依赖于应放在单独块中的大库。</p><p>让我们想象一个需要巨大<code>ChartingLibrary</code>的组件<code>ChartComponent</code>。呈现时将显示<code>LoadingIndicator</code>，并立即按需导入<code>ChartingLibrary</code>：<br><strong>ChartComponent.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPreload: true */</span> <span class="string">'ChartingLibrary'</span>);</span><br></pre></td></tr></table></figure><p>当请求使用<code>ChartComponent</code>的页面时，还会通过<code>&lt;link rel =“ preload”&gt;</code>请求<code>charting-library-chunk</code>。假设页面块较小并且完成得更快，该页面将显示有<code>LoadingIndicator</code>，直到已经请求的制图库块完成为止。<strong>这将增加一点加载时间，因为它只需要一个往返，而不是两个。特别是在高延迟环境中。</strong></p></li></ol><h1 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h1><p> 该插件将CSS提取到单独的文件中。它为每个包含CSS的JS文件创建一个CSS文件。它支持CSS和SourceMap的按需加载。</p><ol><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure></li><li>配置<ul><li>MiniCssExtractPlugin可以配置<code>filename</code>, <code>chunkFilename</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'[name].css'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.css'</span></span><br><span class="line">  &#125;)],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<br>如果配置了 <code>Tree Shaking</code>, <code>sideEffects</code>需要配置<code>&quot;sideEffects&quot;: [&quot;*.css&quot;]</code>,<code>MiniCssExtractPlugin.loader</code>不要用<code>&#39; &#39;</code>包裹</p></blockquote></li></ul></li></ol><h1 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h1><p> <strong>在生产环境中压缩代码</strong></p><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin terser-webpack-plugin</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TerserJSPlugin = <span class="built_in">require</span>(<span class="string">'terser-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> TerserJSPlugin(&#123;&#125;), <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'[name].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'[id].css'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="caching-浏览器缓存"><a href="#caching-浏览器缓存" class="headerlink" title="caching(浏览器缓存)"></a>caching(浏览器缓存)</h1><p>当浏览器加载过一次文件后，就会缓存起来，下一次请求文件的时候直接加载，但是每次文件名称都一样，即使你修改了代码，浏览器通过名称辨识，修改过的文件与缓存的文件名称一致，直接引用缓存文件，即使我们修改了代码，也不能够得到及时的更新，这时候我们可以借助<code>[contenthash]</code>来解决问题，他会在打包的时候在尾部加一段字符，代码不变时，字符也不变，代码改变时，字符也随之改变，从而解决了浏览器缓存问题。</p></li><li><p>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">"[name].[contenthash].js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">    chunkFilename: <span class="string">'[name].[contenthash].js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br><code>[contenthash]</code>与<code>webpack.HotModuleReplacementPlugin()</code>有冲突，两者都要使用的话，<strong>您可以根据环境进行不同的配置</strong>。</p></blockquote></li></ol><h1 id="Shimming"><a href="#Shimming" class="headerlink" title="Shimming"></a>Shimming</h1><ol><li>在<code>node_modules</code>中的第三方包中，我们不能直接在包中直接添加，可以用下面的方法在第三方库引入变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">     $: <span class="string">'jquery'</span>,</span><br><span class="line">   &#125;),</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li><li>修改模块的this指向，本身this指向自己的模块<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imports-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">   &#123;</span><br><span class="line">      test: <span class="built_in">require</span>.resolve(<span class="string">'./src/index.js'</span>),</span><br><span class="line">      use: <span class="string">'imports-loader?this=&gt;window'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>报错(没有解决)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ValidationError: Invalid options object. Imports Loader has been initialized using an options object that does not match the API schema.</span><br><span class="line">- options should be one of these:</span><br><span class="line">  object &#123; imports, … &#125; | object &#123; wrapper, … &#125; | object &#123; additionalCode, … &#125;</span><br><span class="line">  Details:</span><br><span class="line">   * options has an unknown property 'this'. These properties are valid:</span><br><span class="line">     object &#123; imports, … &#125; | object &#123; wrapper, … &#125; | object &#123; additionalCode, … &#125;</span><br><span class="line">   * options misses the property 'imports' | should be any non-object.</span><br><span class="line">   * options misses the property 'wrapper' | should be any non-object.</span><br><span class="line">   * options misses the property 'additionalCode' | should be any non-object.</span><br></pre></td></tr></table></figure></li></ol><h1 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h1><h2 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h2><p>  <strong>创建别名以更轻松地导入或需要某些模块。</strong></p><p>  <strong>webpack.config.js</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    Utilities: path.resolve(__dirname, <span class="string">'src/utilities/'</span>),</span><br><span class="line">    Templates: path.resolve(__dirname, <span class="string">'src/templates/'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  现在，不要像这样在导入时使用相对路径：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utility <span class="keyword">from</span> <span class="string">'../../utilities/utility'</span>;</span><br></pre></td></tr></table></figure></p><p>  您可以使用别名：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Utility <span class="keyword">from</span> <span class="string">'Utilities/utility'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h2><p> <strong>可以让我们引入文件的时候不添加后缀，尝试按数组中的顺序解析这些扩展</strong></p><blockquote><p>如果多个文件共享相同的名称，但具有不同的扩展名，则webpack将解析该扩展名列在数组中首位的文件，并跳过其余文件。</p></blockquote><p> <strong>webpack.config.js</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.wasm'</span>, <span class="string">'.mjs'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>  使用户在导入时不用扩展名：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> File <span class="keyword">from</span> <span class="string">'../path/file'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="resolve-mainFiles"><a href="#resolve-mainFiles" class="headerlink" title="resolve.mainFiles"></a>resolve.mainFiles</h2><p> <strong>解析目录时默认导出的文件, 按数组的顺序依次解析</strong></p><p> <strong>webpack.config.js</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    mainFiles: [<span class="string">'index'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：<br> <code>mainFiles: [&#39;index&#39;]</code>中必须配置<code>index</code>，否则会报错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>viewport</title>
      <link href="/viewport/"/>
      <url>/viewport/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/7ef03682016d" target="_blank" rel="noopener">文章转自</a></p><h1 id="为什么要使用viewport"><a href="#为什么要使用viewport" class="headerlink" title="为什么要使用viewport"></a>为什么要使用viewport</h1><p>手机有不同的分辨率，不同的屏幕大小，如何使我们开发应用或页面大小适合各种高低端手机的使用？学习html5的  viewport技术能够帮助我们实现这一点；</p><h1 id="viewport是什么？"><a href="#viewport是什么？" class="headerlink" title="viewport是什么？"></a>viewport是什么？</h1><p>首先来介绍一下，什么是viewport技术：viewport技术就是适配屏幕像素密度的技术；在css中，1px单位在像素密度越大的设备上表现的实际尺寸就越小。为了保证尺寸不失真，一般会在屏幕密度可选性较多的移动设备中来使用viewport技术，让同一套样式在不同密度设备中表现一致。</p><h1 id="viewport的使用"><a href="#viewport的使用" class="headerlink" title="viewport的使用"></a>viewport的使用</h1><p>viewport技术需要使用元信息标签来实现；</p><p>说了这么多，下面直接上代码，可以将下面代码写入一个html页面中，将代码运行在移动端来进行测试：</p><ol><li><p>一般，页面准许用户缩放时，使用以下设置，在移动端两手指捏合触发的事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width,</span></span></span><br><span class="line"><span class="tag"><span class="string">      maximum-scale=10,</span></span></span><br><span class="line"><span class="tag"><span class="string">      initial-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">      minimum-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">      user-scalable=yes"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不准许用户缩放页面，使用以下设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">"width=device-width,</span></span></span><br><span class="line"><span class="tag"><span class="string">      maximum-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">      minimum-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">      initial-scale=1,</span></span></span><br><span class="line"><span class="tag"><span class="string">      user-scalable=no"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="属性的含义以及该如何设置"><a href="#属性的含义以及该如何设置" class="headerlink" title="属性的含义以及该如何设置"></a>属性的含义以及该如何设置</h1><ul><li>width:设置的是展示页面的视口（viewport）的宽度，一般不需要指定数值，让浏览器根据设备的实际宽度设置为自己的宽度即可；</li><li>maximum-scale:设置页面的放大倍数，取值范围：0.25——10.0；一般取值为：5、8、10；</li><li>initial-scale:初始化页面放大倍率，取值范围：0.25——10.0；一般取值为：1；</li><li>minimum-scale:设置页面的缩小倍数，取值范围：0.25——10.0，一般取值和initial-scale一致；<br>（以上三个属性互相配合使用，initial==mini&lt;=max）；</li><li>user-scalable:设置用户是否可以缩放页面：默认：yes(1)；或者no（0）；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目部署宝塔面板</title>
      <link href="/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
      <url>/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.jianshu.com/p/c1e55dbe6d8d" target="_blank" rel="noopener">文章转自</a></p><h2 id="部署第1步"><a href="#部署第1步" class="headerlink" title="部署第1步"></a>部署第1步</h2><p> <code>yarn build / npm run build</code>打包你的vue项目</p><h2 id="部署第2步"><a href="#部署第2步" class="headerlink" title="部署第2步"></a>部署第2步</h2><ol><li><strong>配置<code>nginx</code>代理 这里先介绍宝塔，可以一步安装<code>nginx</code>环境，操作粗暴！</strong><br><img src="../image/nginx.png" alt=""><br><img src="../image/nginx1.png" alt=""></li><li><strong>点击根目录 把打包的代码上传</strong></li></ol><h2 id="部署第3步"><a href="#部署第3步" class="headerlink" title="部署第3步"></a>部署第3步</h2><p>  <strong>配置nginx代理</strong><br>  <img src="../image/nginx2.png" alt=""></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~&#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_pass   http:&#x2F;&#x2F;39.108.48.226:7001&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.config.js配置</title>
      <link href="/vue-config-js%E9%85%8D%E7%BD%AE/"/>
      <url>/vue-config-js%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h1><p>  <a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">官方文档</a></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer:&#123;</span><br><span class="line">    host:<span class="string">'localhost'</span>,</span><br><span class="line">    port:<span class="number">8080</span>,</span><br><span class="line">    proxy:&#123;</span><br><span class="line">      <span class="string">'/api'</span>:&#123;</span><br><span class="line">        target:<span class="string">'http://mall-pre.springboot.cn'</span>,</span><br><span class="line">        changeOrigin:<span class="literal">true</span>,</span><br><span class="line">        pathRewrite:&#123;</span><br><span class="line">          <span class="string">'/api'</span>:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  publicPath:<span class="string">'/app'</span>, <span class="comment">// 给项目添加子目录</span></span><br><span class="line">  outputDir:<span class="string">'dist'</span>, <span class="comment">// 打包到指定文件夹</span></span><br><span class="line">  indexPath:<span class="string">'index2.html'</span>, <span class="comment">// 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径</span></span><br><span class="line">  lintOnSave:<span class="literal">false</span>, <span class="comment">// 是否关闭eslint</span></span><br><span class="line">  productionSourceMap:<span class="literal">true</span>, <span class="comment">// 如果你不需要生产环境的源代码映像，可以将 其设置为 false 以加速生产环境构建</span></span><br><span class="line">  chainWebpack:<span class="function">(<span class="params">config</span>)=&gt;</span>&#123; <span class="comment">// 删除懒加载</span></span><br><span class="line">    config.plugins.delete(<span class="string">'prefetch'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router的懒加载</title>
      <link href="/vue-router%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/vue-router%E7%9A%84%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router的懒加载"><a href="#vue-router的懒加载" class="headerlink" title="vue-router的懒加载"></a>vue-router的懒加载</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>  安装babel的<code>syntax-dynamic-import</code>插件<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-syntax-dynamic-import</span><br></pre></td></tr></table></figure><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./pages/login.vue'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./pages/login.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="删除预加载"><a href="#删除预加载" class="headerlink" title="删除预加载"></a>删除预加载</h1><h2 id="什么路由的预加载"><a href="#什么路由的预加载" class="headerlink" title="什么路由的预加载"></a>什么路由的预加载</h2><p>  当我们浏览器闲置的时候，会把组件加载过来，等待使用组件的时候进行引用<br>  <img src="../image/router1.png" alt=""></p><h2 id="删除预加载-1"><a href="#删除预加载-1" class="headerlink" title="删除预加载"></a>删除预加载</h2><ol><li>为什么要删除预加载<br>因为有些浏览器支持预加载，但是有些老版本的浏览器不支持，就会把所有的组件加载回来，造成消耗带宽，删除预加载后，真正的需要那个组件，就向服务器请求那个组件</li><li>在项目的根目录新建一个vue.config.js文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack:<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    config.plugins.delete(<span class="string">'prefetch'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript</title>
      <link href="/javaScript/"/>
      <url>/javaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ul><li><code>var</code> 的声明是在window上进行挂在</li><li>只含有函数作用域，不含有块级作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不为变量赋值，输出的是undefined</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明和赋值分两行进行</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line">a = <span class="number">6</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明和赋值分一行进行</span></span><br><span class="line"><span class="keyword">var</span> age  = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age = <span class="number">81</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p> 使用<code>var</code>关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），但是如果声明变量时不使用<code>var</code>关键字，则变量不会被声明提前<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述代码相当于</span></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p> 在ES6提出了let关键字，let是为了解决var中不合理的地方提出的</p><ol><li>let 声明的全局变量不是全局对象window的属性<br>这就意味着，你不可以通过 window. 变量名 的方式访问这些变量，而 var 声明的全局变量是 window 的属性，是可以通过 window. 变量名 的方式访问的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 5</span><br><span class="line">console.log(window.a) &#x2F;&#x2F; 5</span><br><span class="line"></span><br><span class="line">let a &#x3D; 5</span><br><span class="line">console.log(window.a) &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure></li><li>用let定义变量不允许重复声明<br>这个很容易理解，使用 var 可以重复定义，使用 let 却不可以。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Uncaught SyntaxError: Identifier 'a' has already been declared</span></span><br></pre></td></tr></table></figure></li><li>let声明的变量不存在变量提升<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span> <span class="comment">// Uncaught ReferenceError: Cannot access 'a' before initialization</span></span><br></pre></td></tr></table></figure></li><li>let声明的变量具有暂时性死区<br>只要块级作用域内存在 let 命令，它所声明的变量就绑定在了这个区域，不再受外部的影响。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> a  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>let 声明的变量拥有块级作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p> 不能被改变的叫做常量, 具有let的一切特性<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">'xiaoming'</span></span><br><span class="line">username = <span class="string">'wang'</span> <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></p><h1 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ol><li><p>数字型进制<br>最常见的进制有二进制、八进制、十进制、十六进制, 现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0, 0x 后边跟的是相应的进制，输出的是十进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.八进制数字序列范围：0~7</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">010</span>;   <span class="comment">// 对应十进制的8</span></span><br><span class="line">   <span class="comment">// 对应十进制的8</span></span><br><span class="line">  <span class="comment">// 2.十六进制数字序列范围：0~9以及A~F</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0xA</span>;   <span class="comment">// 对应十进制的10</span></span><br></pre></td></tr></table></figure></li><li><p>数字型范围<br>JavaScript中数值的最大和最小值</p><ul><li>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li><li>最小值：Number.MIN_VALUE，这个值为：5e-32</li></ul></li><li><p>数字型三个特殊值</p><ul><li>Infinity ，代表无穷大，大于任何数值</li><li>-Infinity ，代表无穷小，小于任何数值</li><li>NaN ，Not a number，代表一个非数值</li></ul></li><li><p>isNaN<br>用来判断一个变量是否为非数字的类型，返回 true 不是数字类型，false 是数字类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">21</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(a)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'yang'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(b)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>数据类型转换<br><img src="../image/java1.png" alt=""></p></li><li><p>Number的属性和方法</p></li></ol><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ol><li>字符串拼接变量口诀”引引加加”<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">13</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'我今年'</span> + age + <span class="string">'岁'</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></li><li>数据类型转换<br><img src="../image/java2.png" alt=""></li></ol><h4 id="字符串的属性方法"><a href="#字符串的属性方法" class="headerlink" title="字符串的属性方法"></a>字符串的属性方法</h4><ul><li><code>length</code>属性返回字符串长度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'wormnimya'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.length) <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></li><li>根据字符返回位置<br><img src="../image/java3.png" alt=""></li><li>根据位置返回字符<br><img src="../image/java4.png" alt=""></li><li>字符串操作方法<br><img src="../image/java5.png" alt=""></li><li>replace()方法<br><code>replace()</code> 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(被替换的字符串， 要替换为的字符串)；</span><br></pre></td></tr></table></figure></li><li>split()方法<br>split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'wormnimya'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.split(<span class="string">'o'</span>)); <span class="comment">// ["w", "rmnimya"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'wormnimya'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.split(<span class="string">''</span>)); <span class="comment">// ["w", "o", "r", "m", "n", "i", "m", "y", "a"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.split()); <span class="comment">// ["wormnimaya"]</span></span><br></pre></td></tr></table></figure></li><li>String.prototype.includes()<br>ES5中可以使用indexOf方法来判断一个字符串是否包含在另一个字符串中，indexOf返回出现的下标位置，如果不存在则返回-1, ES6提供了includes方法来判断一个字符串是否包含在另一个字符串中，返回boolean类型的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'wo'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li>String.prototype.startsWith()<br>判断参数字符串是否在原字符串的头部, 返回boolean类型的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">'wo'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>String.prototype.endsWith()<br>判断参数字符串是否在原字符串的尾部, 返回boolean类型的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.endsWith(<span class="string">'ya'</span>));</span><br></pre></td></tr></table></figure></li><li>String.prototype.padStart()<br>padStart可以在字符串的开头进行字符补全。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> month = <span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br></pre></td></tr></table></figure></li><li>String.prototype.padEnd()<br>  <strong>padEnd可以在字符串的后面进行字符补全，语法参数等都和padStart类似。</strong><br>  在JS前端我们处理时间戳的时候单位都是ms毫秒，但是，后端同学返回的时间戳则不一样是毫秒，可能只有10位，以s秒为单位。所以，我们在前端处理这个时间戳的时候，保险起见，要先做一个13位的补全，保证单位是毫秒。使用示意：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timestamp = +<span class="built_in">String</span>(timestamp).padEnd(<span class="number">13</span>, <span class="string">'0'</span>);</span><br></pre></td></tr></table></figure></li><li>String.prototype.toUpperCase()<br>toUpperCase() 方法将调用该方法的字符串转为大写形式并返回（如果调用该方法的值不是字符串类型会被强制转换）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase()); <span class="comment">// WORMNIMAYA</span></span><br></pre></td></tr></table></figure></li><li>String.prototype.toLowerCase()<br>toLowerCase() 会将调用该方法的字符串值转为小写形式，并返回。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormNimaYa'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase()); <span class="comment">// wormnimaya</span></span><br></pre></td></tr></table></figure></li><li>String.prototype.trim()<br>trim() 方法会从一个字符串的两端删除空白字符。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username = <span class="string">'   wormnimaya   '</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------'</span> + username.trim() + <span class="string">'-----'</span>); <span class="comment">// ------wormnimaya-----</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串结构赋值"><a href="#字符串结构赋值" class="headerlink" title="字符串结构赋值"></a>字符串结构赋值</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="string">'wor'</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// w o r</span></span><br></pre></td></tr></table></figure><h4 id="扩展运算符-…"><a href="#扩展运算符-…" class="headerlink" title="扩展运算符(…)"></a>扩展运算符(…)</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="keyword">let</span> arr = [...str]</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["w", "o", "r", "m", "n", "i", "m", "a", "y", "a"]</span></span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><p>  有利于字符串的拼接</p><ul><li>保留字符串格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> username = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span></span><br><span class="line"><span class="keyword">let</span> sex = <span class="string">'男生'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;username&#125;</span>,我今年<span class="subst">$&#123;age&#125;</span>岁了，我是个<span class="subst">$&#123;sex&#125;</span>`</span>); <span class="comment">// 我的名字叫wormnimaya,我今年22岁了，我是个男生</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;p&gt;111&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;222&lt;/span&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p> 布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错)</p><ol><li>数据类型转换<br><img src="../image/java6.png" alt=""><ul><li>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined </li><li>其余值都会被转换为 true<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">'小白'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p> 一个声明后没有被赋值的变量会有一个默认值undefined </p><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p> 虽然 <code>typeof null</code> 返回的值是 <code>object</code>,但是<code>null</code>不是对象，而是基本数据类型的一种。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>  数组是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放<code>任意类型的元素</code>。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><ul><li>利用  new 创建数组  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当Array()中填写是一个参数并且是数字，则代表数组长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>); </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [empty × 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'2'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["2"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li>利用数组字面量创建数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  arr = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  arr1 = [<span class="string">'小白'</span>,<span class="string">'小黑'</span>,<span class="string">'大黄'</span>,<span class="string">'瑞奇'</span>];</span><br></pre></td></tr></table></figure></li><li>Array.of() 创建数组<br>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="string">'2'</span>, &#123; <span class="attr">name</span>: <span class="string">'wormnimaya'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li><li>数组元素的类型<br>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="string">'小白'</span>,<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>]</span><br></pre></td></tr></table></figure><ol><li>获取数组中的元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第2个元素</span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></li><li>遍历数组</li></ol></li><li>数组遍历<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,<span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>数组的长度<br>数组的长度：默认情况下表示数组中元素的个数；<br>如果设置的<code>length</code>属性值大于数组的元素个数，则会在数组末尾出现空白元素；<br>如果设置的<code>length</code>属性值小于数组的元素个数，则会把超过该值的数组元素删除<br>数组的<code>length</code>属性可以被修改<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">alert(arrStus.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arrStus.length = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(arrStus); <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arrStus.length = <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(arrStus); <span class="comment">// [1, 2, 3, empty]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>检测是否为数组</li></ol></li><li>instanceof 运算符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> username = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(username <span class="keyword">instanceof</span> <span class="built_in">String</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>Array.isArray()<br>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> username = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(username)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组的属性和方法"><a href="#数组的属性和方法" class="headerlink" title="数组的属性和方法"></a>数组的属性和方法</h4><ul><li>添加删除数组元素的方法<br>数组中有进行增加、删除元素的方法，部分方法如下表<br><img src="../image/java7.png" alt=""></li><li>数组排序<br>数组中有对数组本身排序的方法，部分方法如下表<br><img src="../image/java8.png" alt=""><blockquote><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></blockquote></li><li>数组索引方法<br>数组中有获取数组指定元素索引值的方法，部分方法如下表<br><img src="../image/java9.png" alt=""></li><li>数组转换为字符串<br>数组中有把数组转化为字符串的方法，部分方法如下表<br><img src="../image/java10.png" alt=""><blockquote><p>注意：join方法如果不传入参数，逗号分割每一项</p></blockquote></li><li>数组的合并与截取<br><img src="../image/java11.png" alt=""></li><li>Array.prototype.includes()<br>includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>Array.from()<br>将伪数组转化为数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)) <span class="comment">// 将伪数组转化为数组</span></span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p =  <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>)) </span><br><span class="line">p.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><ul><li><p><strong>for循环</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">38</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>forEach()</strong><br>遍历数组中的每一个元素，没有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">38</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">// 函数第一个参数是数组中的每一个元素</span></span><br><span class="line"><span class="comment">// 第二个参数是数组索引</span></span><br><span class="line"><span class="comment">// 第三个参数是数组本身</span></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">element, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">':'</span> + element, arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>不支持break和continue</p></blockquote></li><li><p><strong>map()</strong><br>遍历数组中的每一个元素，并且函数会返回一个<code>return 元素</code>的新数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数第一个参数是数组中的每一个元素</span></span><br><span class="line"><span class="comment">// 第二个参数是数组索引</span></span><br><span class="line"><span class="comment">// 第三个参数是数组本身</span></span><br><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> <span class="keyword">let</span> arr1 = arr.map(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> value + <span class="number">1</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><p><strong>filter()</strong><br>返回每个元素满足条件的新数组, return后面写的是条件，原数组中的满足条件的元素都会添加到新数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> arr1 = arr.filter(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br></pre></td></tr></table></figure></li><li><p><strong>some()</strong><br>返回boolean，判断是否有元素符合return的条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> isflag = arr.some(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(isflag);</span><br></pre></td></tr></table></figure></li><li><p><strong>every()</strong><br>返回boolean，判断每个元素都符合return的条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> isflag = arr.every(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(isflag);</span><br></pre></td></tr></table></figure></li><li><p><strong>reduce</strong><br>reduce遍历每一个函数，每一次return的结果赋值给函数的第一个参数，最后返回一个结果<br>  <strong>求出数组中最大的元素</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数必须：累计器</span></span><br><span class="line"><span class="comment">// 第二个参数必须：当前值</span></span><br><span class="line"><span class="comment">// 第三个参数可选：当前元素的索引</span></span><br><span class="line"><span class="comment">// 第四个参数可选：当前元素所属的数组对象</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> num = arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(prev, cur)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><p>  <strong>累加</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> num = arr.reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></li><li><p><strong>find()</strong><br>找到数组中，满足return条件的元素，并返回元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.find(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p><strong>findIndex()</strong><br>找到数组中，满足return条件的元素，并返回元素的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.findIndex(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p><strong>for… in…</strong><br>for…in可以遍历数组，但是如果 array 有自定义属性，你发现也会被遍历出来(显然不合理)。这是因为 for…in 是为遍历对象创造的（{a:1, b:2}），不是为数组设计的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.foo) &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[index]); <span class="comment">//1 2 3 4 5 ƒ () &#123; console.log('foo') &#125; 会把自定义方法属性遍历出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<br>for…in不能用于遍历数组。<br>for…in代码块中不能有 return，不然会抛出异常。</p></blockquote></li><li><p><strong>for…of</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterable 的含义就很直观的感受到 for…of 遍历的是一切可遍历的元素（包括<code>Array</code>，<code>Ma</code>p，<code>Set</code>，<code>String</code>，<code>TypedArray</code>，<code>arguments</code>对象等等）</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组每一个元素的索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组的索引和元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组的结构赋值"><a href="#数组的结构赋值" class="headerlink" title="数组的结构赋值"></a>数组的结构赋值</h4><ul><li>赋值元素可以是任意可遍历的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="string">"abc"</span> </span><br><span class="line"><span class="keyword">let</span> [one, two, three] = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line"><span class="built_in">console</span>.log(a, b, c, one, two, three); <span class="comment">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure></li><li>可以跳过赋值元素<br>如果想忽略数组的某个元素对变量进行赋值，可以使用逗号来处理。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name, , title] = [<span class="string">'John'</span>, <span class="string">'Jim'</span>, <span class="string">'Sun'</span>, <span class="string">'Moon'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(name,title) <span class="comment">// John Sun</span></span><br></pre></td></tr></table></figure></li><li>rest 参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [name1, name2, ...rest] = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name1) <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(name2) <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rest[<span class="number">0</span>]) <span class="comment">// c</span></span><br><span class="line"><span class="built_in">console</span>.log(rest[<span class="number">1</span>]) <span class="comment">// d</span></span><br><span class="line"><span class="built_in">console</span>.log(rest.length) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<br>我们可以使用 rest 来接受赋值数组的剩余元素，不过要确保这个 rest 参数是放在被赋值变量的最后一个位置上。</p></blockquote></li></ul><h4 id="扩展运算符-…-和rest参数"><a href="#扩展运算符-…-和rest参数" class="headerlink" title="扩展运算符(…)和rest参数"></a>扩展运算符(…)和rest参数</h4><ul><li>扩展运算符：把数组或者类数组展开成用逗号隔开的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c); <span class="comment">// 1 2 3 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">foo(...arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">arr1.push(...arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// 1 2 3 4 5 6</span></span><br></pre></td></tr></table></figure></li><li>rest参数：把逗号隔开的值组合成一个数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">    rest.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(value); <span class="comment">// 1 2 3</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, ...rest</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(x); <span class="comment">// 1</span></span><br><span class="line">   <span class="built_in">console</span>.log(...rest); <span class="comment">// 2 3</span></span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line"><span class="keyword">let</span> [x, ...y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(x, y); <span class="comment">// 1 [2, 3, 4]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：</strong><br><code>在=右边</code>在<code>实参上</code>是扩展运算符，在<code>=左边</code>在<code>形参上</code>为rest参数</p></blockquote></li></ul><h3 id="函数-特殊的引用类型"><a href="#函数-特殊的引用类型" class="headerlink" title="函数(特殊的引用类型)"></a>函数(特殊的引用类型)</h3><h4 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a>函数的两种声明方式</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">fn(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面， 因为存在变量提升</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>函数形参和实参数量不匹配时<br><img src="../image/java12.png" alt=""></li><li>arguments的使用<br>当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：<ul><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push , pop 等方法<blockquote><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></blockquote></li></ul></li><li>普通函数this指向问题<table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象 原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table></li></ul><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>  箭头函数可以说是 ES6 很大的福利了，不管你是函数式爱好者还是面向对象开发者，函数是必须要用到的东西。之前声明函数需要使用 function，如下：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say hello'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  使用箭头函数：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say hello'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>如果带参数该怎么做呢？<blockquote><p>如果只有一个参数，可以省略括号，如果大于一个参数一定要记得带括号</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say hello'</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say hello'</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回值<ul><li>没有返回值直接返回undefined<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(name)</span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="string">'wormnimaya'</span>)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li>如果返回值是表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pow = <span class="function"><span class="params">x</span> =&gt;</span> x * x</span><br></pre></td></tr></table></figure></li><li>如果返回值是字面量对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="function">(<span class="params">name</span>) =&gt;</span> (&#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    addr: <span class="string">'Beijing City'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>箭头函数的this指向<br>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// obj</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">'wormnimaya'</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line">foo.call(obj)()</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数中this的改变"><a href="#函数中this的改变" class="headerlink" title="函数中this的改变"></a>函数中this的改变</h4><ul><li><p><strong>call方法</strong><br><code>call()</code>方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的<code>this</code>指向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg, arg1, arg2)</span><br></pre></td></tr></table></figure><ul><li><p><code>call</code> 第一个可以调用函数 第二个可以改变函数内的<code>this</code>指向</p></li><li><p><code>call</code> 的主要作用可以实现继承(后面<code>class</code>讲)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">      name: <span class="string">'wormnimaya'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  fn.call(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>apply</strong><br><code>apply()</code>方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的<code>this</code>指向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(this.Arg, [argsArry])</span><br></pre></td></tr></table></figure><ul><li><p><code>thisArg</code>：在<code>fun</code>函数运行时指定的<code>this</code>值</p></li><li><p><code>argsArray</code>：传的值，必须包含在数组里面</p></li><li><p>返回值就是函数的返回值，因为它就是调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn.apply(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>bind方法</strong><br>bind()方法不会调用函数。但是能改变函数内部this指向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(<span class="keyword">this</span>.Args, arg1, arg2)</span><br></pre></td></tr></table></figure><ul><li><p>thisArg：在fun函数运行时指定的this值</p></li><li><p>arg1, arg2:传递的其他参数</p></li><li><p>返回由指定的this值和初始化参数改造的原函数拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> foo =fn.bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"> foo()</span><br><span class="line"> <span class="comment">// 1. 不会调用原来的函数可以改变原来函数内部的this指向</span></span><br><span class="line"> <span class="comment">// 2. 返回的是原函数改变this之后产生的新函数</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p> 立即执行函数就是声明一个匿名函数，马上调用这个匿名函数，创建一个独立的作用域。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种立即执行函数写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">   alert(a + b)</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第二种立即执行函数写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  alert(a + b)</span><br><span class="line">&#125; (<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p> <strong>为什么需要对象？</strong><br> 数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。</p><h4 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">'pink'</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">'男'</span>,</span><br><span class="line">    sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'大家好啊~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><strong>对象的使用</strong><ul><li>访问对象的属性<br>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”<br>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.name)     <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">'name'</span>])  <span class="comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure>但是如果<code>key是变量</code>的话就不能使用点了，js会理解变量为对象的key值，造成混淆<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v3 = obj[key];<span class="comment">//key是一个变量</span></span><br></pre></td></tr></table></figure></li><li>调用对象的方法<br>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">star.sayHi();</span><br></pre></td></tr></table></figure></li><li>删除属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">     age: <span class="number">22</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">delete</span> obj.age</span><br><span class="line"> <span class="built_in">console</span>.log(obj); <span class="comment">// &#123;name: "wormnimaya"&#125; obj.age被删除</span></span><br></pre></td></tr></table></figure></li><li>判断对象中是否含有属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> Obect();</span><br><span class="line">andy.name = <span class="string">'pink'</span>;</span><br><span class="line">andy.age = <span class="number">18</span>;</span><br><span class="line">andy.sex = <span class="string">'男'</span>;</span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'大家好啊~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h4><p> 构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 <code>new</code>运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 实例属性</span></span><br><span class="line">     <span class="keyword">this</span>.name = name</span><br><span class="line">     <span class="keyword">this</span>.age = age</span><br><span class="line">     <span class="keyword">this</span>.sex = sex</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 实例方法</span></span><br><span class="line"> Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我的年龄是'</span> + <span class="keyword">this</span>.age);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 静态属性</span></span><br><span class="line"> Person.hobby = <span class="string">'play'</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 静态方法</span></span><br><span class="line"> Person.getHobby = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'我的爱好是'</span> + Person.hobby);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj = <span class="keyword">new</span> Person(<span class="string">'wormnimaya'</span>, <span class="number">22</span>, <span class="string">'男'</span>)</span><br><span class="line"> <span class="built_in">console</span>.log(obj.name); <span class="comment">// 调用实例属性</span></span><br><span class="line"> obj.say() <span class="comment">// 调用实例方法</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">console</span>.log(Person.hobby); <span class="comment">// 调用静态属性</span></span><br><span class="line"> Person.getHobby() <span class="comment">// 调用静态方法</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：</strong><br>构造函数中的<code>this</code>指向实例对象，实例方法中的this也指向实例对象，静态方法中的<code>this</code>指向构造函数，所以无法访问实例属性</p></blockquote><p> <strong>继承</strong><br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我的名字叫'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, color</span>) </span>&#123;</span><br><span class="line">    Animal.call(<span class="keyword">this</span>, name) <span class="comment">// 修改父类的this指向，并传递参数</span></span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">&#125; </span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line">Dog.prototype.constuctor = Dog</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wang'</span>, <span class="string">'white'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 调用父类属性</span></span><br><span class="line">dog.say() <span class="comment">// 调用父类方法</span></span><br></pre></td></tr></table></figure></p><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><ol><li><strong>用class定义类</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="comment">// 实例属性</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我的名字叫'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> sayCount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是父类的静态方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> count = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'wangcai'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(animal.name); <span class="comment">// 输出实例属性</span></span><br><span class="line">animal.sayName() <span class="comment">// 调用实例方法</span></span><br><span class="line">Animal.sayCount() <span class="comment">// 调用静态方法</span></span><br><span class="line"><span class="built_in">console</span>.log(Animal.count); <span class="comment">// 调用静态属性</span></span><br></pre></td></tr></table></figure></li><li><strong>get与set</strong><br>get和set方法可以为实例属性，取值和存值，可以在get和set中进行逻辑操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="comment">// 实例属性</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>._sex =  <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> sex() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> sex(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._sex = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'wangcai'</span>)</span><br><span class="line">animal.sex = <span class="string">'男'</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.sex);</span><br></pre></td></tr></table></figure></li><li><strong>继承</strong><br>继承父类后，子类拥有父类所有静态属性，静态方法，实例属性，实例方法的使用权（包括set和get方法）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="comment">// 实例属性</span></span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>._sex = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> sex() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> sex(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._sex = val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我的名字叫'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> sayCount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是父类的静态方法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> count = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wangcai'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 调用父类的实例属性</span></span><br><span class="line">dog.sayName() <span class="comment">// 调用父类的实例方法</span></span><br><span class="line"><span class="built_in">console</span>.log(Dog.count); <span class="comment">// 调用父类的静态属性</span></span><br><span class="line">Dog.sayCount() <span class="comment">// 调用父类的静态方法</span></span><br><span class="line">dog.sex = <span class="string">'女'</span> <span class="comment">// 调用父类的set方法为属性赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.sex); <span class="comment">// 调用父类的get方法为属性取值</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><br>子类继承了父类，不管是否传值，都要调用<code>super()</code></p></blockquote></li></ol><h4 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h4><ol><li><p><strong>for…in</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Object.keys()</strong><br><code>Object.keys()</code>用于返回对象所有<code>key</code>组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">     age: <span class="number">22</span>,</span><br><span class="line">     sex: <span class="string">'男'</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(k,obj[k]);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>Object.entries()</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码确实成功的遍历了出来，但是上边说过 <code>Object.entries</code> 返回的是数组，这里面还用了数组的解构赋值，很多同学不明白是怎么结合的，其实很简单，看下 <code>Object.entries</code> 的返回值就好了：<br><img src="../image/java16.png" alt=""></p></li><li><p><strong>Object.getOwnPropertyNames()</strong><br><code>Object.getOwnPropertyNames()</code>用于返回对象所有<code>key</code>组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k,obj[k]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>Reflect.ownKeys()</strong><br><code>Reflect.ownKeys()</code>用于返回对象所有<code>key</code>组成的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">     age: <span class="number">22</span>,</span><br><span class="line">     sex: <span class="string">'男'</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(k,obj[k]);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="对象中常用的属性方法"><a href="#对象中常用的属性方法" class="headerlink" title="对象中常用的属性方法"></a>对象中常用的属性方法</h4><ol><li><p><strong>Object.keys方法</strong><br>Object.keys方法是JavaScript中用于遍历对象属性的一个方法 。它传入的参数是一个对象，返回的是一个数组，数组中包含的是该对象所有的属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// ["name", "age", "sex"]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Object.values()方法</strong><br>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的键值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;  </span><br><span class="line"><span class="built_in">Object</span>.values(obj)  </span><br><span class="line"><span class="comment">// ["bar", 42]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Object.entries()</strong><br><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj));</span><br></pre></td></tr></table></figure><p><img src="../image/java16.png" alt=""></p></li><li><p><strong>Object.is()</strong><br>判断两个值是否相等相当于<code>===</code>， 判断复杂类型的时候判断的是地址值是否相等, 返回<code>Boolean</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">1</span>, <span class="string">'1'</span>)); <span class="comment">// false</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(obj1, obj2)) <span class="comment">// false 虽然内容相同，但不是一个对象</span></span><br></pre></td></tr></table></figure><p><strong>特例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Object.assign()</strong><br>合并对象(可以合并对象中只能是基本类型), <code>Object.assign()</code> 方法用于将源对象复制到目标对象，它将返回目标对象。参数一是目标对象，参数二是源对象</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th><th align="center">必选</th></tr></thead><tbody><tr><td align="center">target</td><td align="center">目标对象</td><td align="center">Y</td></tr><tr><td align="center">sources</td><td align="center">源对象</td><td align="center">N</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> target = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> source = &#123;</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> returnedTarget = <span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="built_in">console</span>.log(target);</span><br><span class="line"><span class="built_in">console</span>.log(returnedTarget);</span><br></pre></td></tr></table></figure><p><strong>Object.assign()不能合并多重嵌套</strong><br>合并后<code>b</code>属性中的<code>d</code>,<code>e</code>丢失，这是因为<code>assign</code>单纯的拷贝了地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;</span><br><span class="line">     a: <span class="number">1</span>,</span><br><span class="line">     b: &#123;</span><br><span class="line">         d: <span class="number">5</span>,</span><br><span class="line">         e: <span class="number">6</span></span><br><span class="line">     &#125;,</span><br><span class="line">     say() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> source = &#123;</span><br><span class="line">     c: <span class="number">3</span>,</span><br><span class="line">     b: &#123;</span><br><span class="line">         f: <span class="number">7</span></span><br><span class="line">     &#125;,</span><br><span class="line">     hello() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"> <span class="built_in">console</span>.log(target);</span><br></pre></td></tr></table></figure></li><li><p><strong>Object.defineProperty</strong><br>定义新属性或修改原有的属性。<br><code>Object.defineProperty(obj,  prop,  descriptor)</code><br><code>Object. defineProperty()</code> 第三个参数 <code>descriptor</code>说明：以对象形式<code>{}</code>书写</p><ul><li><code>value</code>：设置属性的值默认为 <code>undefined</code></li><li><code>writable</code>：值是否可以重写。 <code>true| false</code> 默认为 <code>false</code></li><li><code>enumerable</code>：目标属性是否可以被枚举。 <code>true | false</code>默认为 <code>false</code></li><li><code>configurable</code>：目标属性是否可以被删除或是否可以再次修改特性 <code>true| false</code>默认为 <code>false</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'age'</span>, &#123;</span><br><span class="line">    value: <span class="number">22</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Object.defineProperties()</strong><br>定义多个新属性或修改多个原有的属性。<br><code>Object.defineProperties(obj, props)</code><br><code>Object.defineProperties(obj, props)</code> 第二个参数 <code>props</code>说明：以对象形式<code>{}</code>书写</p><ul><li><code>value</code>：设置属性的值默认为 <code>undefined</code></li><li><code>writable</code>：值是否可以重写。 <code>true| false</code> 默认为 <code>false</code></li><li><code>enumerable</code>：目标属性是否可以被枚举。 <code>true | false</code>默认为 <code>false</code></li><li><code>configurable</code>：目标属性是否可以被删除或是否可以再次修改特性 <code>true| false</code>默认为 <code>false</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    <span class="string">'age'</span>: &#123;</span><br><span class="line">        value: <span class="number">22</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'sex'</span>: &#123;</span><br><span class="line">        value: <span class="string">'男'</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><p> <code>JavaScript</code> 提供了多个内置对象：<code>Math</code>、 <code>Date</code> 、<code>Array</code>、<code>String</code>等    </p><ol><li>Math对象<br><code>Math</code> 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求<code>绝对值</code>，<code>取整</code>、<code>最大值</code>等）可以使用 <code>Math</code> 中的成员。<table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table></li><li>Date对象<br><code>Date</code> 对象和 <code>Math</code> 对象不一样，<code>Date</code>是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。<code>Date</code> 实例用来处理日期和时间</li></ol><ul><li>使用Date实例化日期对象<br><strong>获取当前时间必须实例化：</strong> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// now 是 Sun Aug 23 2020 11:12:47 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure> <strong>获取指定时间的日期对象</strong> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019/5/1'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></blockquote></li><li>使用Date实例的方法和属性<br><img src="../image/java32.png" alt=""></li><li>通过Date实例获取总毫米数<br>总毫秒数的含义：基于1970年1月1日（世界标准时间）起的毫秒数<br><strong>获取总毫秒数方法</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>数组对象</p></li><li><p>基本包装类型<br>为了方便操作基本数据类型，<code>JavaScript</code> 还提供了三个特殊的引用类型：<code>String</code>、<code>Number</code>和 <code>Boolean</code>。</p><p>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'andy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure><p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为 js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'andy'</span>);</span><br><span class="line"><span class="comment">// 2. 赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 3. 销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4><p> <code>Javascript</code>规定，每一个构造函数都有一个 <code>prototype</code>属性，指向<code>原型对象</code>。这个对象的所有属性和方法都会被构造函数所拥有。我们可以把那些不变的方法，直接定义在 <code>prototype</code>对象上，这样所有对象的实例就可以共享这些方法。<code>原型</code>是一个对象，构造函数中<code>prototype</code>指向原型，也称<code>原型对象</code>。原型的作用是<code>共享方法</code>。</p><ol><li><p><strong>prototype</strong><br>每一个构造函数都有一个 <code>prototype</code>属性，指向<code>原型对象</code>。这个对象的所有属性和方法都会被构造函数所拥有。我们可以把那些不变的方法，直接定义在 <code>prototype</code>对象上，这样所有对象的实例就可以共享这些方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你好'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Animal(<span class="string">'狗'</span>)</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Animal(<span class="string">'猫'</span>)</span><br><span class="line">dog.say()</span><br><span class="line">cat.say()</span><br></pre></td></tr></table></figure></li><li><p><strong><strong>proto</strong></strong><br>对象都会有一个属性<code>__proto__</code>指向构造函数的 <code>prototype</code>原型对象，之所以们对象可以使用构造函数<code>prototype</code>原型对象的属性和方法，就是因为对象有 <code>__proto__</code>原型的存在。</p><ul><li><code>prototype</code>把原型对象的地址赋值给<code>__proto__</code>，<code>__proto__</code>和<code>prototype</code>是等价的</li><li><code>__proto__</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性因此实际开发中，不可以使用这个属性，它只是内部指向原型对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你好'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Animal(<span class="string">'狗'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dog.__proto__ === Animal.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><img src="../image/java13.png" alt=""></li></ul></li><li><p><strong>constructor构造函数</strong></p><ul><li><code>__proto__</code>和<code>prototype</code>里面都有一个属性 <code>constructor</code> 属性 ，<code>constructor</code> 我们称为构造函数，因为它指回构造函数本身。</li><li><code>constructor</code> 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</li><li>一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 <code>constructor</code>  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 <code>constructor</code> 指向原来的构造函数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line">Star.prototype = &#123;</span><br><span class="line"><span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">  sing: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会演电影'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy)</span><br></pre></td></tr></table></figure></li></ul><p><strong>构造函数的<code>prototype</code>属性指向了构造函数原型对象 ,实例对象是由构造函数创建的,实例对象的<code>__proto__</code>属性指向了构造函数的原型对象 ,构造函数的原型对象的<code>constructor</code>属性指向了构造函数,实例对象的原型的<code>constructor</code>属性也指向了构造函数</strong><br><img src="../image/java14.png" alt=""></p></li><li><p><strong>原型链</strong><br>  每一个实例对象又有一个<code>__proto__</code>属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有<code>__proto__</code>属性，这样一层一层往上找就形成了原型链。<br>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。如果没有就查找它的原型（也就是 <code>__proto__</code>指向原型对象）。 如果还没有就查找原型对象的原型（<code>Object</code>的原型对象）。依此类推一直找到 <code>Object</code> 为止（<code>null</code>）。<code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。<br><img src="../image/java15.png" alt=""></p></li><li><p><strong>原型对象中this指向</strong><br>构造函数中的<code>this</code>和原型对象的<code>this</code>,都指向我们<code>new</code>出来的实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">    that = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="built_in">console</span>.log(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通过原型为数组扩展内置方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">      sum += <span class="keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了  可以始终 数组.sum()进行数据的求</span></span><br></pre></td></tr></table></figure><h4 id="对象结构赋值"><a href="#对象结构赋值" class="headerlink" title="对象结构赋值"></a>对象结构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">     age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br></pre></td></tr></table></figure><blockquote><p>在这个结构赋值的过程中，左侧的“模板”结构要与右侧的 Object 一致，但是属性的顺序无需一致</p></blockquote><p><strong>修改属性名</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name, age);</span><br></pre></td></tr></table></figure></li></ol><h4 id="rest运算符和扩展运算符"><a href="#rest运算符和扩展运算符" class="headerlink" title="rest运算符和扩展运算符"></a>rest运算符和扩展运算符</h4><ol><li><strong>rest</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">   name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">   age: <span class="number">22</span>,</span><br><span class="line">   sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, ...rest &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name, rest.age, rest.sex);</span><br></pre></td></tr></table></figure></li><li><strong>扩展运算符</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    grade: <span class="number">95</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(&#123;...obj, ...obj1&#125;); <span class="comment">// &#123;name: "wormnimaya", age: 22, sex: "男", grade: 95&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h4><ol><li><p>浅拷贝<br>浅拷贝只是单纯的把地址赋值给变量，不会在堆中开辟空间，所以两个变量指向同一个地址，一个改变另一个也相应改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">     name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">     age: <span class="string">'12'</span>,</span><br><span class="line">     address: &#123;</span><br><span class="line">         number: <span class="number">123456</span></span><br><span class="line">     &#125;,</span><br><span class="line">     arr: [<span class="number">12</span>, <span class="number">3</span>, <span class="number">44</span>]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> obj1 = obj</span><br><span class="line"> obj1.name = <span class="string">'小明'</span></span><br><span class="line"> <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝<br>深拷贝是在堆中重新开辟一个空间来存储，两个变量指向不同的空间，一个改变另一个不会发生变化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">    age: <span class="string">'12'</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        number: <span class="number">123456</span></span><br><span class="line">    &#125;,</span><br><span class="line">    arr: [<span class="number">12</span>, <span class="number">3</span>, <span class="number">44</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = deepCode(obj)</span><br><span class="line">obj1.name = <span class="string">'小明'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p><strong>自写深拷贝函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">          <span class="keyword">return</span> obj</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化返回结果</span></span><br><span class="line">      <span class="keyword">let</span> result</span><br><span class="line">      <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          result = []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">          <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">          <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">              <span class="comment">// 递归调用！！！</span></span><br><span class="line">              result[key] = deepClone(obj[key])</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 返回结果</span></span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      name: <span class="string">'wormnimaya'</span>,</span><br><span class="line">      age: <span class="string">'12'</span>,</span><br><span class="line">      address: &#123;</span><br><span class="line">          number: <span class="number">123456</span></span><br><span class="line">      &#125;,</span><br><span class="line">      arr: [<span class="number">12</span>, <span class="number">3</span>, <span class="number">44</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj1 = deepClone(obj)</span><br><span class="line">  obj1.name = <span class="string">'小明'</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></li></ol><h2 id="引用类型和值类型的区别"><a href="#引用类型和值类型的区别" class="headerlink" title="引用类型和值类型的区别"></a>引用类型和值类型的区别</h2><p> 在栈中会开辟空间储存值类型数据，而引用类型会在队中开辟空间存储数据，而在栈中储存的是引用类型的地址值<br> <img src="../image/java17.png" alt=""></p><ol><li>简单类型（基本数据类型、值类型）：在存储时变量中存储的是值本身，包括<code>string</code> ，<code>number</code>，<code>boolean</code>，<code>undefined</code>，<code>null</code>，<code>symbol</code></li><li>复杂数据类型（引用类型）：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；<blockquote><p>基本数据类型是值拷贝，复杂数据类型是引用拷贝</p></blockquote><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2></li><li>识别所有基本类型(不能判断null)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'wormnimaya'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> flag); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>(<span class="string">'s'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> s); <span class="comment">// symbol</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure></li><li>识别函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn); <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">console</span>.log); <span class="comment">// function</span></span><br></pre></td></tr></table></figure></li><li>判断是否是引用类型（不可再细分）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;<span class="attr">age</span>: <span class="number">22</span>&#125;); <span class="comment">// object</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p> 正则表达式（ <code>Regular Expression</code> ）是用于匹配字符串中字符组合的模式。在<code>JavaScript</code>中，正则表达式也是对象。</p><h2 id="正则表达式的创建"><a href="#正则表达式的创建" class="headerlink" title="正则表达式的创建"></a>正则表达式的创建</h2><ol><li>通过调用RegExp对象的构造函数创建 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br></pre></td></tr></table></figure></li><li>利用字面量创建 正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure></li><li>测试正则表达式<br><code>test()</code> 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 <code>true</code> 或 <code>false</code>，其参数是测试字符串。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>));<span class="comment">//匹配字符中是否出现123  出现结果为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));<span class="comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><p> 一个正则表达式可以由简单的字符构成，比如 <code>/abc/</code>，也可以是简单和特殊字符的组合，比如<code>/ab*c/</code>。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符号，如 <code>^</code> 、<code>$</code> 、<code>+</code> 等。<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN</a></p><h3 id="边界符"><a href="#边界符" class="headerlink" title="边界符"></a>边界符</h3><p> 正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本（以谁开始）</td></tr><tr><td>$</td><td>表示匹配行尾的文本（以谁结束）</td></tr></tbody></table><p> 如果 <code>^</code>和 <code>$</code> 在一起，表示必须是精确匹配。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'aabcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------'</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcabc'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p> 字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符都放在方括号内。</p><h4 id="方括号"><a href="#方括号" class="headerlink" title="[]方括号"></a>[]方括号</h4><p> 表示有一系列字符可供选择，只要匹配其中一个就可以了<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'andy'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'baby'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'color'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'red'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b  或者是c 这三个字母才返回 true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'aa'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'b'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'c'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'abc'</span>));<span class="comment">//true</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-z]$/</span> <span class="comment">//26个英文字母任何一个字母返回 true  - 表示的是a 到z 的范围  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'z'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'A'</span>));<span class="comment">//false</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a-zA-Z0-9]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回 true  </span></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a-zA-Z0-9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'a'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'B'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'!'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h4 id="量词符"><a href="#量词符" class="headerlink" title="量词符"></a>量词符</h4><p> 量词符用来设定某个模式出现的次数。</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h4 id="括号总结"><a href="#括号总结" class="headerlink" title="括号总结"></a>括号总结</h4><ol><li>大括号  量词符.  里面表示重复次数</li><li>中括号 字符集合。匹配方括号中的任意字符. </li><li>小括号表示优先级<br><a href="https://c.runoob.com/" target="_blank" rel="noopener">正则表达式在线测试</a></li></ol><h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p> 预定义类指的是某些常见模式的简写方式.<br> <img src="../image/java18.png" alt=""><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证座机号码</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机号验证:/^1[3|4|5|7|8][0-9]&#123;9&#125;$/;</span></span><br></pre></td></tr></table></figure></p><h3 id="正则替换replace"><a href="#正则替换replace" class="headerlink" title="正则替换replace"></a>正则替换replace</h3><p> <code>replace()</code>方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式<br> <code>string. replace(regexp/substr, replacement)</code></p><ul><li>第一个参数: 被替换的字符串或者 正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ul><p><code>/表达式/ [switch]</code><br> switch（也称为修饰符）按照什么样的模式来匹配。有三种值</p><ul><li>g：全局匹配</li><li>i：忽略大小写</li><li>gi：全局匹配+忽略大小写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'andy和red'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="string">'andy'</span>, <span class="string">'baby'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr)<span class="comment">//baby和red</span></span><br><span class="line"><span class="comment">//等同于 此处的andy可以写在正则表达式内</span></span><br><span class="line"><span class="keyword">var</span> newStr2 = str.replace(<span class="regexp">/andy/</span>, <span class="string">'baby'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr2)<span class="comment">//baby和red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换第一个</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcabc'</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/</span>,<span class="string">'哈哈'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bcabc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全部替换g</span></span><br><span class="line"><span class="keyword">var</span> nStr = str.replace(<span class="regexp">/a/g</span>,<span class="string">'哈哈'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nStr) <span class="comment">//哈哈bc哈哈bc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//忽略大小写i</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'aAbcAba'</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/a/gi</span>,<span class="string">'哈哈'</span>)<span class="comment">//"哈哈哈哈bc哈哈b哈哈"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h2><p> <strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。<br> JavaScript中常用的运算符有：</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p> 算术运算使用的符号，用于执行两个变量或值的算术运算。<br> <img src="../image/java19.png" alt=""></p><ol><li>浮点数的精度问题<br>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;    <span class="comment">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0.07</span> * <span class="number">100</span>);   <span class="comment">// 结果不是 7，  而是：7.000000000000001</span></span><br></pre></td></tr></table></figure><blockquote><p>不要直接判断两个浮点数是否相等 ! </p></blockquote></li><li>表达式和返回值<ul><li>表达式: 是由数字、运算符、变量等组成的式子</li><li>返回值: 表达式最终都会有一个结果，返回给开发者，称为返回值</li></ul></li></ol><h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><p> 如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。</p><ol><li>递增运算符<ul><li>前置递增<br>本身等于递增后的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(++num); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li>后置递增<br>本身等于递增前的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(num++); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul></li><li>递减运算符<ul><li>前置递减<br>本身等于递减后的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(--num); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li>后置递减<br>本身等于递减之前的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(num--); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p> 比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（<code>true / false</code>）作为比较运算的结果<br> <img src="../image/java20.png" alt=""></p><p> <strong>等号比较</strong><br> <img src="../image/java21.png" alt=""><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">'18'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">'18'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p> 逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断<br> <img src="../image/java22.png" alt=""></p><ol><li>逻辑与&amp;&amp;<br>两边都是 true才返回 true，否则返回 false<br><img src="../image/java23.png" alt=""><br><img src="../image/java24.png" alt=""></li><li>逻辑或 ||<br>一边<code>true</code>就返回<code>true</code><br><img src="../image/java25.png" alt=""><br><img src="../image/java26.png" alt=""></li><li>逻辑非 ！<br>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 <code>true</code> 的相反值是 <code>false</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isOk = !<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isOk);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li>短路运算（逻辑中断）<ul><li>逻辑与<br><code>语法： 表达式1 &amp;&amp; 表达式2</code><br>如果第一个表达式的值为真，则返回表达式2<br>如果第一个表达式的值为假，则返回表达式1<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span> ); <span class="comment">// 456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> &amp;&amp; <span class="number">456</span> ); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span>&amp;&amp; <span class="number">789</span> ); <span class="comment">//789</span></span><br></pre></td></tr></table></figure></li><li>逻辑或<br><code>语法： 表达式1 || 表达式2</code><br>如果第一个表达式的值为真，则返回表达式1<br>如果第一个表达式的值为假，则返回表达式2<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> ); <span class="comment">//  123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> ||  <span class="number">456</span> );   <span class="comment">//  456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> || <span class="number">789</span> );<span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p> 用来把数据赋值给变量的运算符。<br> <img src="../image/java27.png" alt=""><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">age += <span class="number">5</span>;  <span class="comment">// 相当于 age = age + 5;</span></span><br><span class="line">age -= <span class="number">5</span>;  <span class="comment">// 相当于 age = age - 5;</span></span><br><span class="line">age *= <span class="number">10</span>; <span class="comment">// 相当于 age = age * 10;</span></span><br></pre></td></tr></table></figure></p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p> <img src="../image/java28.png" alt=""></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ol><li>顺序流程控制<br>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br><img src="../image/java29.png" alt=""></li><li>分支流程控制<br>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果<br><img src="../image/java30.png" alt=""><ul><li>if 语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">   <span class="comment">// 条件成立执行的代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>if else语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// [如果] 条件成立执行的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// [否则] 执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>if else if 语句(多分支语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 适合于检查多重条件。</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)  &#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>)  &#123;</span><br><span class="line">  语句<span class="number">3</span>；</span><br><span class="line">....</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 上述条件都不成立执行此处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>三元表达式<br>如果表达式1为 <code>true</code> ，则返回表达式2的值，如果表达式1为 <code>false</code>，则返回表达式3的值<br><code>表达式1 ? 表达式2 : 表达式3;</code></li><li>switch分支流程控制<br><code>switch</code> 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 <code>switch</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</p></blockquote></li></ul></li><li>循环<ul><li>for循环<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>双重for循环<br>外层循环执行一次，内层循环要执行全部次数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> star = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    star += <span class="string">'☆'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次满 5个星星 就 加一次换行</span></span><br><span class="line">    star += <span class="string">'\n'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(star);</span><br></pre></td></tr></table></figure></li><li>while循环<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>do-while循环<br>先执行一次循环体代码, 再执行条件表达式，如果结果为 <code>true</code>，则继续执行循环体代码，如果为 <code>false</code>，则退出循环，继续执行后面代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">     <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line"> &#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><blockquote><p>注意：先再执行循环体，再判断，<code>do…while</code>循环语句至少会执行一次循环体代码</p></blockquote></li><li>continue、break<br>continue 关键字用于立即跳出本次循环，继续下一次循环<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这个包子有虫子，扔掉'</span>);</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳出本次循环，跳出的是第3次循环 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我正在吃第'</span> + i + <span class="string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>break 关键字用于立即跳出整个循环（循环结束）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>; <span class="comment">// 直接退出整个for 循环，跳到整个for下面的语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我正在吃第'</span> + i + <span class="string">'个包子呢'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p> 通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p> 作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</p><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><p> 作用于函数内的代码环境，就是局部作用域。因为跟函数有关系，所以也称为函数作用域。</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p> <code>es6</code>之前没有块级作用域，es6以后用let或者const声明的变量具有块级作用域, 块作用域由 <code>{ }</code> 包括。</p><ul><li>Js中没有块级作用域（在ES6之前）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure></li><li>ES6以后<br>具有块级作用域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line">     <span class="built_in">console</span>.log(num);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(num); <span class="comment">// num is not defined</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p> 在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</p><ul><li>全局变量在代码的任何位置都可以使</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p> 在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</p><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><h2 id="全局变量和局部变量的区别"><a href="#全局变量和局部变量的区别" class="headerlink" title="全局变量和局部变量的区别"></a>全局变量和局部变量的区别</h2><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>只要是代码都一个作用域中，写在函数内部的是局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在<strong>内部函数可以访问外部函数变量</strong>的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><br> <strong>作用域链：采取就近原则的方式来查找变量最终的值。</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p> <code>JavaScript代码</code>是由浏览器中的 <code>JavaScript解析器</code>来执行的。<code>JavaScript解析器</code>在运行<code>JavaScript代码</code>的时候分为两步：<code>预解析</code>和<code>代码执行</code>。</p><ul><li>预解析：在当前作用域下, <code>JS</code> 代码执行之前，浏览器会默认把带有 <code>var</code> 和 <code>function</code> 声明的变量在内存中进行提前声明或者定义。</li><li>代码执行： 从上到下执行JS语句</li><li>预解析会把变量和函数的声明在代码执行之前执行完成。</li></ul><ol><li>变量预解析<br>预解析也叫做变量、函数提升。变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p>变量提升只提升声明，不提升赋值</p></blockquote></li><li>函数预解析<br>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打印'</span>); 控制台打印字符串 --- ”打印“ </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！</p></blockquote></li><li>函数表达式声明函数问题<br>函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'想不到吧'</span>); <span class="comment">// 结果：报错提示 ”fn is not a function"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined, 此时fn的值是undefined，所以无法正确调用</p></blockquote></li></ol><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p> <code>JavaScript</code> 除了提供正常模式外，还提供了严格模式（<code>strict mode</code>）。<code>ES5</code> 的严格模式是采用具有限制性 <code>JavaScript</code>变体的一种方式，即在严格的条件下运行 <code>JS</code> 代码。</p><p> 严格模式在 <code>IE10</code> 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><p> 严格模式对正常的 <code>JavaScript</code> 语义做了一些更改：</p><ol><li>消除了 <code>Javascript</code> 语法的一些不合理、不严谨之处，减少了一些怪异行为。</li><li>消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>提高编译器效率，增加运行速度。</li><li>禁用了在 <code>ECMAScript</code> 的未来版本中可能会定义的一些语法，为未来新版本的 <code>Javascript</code> 做好铺垫。比如一些保留字如：<code>class</code>,<code>enum</code>,<code>export</code>, <code>extends</code>, <code>import</code>, <code>super</code> 不能做变量名</li></ol><h2 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h2><p> 严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为为<code>脚本开启严格模式</code>和为<code>函数开启严格模式</code>两种情况。</p><ol><li>为脚本开启严格模式<br>有的 <code>script</code> 脚本是严格模式，有的 <code>script</code> 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="meta">  　　　　"use strict"</span>;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  　　　　<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;)();</span><br></pre></td></tr></table></figure></li><li>为函数开启严格模式<br>要给某个函数开启严格模式，需要把“use strict”;  (或 ‘use strict’; ) 声明放在函数体所有语句之前。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">　　 "use strict"</span>;</span><br><span class="line">　　 <span class="keyword">return</span> <span class="string">"123"</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure></li><li>严格模式中的变化<br>严格模式对 <code>Javascript</code> 的语法和行为，都做了一些改变。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">10</span> </span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 严格模式后先声明才能使用变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> num2; <span class="comment">// 严格模式不允许删除变量</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn();  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sex = <span class="string">'男'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Star();严格模式下,如果 构造函数不加new调用会报错.</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span><br><span class="line"><span class="built_in">console</span>.log(ldh.sex);</span><br><span class="line">   </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">更多严格模式参考</a></li></ol><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><p> <strong>高阶函数</strong>是对其他函数进行操作的函数，它<code>接收函数作为参数</code>或将<code>函数作为返回值输出</code></p><p> 函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是作为<strong>回调函数</strong>。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    callback &amp;&amp; callback()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我是高阶函数'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'我是高阶函数'</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> fn()();</span><br></pre></td></tr></table></figure></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p> 闭包（<code>closure</code>）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用域可以访问另外一个函数内部的局部变量<br> <img src="../image/java31.png" alt=""></p><h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2><p> 延伸变量的作用范围。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(); <span class="comment">// 全局作用域访问到局部变量</span></span><br></pre></td></tr></table></figure></p><h2 id="闭包的案例"><a href="#闭包的案例" class="headerlink" title="闭包的案例"></a>闭包的案例</h2><ol><li>利用闭包的方式得到当前<code>li</code> 的索引号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line">  <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>闭包应用3秒钟之后,打印所有li元素的内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><p> 如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函数内部自己调用自己, 这个函数就是递归函数</p><blockquote><p>递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件return。</p></blockquote><h2 id="利用递归求1-n的阶乘"><a href="#利用递归求1-n的阶乘" class="headerlink" title="利用递归求1~n的阶乘"></a>利用递归求1~n的阶乘</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123; <span class="comment">//结束条件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * fn(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><h2 id="利用递归遍历数据"><a href="#利用递归遍历数据" class="headerlink" title="利用递归遍历数据"></a>利用递归遍历数据</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们想要做输入id号,就可以返回的数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'家电'</span>,</span><br><span class="line">    goods: [&#123;</span><br><span class="line">        id: <span class="number">11</span>,</span><br><span class="line">        gname: <span class="string">'冰箱'</span>,</span><br><span class="line">        goods: [&#123;</span><br><span class="line">            id: <span class="number">111</span>,</span><br><span class="line">            gname: <span class="string">'海尔'</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">112</span>,</span><br><span class="line">            gname: <span class="string">'美的'</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        id: <span class="number">12</span>,</span><br><span class="line">        gname: <span class="string">'洗衣机'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'服饰'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//1.利用 forEach 去遍历里面的每一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getID</span>(<span class="params">json, id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    json.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(item); // 2个数组元素</span></span><br><span class="line">        <span class="keyword">if</span> (item.id == id) &#123;</span><br><span class="line">            <span class="comment">// console.log(item);</span></span><br><span class="line">            o = item;</span><br><span class="line">            <span class="comment">// 2. 我们想要得里层的数据 11 12 可以利用递归函数</span></span><br><span class="line">            <span class="comment">// 里面应该有goods这个数组并且数组的长度不为 0 </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.goods &amp;&amp; item.goods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            o = getID(item.goods, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p> <a href="https://wormnimaya.github.io/Promise/">promise和async/await</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element弹空标签问题</title>
      <link href="/element%E5%BC%B9%E7%A9%BA%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/"/>
      <url>/element%E5%BC%B9%E7%A9%BA%E6%A0%87%E7%AD%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43124082/article/details/84328327" target="_blank" rel="noopener">文章转自</a></p><h1 id="使用element的Message控件，页面刷新时弹出空的提示消息"><a href="#使用element的Message控件，页面刷新时弹出空的提示消息" class="headerlink" title="使用element的Message控件，页面刷新时弹出空的提示消息"></a>使用element的Message控件，页面刷新时弹出空的提示消息</h1><p>  使用element的Message控件时，引入Message后会有如下问题：<br>  <img src="https://img-blog.csdnimg.cn/20181121190624357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzEyNDA4Mg==,size_16,color_FFFFFF,t_70" alt=""></p><p>  如图所示：在页面刷新时，会有一条空的消息提示弹出</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p> 将<code>Vue.use(Message)</code>改为<code>Vue.component(Message.name, Message)</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现吸顶功能</title>
      <link href="/vue%E5%AE%9E%E7%8E%B0%E5%90%B8%E9%A1%B6%E5%8A%9F%E8%83%BD/"/>
      <url>/vue%E5%AE%9E%E7%8E%B0%E5%90%B8%E9%A1%B6%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="吸顶效果图"><a href="#吸顶效果图" class="headerlink" title="吸顶效果图"></a>吸顶效果图</h2><p> <img src="https://user-gold-cdn.xitu.io/2018/8/20/16556f9761db4bf4?imageslim" alt=""></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p> 通过监听页面的scroll事件，来得到页面的滚动距离，页面滚动距离大于要吸顶元素到顶端的距离后为元素添加固定定位的样式来实现吸顶效果。</p><h2 id="vue吸顶效果实现"><a href="#vue吸顶效果实现" class="headerlink" title="vue吸顶效果实现"></a>vue吸顶效果实现</h2><blockquote><p>需要给吸顶的元素一个宽度，否则固定定位后，宽度将是子元素撑开的的宽度，使吸顶变形</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-bar"</span> <span class="attr">:class</span>=<span class="string">"&#123;'is_fixed':isFixed&#125;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pro-title"</span>&gt;</span></span><br><span class="line">       &#123;&#123;title&#125;&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pro-param"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>概述<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>用户评价<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"buy"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     isFixed:<span class="literal">false</span> <span class="comment">//判断是否添加样式</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> mounted()&#123;</span><br><span class="line">   <span class="comment">// 监听scroll事件</span></span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,<span class="keyword">this</span>.initHeight)</span><br><span class="line"> &#125;,</span><br><span class="line"> methods:&#123;</span><br><span class="line">   <span class="comment">// 通过页面滚动距离判断是否添加固定定位样式</span></span><br><span class="line">   initHeight()&#123;</span><br><span class="line">     <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">     <span class="keyword">this</span>.isFixed = scrollTop &gt; <span class="number">152</span>? <span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> destroyed()&#123;</span><br><span class="line">   <span class="comment">// 取消scroll事件</span></span><br><span class="line">   <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>,<span class="keyword">this</span>.initHeight,<span class="literal">false</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  .nav-bar&#123;</span><br><span class="line">    height:70px;</span><br><span class="line">    line-height:70px;</span><br><span class="line">    border-top:1px solid $colorH;</span><br><span class="line">    background-color:$colorG;</span><br><span class="line">    z-index:10;</span><br><span class="line">    &amp;.is_fixed&#123;</span><br><span class="line">      position:fixed;</span><br><span class="line">      top:0;</span><br><span class="line">      width:100%;</span><br><span class="line">      box-shadow: 0 5px 5px $colorE;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建电影网站</title>
      <link href="/%E6%90%AD%E5%BB%BA%E7%94%B5%E5%BD%B1%E7%BD%91%E7%AB%99/"/>
      <url>/%E6%90%AD%E5%BB%BA%E7%94%B5%E5%BD%B1%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><strong>还在花钱购买vip追自己喜欢看的剧吗？ 还在为找不到电影资源苦恼吗？ 今天就让我们自己搭建一个电影网站吧！ 让我付费不可能的，永远是不可能的</strong></p><h2 id="什么是域名和虚拟主机"><a href="#什么是域名和虚拟主机" class="headerlink" title="什么是域名和虚拟主机"></a>什么是域名和虚拟主机</h2><p> 很多同学会有很大的疑问？ <strong>域名，虚拟主机</strong>，我靠什么是域名，虚拟主机又是什么，那我就给大家举个例子吧，让大家更容易理解，我们把互联网比作我们的世界，而虚拟主机就是我们的房子， 我们可以在虚拟主机里面搭建自己的网站项目，而域名就像是门牌号，有利于找到我们的家，也可以把域名理解为，我们访问的网址。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p> 这里我为大家准备了两种方案，各有利弊吧</p><ol><li><p><a href="https://www.freenom.com/zh/freeandpaiddomains.html" target="_blank" rel="noopener">免费域名</a>，但是这种操作比较麻烦，如果小伙伴们嫌麻烦， 可以选择第二种。</p><ul><li>这里我们需要一个美国代理，如果不知道代理的请自行百度，把代理模式切换成全局模式</li><li>然后大家注册freeom这个网站，并登录，这里我给大家提供一个，<a href="https://www.linshiyouxiang.net/" target="_blank" rel="noopener">临时邮箱</a>，便于大家注册，我们把他调成英文页面</li><li>我们在面板中点击 Partners -&gt; Developers<br><img src="../image/move1.png" alt=""><br><img src="../image/move2.png" alt=""></li><li>这样我们进入了注册页面，在鼠标点击的位置填写临时邮箱<br><img src="../image/move3.png" alt=""></li><li>我们可以在google中搜索ip，查看自己的ip地址是否在美国，如果不在，请开启美国全局代理(不懂代理的请自行百度)<br><img src="../image/move4.png" alt=""></li><li>我们打开<a href="https://www.linshiyouxiang.net/" target="_blank" rel="noopener">临时邮箱</a>，把临时邮箱的地址填写到注册页面上<br><img src="../image/move5.png" alt=""><br><img src="../image/move6.png" alt=""></li><li>进入上面的页面后，进入临时邮箱，点击，进入主页<br><img src="../image/move7.png" alt=""></li><li>我们再一次在面板中点击 Partners -&gt; Developers<br><img src="../image/move1.png" alt=""><br><img src="../image/move2.png" alt=""></li><li>这次他会出现填写个人信息的模块， 这里的信息必须是美国人的真实信息，这里我为大家提供了，一个<a href="http://www.shenfendaquan.com/" target="_blank" rel="noopener">美国人信息的网站</a><br><img src="../image/move8.png" alt=""></li><li>将美国人的信息填写到表格中，(注意电话号的-要去掉)<br><img src="../image/move9.png" alt=""></li><li>出现这个页面，恭喜你注册成功了<br><img src="../image/move10.png" alt=""></li><li>现在我们就可以注册域名了<br><img src="../image/move11.png" alt=""></li><li>在搜索框中填写自己想要的域名，如果填写查找需要费用，请重新搜索自己喜欢的域名<br><img src="../image/move12.png" alt=""><br><img src="../image/move13.png" alt=""></li><li>加入购物车，点击checkout<br><img src="../image/move14.png" alt=""></li><li>选择时长，然后点击continue<br><img src="../image/move15.png" alt=""></li><li><img src="../image/move16.png" alt=""></li><li>点击蓝色按钮<br><img src="../image/move17.png" alt=""></li><li>到我们的主页查看我们购买的域名<br><img src="../image/move18.png" alt=""></li><li>域名购买完成<br><img src="../image/move19.png" alt=""></li></ul></li><li><p>到阿里旗下的<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>，购买一个域名，我建议大家买一个域名，这样大家的网站也有个保障，毕竟是阿里的嘛！！！</p></li></ol><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><ol><li>这里推荐<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a><br>我在网上发现了一个文章写的特别好，<a href="https://zhuanlan.zhihu.com/p/82909515" target="_blank" rel="noopener">cloudflare使用入门教程，国外最好免费CDN</a>这里我就不自己写了</li></ol><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p> 下面用到的我分享到百度云盘中 链接：<a href="https://pan.baidu.com/s/1-NO_u3Lnrzm0uJE7Gi9VmQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1-NO_u3Lnrzm0uJE7Gi9VmQ</a><br> 提取码：7p9v</p><ol><li>这里我推荐<a href="https://www.cccyun.net/" target="_blank" rel="noopener">彩虹云</a>, 因为有免费服务，适合于新手，自己注册一个账号，购买免费的就好</li></ol><h2 id="开始建造网站"><a href="#开始建造网站" class="headerlink" title="开始建造网站"></a>开始建造网站</h2><p> 上面的准备工作做完了，我们终于可以建站了</p><ol><li><p>登录彩虹面板， 点击前往控制面板 -&gt; 一键登录控制面板<br><img src="../image/move20.png" alt=""></p></li><li><p>绑定解析域名</p><blockquote><p>注意：这里的域名是解析后的域名</p></blockquote><p><img src="../image/move21.png" alt=""></p></li><li><p>点击文件管理 -&gt; 在线文件管理器，点击wwwroot，进入wwwroot目录<br><img src="../image/move22.png" alt=""></p><ul><li>点击上传文件，上传苹果cmsv10<br><img src="../image/move23.png" alt=""></li><li>上传成功后，进行解压，<br><img src="../image/move24.png" alt=""></li><li>进入解压的文件，将里面的文件夹全部选中，点击剪切，复制到wwwroot文件目录中，如图：粘贴正确<br><img src="../image/move25.png" alt=""></li><li>点击wwwroot文件下的template目录，进入目录后，进行上传模板文件，然后解压<br><img src="../image/move26.png" alt=""></li><li>在浏览器地址输入自己的域名，出现如图，点击同意协议并安装系统 -&gt; 点击进行下一步<br><img src="../image/move27.png" alt=""></li><li>数据库配置（这里的数据库名称，账号，密码，在虚拟主机控制面板 -》 数据库链接信息）,填写好信息后，点击测试数据连接，-》 立即执行安装<br><img src="../image/move28.png" alt=""></li><li>这时候等待三秒后，页面会出现请将后台入口文件admin.php改名，防止黑客攻击，进入wwwroot文件目录，修改admin.php文件名字(注意不能叫index.php,目录中有一个文件index.php)</li><li>在浏览器地址栏中，自己的域名/刚才修改的文件名字.php,回车,填写信息进行登录，进入后台管理系统<br><img src="../image/move29.png" alt=""><br><img src="../image/move30.png" alt=""></li><li>点击系统 -》 网站参数配置 -》修改网站名称-》 修改网站模板(选择conch) -》手机模板(选择conch)配置好后，点击保存<br><img src="../image/move31.png" alt=""></li><li>首页 -》自定义菜单配置中填写如下，然后点击保存，刷新页面，左侧导航栏会出现一个海螺模板，自行配置(可以用默认配置)<br><code>海螺模板,/这里是你自己定义的文件名.php/admin/conch/theme.html</code></li><li>采集 -》自定义采集 -》添加(采集地址云盘中有) -》点击保存<br><img src="../image/move32.png" alt=""></li><li>点击资源站下面的链接, 进行绑定，绑定喜欢的资源后，点击采集所有，等待采集完毕<br><img src="../image/move33.png" alt=""></li><li>添加播放器，你进入你采集的网站里，下载相应的播放器，在视频 -》 播放器-》进行导入播放器，然后点击清理缓存(注意：必须视频采集完后，才能点击)<br><img src="../image/move34.png" alt=""></li><li>建造电影网站完毕</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> moive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue props用法详解</title>
      <link href="/Vue-props%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/Vue-props%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/89bd18e44e73" target="_blank" rel="noopener">本文转自Vue props用法详解</a></p><h1 id="Vue-props用法详解"><a href="#Vue-props用法详解" class="headerlink" title="Vue props用法详解"></a>Vue props用法详解</h1><p> 组件接受的选项之一 props 是 Vue 中非常重要的一个选项。父子组件的关系可以总结为：props down, events up<br> 父组件通过 props 向下传递数据给子组件；子组件通过 events 给父组件发送消息。</p><h1 id="父子级组件"><a href="#父子级组件" class="headerlink" title="父子级组件"></a>父子级组件</h1><p> 比如我们需要创建两个组件 parent 和 child。需要保证每个组件可以在相对隔离的环境中书写，这样也能提高组件的可维护性。</p><p> 这里我们先定义父子两个组件和一个 Vue 对象：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;childNode&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;child&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;child&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#example"</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    parent: parentNode</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">   &lt;parent&gt;&lt;<span class="regexp">/parent&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><br> 这里的 childNode 定义的 template 是一个 div，并且内容是”childNode”字符串。<br> 而在 parentNode 的 template 中定义了 div 的 class 名叫 parent 并且包含了两个 child 组件。</p><h1 id="静态-props"><a href="#静态-props" class="headerlink" title="静态 props"></a>静态 props</h1><p> 组件实例的作用域是孤立的。这意味着不能（也不应该）在子组件的模板中直接饮用父组件的数据。要让子组件使用父组件的数据，需要通过子组件的 props 选项。</p><p> 父组件向子组件传递数据分为两种方式：动态和静态，这里先介绍静态方式。</p><p> 子组件要显示的用 props 声明它期望获得的数据</p><p> 修改上例中的代码，给 childNode 添加一个 props 选项和需要的forChildMsg数据;<br> 然后在父组件中的占位符添加特性的方式来传递数据。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> childNode = &#123;</span><br><span class="line">   template: <span class="string">`</span></span><br><span class="line"><span class="string">         &lt;div&gt;</span></span><br><span class="line"><span class="string">           &#123;&#123;forChildMsg&#125;&#125;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">         `</span>,</span><br><span class="line">   props: [<span class="string">"for-child-msg"</span>]</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">   template: <span class="string">`</span></span><br><span class="line"><span class="string">         &lt;div&gt;</span></span><br><span class="line"><span class="string">           &lt;p&gt;parentNode&lt;/p&gt;</span></span><br><span class="line"><span class="string">           &lt;child for-child-msg="aaa"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">           &lt;child for-child-msg="bbb"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">         &lt;/div&gt;</span></span><br><span class="line"><span class="string">         `</span>,</span><br><span class="line">   components: &#123;</span><br><span class="line">     child: childNode</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>   对于 props 声明的属性，在父组件的 template 模板中，属性名需要使用中划线写法；</p><p>   子组件 props 属性声明时，使用小驼峰或者中划线写法都可以；而子组件的模板使用从父组件传来的变量时，需要使用对应的小驼峰写法。别担心，Vue 能够正确识别出小驼峰和下划线命名法混用的变量，如这里的forChildMsg和for-child-msg是同一值。</p><h1 id="动态-props"><a href="#动态-props" class="headerlink" title="动态 props"></a>动态 props</h1><p>  在模板中，要动态地绑定父组件的数据到子组件模板的 props，和绑定 Html 标签特性一样，使用v-bind绑定；</p><p>  基于上述静态 props 的代码，这次只需要改动父组件：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;p&gt;parentNode&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;child :for-child-msg="childMsg1"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;child :for-child-msg="childMsg2"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childMsg1: <span class="string">"Dynamic props msg for child-1"</span>,</span><br><span class="line">      childMsg2: <span class="string">"Dynamic props msg for child-2"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>  在父组件的 data 的 return 数据中的 childMsg1 和 childMsg2 会被传入子组件中</p><h1 id="props-验证"><a href="#props-验证" class="headerlink" title="props 验证"></a>props 验证</h1><p>  验证传入的 props 参数的数据规格，如果不符合数据规格，Vue 会发出警告。</p><blockquote><p>能判断的所有种类（也就是 type 值）有：String, Number, Boolean, Function, Object, Array, Symbol</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"example"</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测, null意味着任何类型都行</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是String</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">101</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组、默认值是一个工厂函数返回对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"propE default invoked."</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">"I am from propE."</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      isValid: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">"&lt;div&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">Number</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="parent"&gt;</span></span><br><span class="line"><span class="string">            &lt;child :for-child-msg="msg"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 当这里是字符串 "123456"时会报错</span></span><br><span class="line">      msg: <span class="number">123456</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  还可以在 props 定义的数据中加入自定义验证函数，当函数返回 false 时，输出警告。</p><p>  比如我们把上述例子中的 childNode 的for-child-msg修改成一个对象，并包含一个名叫validator的函数，该命名是规定叫validator的，自定义函数名不会生效。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">"&lt;div&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>  在这里我们给for-child-msg变量设置了validator函数，并且要求传入的值必须大于 100，否则报出警告。</p><h1 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h1><p>  props 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件五一修改父组件的状态。</p><p>  所以不应该在子组件中修改 props 中的值，Vue 会报出警告。<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> parentNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="parent"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;父组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="msg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;child :for-child-msg="msg"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    child: childNode</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">"default string."</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>  这里我们给父组件和子组件都有一个输入框，并且显示出父组件数据和子组件的数据。当我们在父组件的输入框输入新数据时，同步的子组件数据也被修改了；这就是 props 的向子组件传递数据。而当我们修改子组件的输入框时，浏览器的控制台则报出错误警告</p><blockquote><p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “forChildMsg”</p></blockquote><h1 id="修改-props-数据"><a href="#修改-props-数据" class="headerlink" title="修改 props 数据"></a>修改 props 数据</h1><ul><li><p>通常有两种原因：</p><ol><li>prop 作为初始值传入后，子组件想把它当做局部数据来用</li><li>prop 作为初始值传入后，由子组件处理成其他数据输出</li></ol></li><li><p>应对办法是</p><ol><li><p>定义一个局部变量，并用 prop 的值初始化它</p><p>但是由于定义的 ownChildMsg 只能接受 forChildMsg 的初始值，当父组件要传递的值变化发生时，ownChildMsg 无法收到更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">ownChildMsg</span>: <span class="keyword">this</span>.forChildMsg &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们加了一个&lt;p&gt;用于查看 ownChildMsg 数据是否变化，结果发现只有默认值传递给了 ownChildMsg，父组件改变只会变化到 forChildMsg，不会修改 ownChildMsg。</p></li><li><p>定义一个计算属性，处理 prop 的值并返回</p><p>由于是计算属性，所以只能显示值，不能设置值。我们这里设置的是一旦从父组件修改了 forChildMsg 数据，我们就把 forChildMsg 加上一个字符串”—ownChildMsg”，然后显示在屏幕上。这时是可以每当父组件修改了新数据，都会更新 ownChildMsg 数据的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ownChildMsg() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.forChildMsg + <span class="string">"---ownChildMsg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>更加妥帖的方式是使用变量存储 prop 的初始值，并用 watch 来观察 prop 值得变化。发生变化时，更新变量的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> childNode = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div class="child"&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">              &lt;span&gt;子组件数据&lt;/span&gt;</span></span><br><span class="line"><span class="string">              &lt;input v-model="forChildMsg"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&#123;&#123;forChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;ownChildMsg : &#123;&#123;ownChildMsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="string">"for-child-msg"</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ownChildMsg: <span class="keyword">this</span>.forChildMsg</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    forChildMsg() &#123;</span><br><span class="line">      <span class="keyword">this</span>.ownChildMsg = <span class="keyword">this</span>.forChildMsg;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的报错信息</title>
      <link href="/vue%E4%B8%AD%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/"/>
      <url>/vue%E4%B8%AD%E7%9A%84%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><ol><li>props:父组件向子组件传值问题，<code>属性或方法”showisFlag”不是在渲染上定义的实例,但被引用了。</code><br><strong>下面的大意是：属性或方法“ showisFlag”不是在实例上定义的，而被引用了。 通过初始化属性，确保该属性是反应性的，无论是在 data 选项中，还是在基于类的组件中。</strong><br>出现问题的地方有可能是父组件传值写错了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Property or method &quot;showisFlag&quot; is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. value</span><br></pre></td></tr></table></figure>Prop</li><li>props:子组件修改了父组件通过prop传过来的值<br><strong>避免直接修改prop，因为每当父组件重新呈现时，该值都会被覆盖。 替代，使用数据 或计算属性的基础上的prop的value。 Prop中“ btnCount” 被修改</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Avoid mutatproping a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop&#39;s value. Prop being mutated: &quot;btnCount&quot;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/flex%E5%B8%83%E5%B1%80/"/>
      <url>/flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="传统布局和flex布局对比"><a href="#传统布局和flex布局对比" class="headerlink" title="传统布局和flex布局对比"></a>传统布局和flex布局对比</h1><ol><li>传统布局<ul><li>兼容性好</li><li>布局繁琐</li><li>局限性，不能再移动端很好的布局</li></ul></li><li>flex布局<ul><li>操作方便，布局极其简单，移动端使用比较广泛</li><li>pc端浏览器支持情况比较差</li><li>IE11或更低版本不支持flex或仅支持部分</li></ul></li><li>建议<ul><li>如果是pc端页面布局，还是采用传统方式</li><li>如果是移动端或者是不考虑兼容的pc则采用flex</li></ul></li></ol><h1 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h1><ol><li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li><li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li><li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 </li><li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex<br>item），简称”项目”。<br><strong>总结</strong>：就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</li></ol><h1 id="父项常见属性"><a href="#父项常见属性" class="headerlink" title="父项常见属性"></a>父项常见属性</h1><ul><li>flex-direction：设置主轴的方向</li><li>justify-content：设置主轴上的子元素排列方式</li><li>flex-wrap：设置子元素是否换行</li><li>align-content：设置侧轴上的子元素的排列方式（多行）</li><li>align-items：设置侧轴上的子元素排列方式（单行）</li><li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li></ul><h2 id="flex-direction设置主轴的方向"><a href="#flex-direction设置主轴的方向" class="headerlink" title="flex-direction设置主轴的方向"></a>flex-direction设置主轴的方向</h2><ul><li>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法有 ： 行和列、x 轴和y轴</li><li>默认主轴方向就是 x 轴方向，水平向右</li><li>默认侧轴方向就是 y 轴方向，水平向下<br><img src="../image/flex1.jpg" alt=""></li><li>注意： 主轴和侧轴是会变化的，就看 flex-direction 设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的<br><img src="../image/flex2.jpg" alt=""></li></ul><h2 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a>justify-content 设置主轴上的子元素排列方式</h2><p>   <img src="../image/flex3.jpg" alt=""></p><h2 id="flex-wrap设置是否换行"><a href="#flex-wrap设置是否换行" class="headerlink" title="flex-wrap设置是否换行"></a>flex-wrap设置是否换行</h2><ul><li>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，flex布局中默认是不换行的。</li><li>nowrap 不换行</li><li>wrap 换行</li></ul><h2 id="align-items-设置侧轴上的子元素排列方式（单行）"><a href="#align-items-设置侧轴上的子元素排列方式（单行）" class="headerlink" title="align-items 设置侧轴上的子元素排列方式（单行）"></a>align-items 设置侧轴上的子元素排列方式（单行）</h2><ul><li>该属性是控制子项在侧轴（默认是y轴）上的排列方式  在子项为单项（单行）的时候使用</li><li>flex-start 从头部开始</li><li>flex-end 从尾部开始</li><li>center 居中显示</li><li>stretch 拉伸（注意：子元素不要给高度）</li></ul><h2 id="align-content-设置侧轴上的子元素的排列方式（多行）"><a href="#align-content-设置侧轴上的子元素的排列方式（多行）" class="headerlink" title="align-content  设置侧轴上的子元素的排列方式（多行）"></a>align-content  设置侧轴上的子元素的排列方式（多行）</h2><p>   设置子项在侧轴上的排列方式 并且只能用于子项出现 换行 的情况（多行），在单行下是没有效果的。<br>   <img src="../image/flex4.jpg" alt=""></p><h2 id="align-content-和align-items区别"><a href="#align-content-和align-items区别" class="headerlink" title="align-content 和align-items区别"></a>align-content 和align-items区别</h2><ul><li>align-items  适用于单行情况下， 只有上对齐、下对齐、居中和 拉伸</li><li>align-content适应于换行（多行）的情况下（单行情况下无效）， 可以设置 上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。 </li><li>总结就是单行找align-items  多行找 align-content</li></ul><h2 id="flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性"><a href="#flex-flow-属性是-flex-direction-和-flex-wrap-属性的复合属性" class="headerlink" title="flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性"></a>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性</h2>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-flow</span><span class="selector-pseudo">:row</span> <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure><h1 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h1><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p> <code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><ol><li>flex-grow决定flex items 如何扩展，可以设置任意非负数字（正小数、正数、0），默认值是0，当flex container 在主轴方向上有剩余的size时，flex-grow 属性才会有效</li><li>如果所有的 flex items 的 flex-grow 总和 sum 超过 1 ，每个 flex item 扩展的距离为 flex container 的剩余size * flex-grow / sum</li><li>如果所有 flex items 的 flex-grow 总和不超过 1， 每个 flex item 扩展距离为 flex container 的剩余 size * flex-grow</li></ol><h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p> <code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><ol><li>flex-shrink 决定了flex items 如何收缩,可以设置任意非负数字（正小数，正整数.0），默认但是1，当flex items 在主轴方向上超过了flex container 的size,flex-shrink 属性才会有效</li><li>如果所有flex items的flex-shrink 总和超过1，每个flex item 收缩的size为flex items 超出 flex container的size * 收缩比例/所有flex items 的收缩比例之和</li><li>如果所有flex items的flex-shrink 总和sum 不超过1，每个flex item 收缩的size为，flex items 超出flex container的size * item收缩比例</li></ol><h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><p> <code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><ol><li>flex-basis 用来设置 flex items 在主轴方向上的 item 的尺寸， auto(默认值）、具体的宽度数值（100px）</li><li>优先级： flex-basis &gt; 自身定义的width或height</li></ol><h2 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h2><p>  flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">   <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>flex是flex-grow || fex-shrink || flex-basis 的简写，flex属性可以指定1个，2个或3个值。</li><li>单值语法：值必须为以下其中之一:<ul><li>一个无单位数（&lt;number&gt;）：它会被当作&lt;flex-grow&gt;的值。</li><li>一个有效的宽度（width)值：它会被当作&lt;flex-basis&gt;的值。</li><li>关键字none，auto流Initial.</li></ul></li><li>双值语法：<ul><li>第一个值必须为一个无单位数，并且它会被当作&lt;flex-grow&gt;的值。</li><li>第二个值必须为以下之一：一个无单位数：它会被当作&lt;flex-shrink&gt;的值，一个有效的宽度值它会被当作&lt;flex-basis&gt;的值。</li></ul></li><li>三值语法：<ul><li>第一个值必须为一个无单位数，并且它会被当作&lt;flex-grow&gt;的值。</li><li>第二个值必须为一个无单位数，并且它会被当作&lt;flex-shrink&gt;的值。</li><li>第三个值必须为一个有效的宽度值，并且它会被当作&lt;flex-basis&gt;的值。</li></ul></li></ol><h2 id="align-self控制子项自己在侧轴上的排列方式"><a href="#align-self控制子项自己在侧轴上的排列方式" class="headerlink" title="align-self控制子项自己在侧轴上的排列方式"></a>align-self控制子项自己在侧轴上的排列方式</h2><p>   align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">     <span class="comment">/* 设置自己在侧轴上的排列方式 */</span></span><br><span class="line">     <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="order-属性定义项目的排列顺序"><a href="#order-属性定义项目的排列顺序" class="headerlink" title="order 属性定义项目的排列顺序"></a>order 属性定义项目的排列顺序</h2><p>   数值越小，排列越靠前，默认为0。<br>   注意：和 z-index 不一样。<br>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>width和height</title>
      <link href="/width%E5%92%8Cheight/"/>
      <url>/width%E5%92%8Cheight/</url>
      
        <content type="html"><![CDATA[<h2 id="width"><a href="#width" class="headerlink" title="width"></a>width</h2><ol><li>width的默认值是auto, 只要给块级元素设置了height值，没有设置width，子元素相对于父元素宽度自适应。(如果父元素启动flex布局，子元素没有设置宽度，子元素将不有auto的属性特征，而是为0)</li></ol><h2 id="height"><a href="#height" class="headerlink" title="height"></a>height</h2><ol><li>height的默认值是auto, 如果没有内容，则值为0。子div脱离文档流后不会撑起父div宽高。(如果父元素启动flex布局，子元素没有设置高度，也会继承父元素的高度)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mock设置</title>
      <link href="/mock%E8%AE%BE%E7%BD%AE/"/>
      <url>/mock%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="本地创建json"><a href="#本地创建json" class="headerlink" title="本地创建json"></a>本地创建json</h2><ol><li><p>在本地创建一个json文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"admin@51purse.com"</span>,</span><br><span class="line">    <span class="string">"phone"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"role"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"createTime"</span>: <span class="number">1479048325000</span>,</span><br><span class="line">    <span class="string">"updateTime"</span>: <span class="number">1479048325000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用数据接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求地址为login.jsonde</span></span><br><span class="line"> <span class="keyword">this</span>.axios.get(<span class="string">'/mock/user/login.json'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res) </span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>缺点</p><ul><li>接口开发完毕后，项目还需要改变接口代码</li></ul></li></ol><h2 id="easy-mock平台"><a href="#easy-mock平台" class="headerlink" title="easy-mock平台"></a>easy-mock平台</h2><ol><li>把接口布置到线上<a href="https://www.easy-mock.com/login" target="_blank" rel="noopener">easy-mock</a></li><li>调用数据接口<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">' https://www.easy-mock.com/mock/5ed0eef80a252f635207744b/example/login'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li><li>缺点<ul><li>虽然easy-mock平台，部署接口以后，不用再大量更改程序代码，但是由于是免费为我提供服务的，有时候会发生网络中断的现象，我们推荐<a href="https://wormnimaya.github.io/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEeasy-mock/">部署本地easy-mock</a></li></ul></li></ol><h2 id="集成Mock-API"><a href="#集成Mock-API" class="headerlink" title="集成Mock API"></a>集成Mock API</h2><ol><li>安装mockjs<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mockjs -D</span><br></pre></td></tr></table></figure></li><li>新建数据文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br><span class="line"></span><br><span class="line">Mock.mock(<span class="string">'/user/login'</span>, &#123;</span><br><span class="line">   <span class="string">"status"</span>: <span class="number">0</span>,</span><br><span class="line">   <span class="string">"data"</span>: &#123;</span><br><span class="line">     <span class="string">"id"</span>: <span class="number">12</span>,</span><br><span class="line">     <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">     <span class="string">"email"</span>: <span class="string">"admin@51purse.com"</span>,</span><br><span class="line">     <span class="string">"phone"</span>: <span class="literal">null</span>,</span><br><span class="line">     <span class="string">"role"</span>: <span class="number">0</span>,</span><br><span class="line">     <span class="string">"createTime"</span>: <span class="number">1479048325000</span>,</span><br><span class="line">     <span class="string">"updateTime"</span>: <span class="number">1479048325000</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在main.js配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mock = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(mock) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mock/api'</span>) </span><br><span class="line">  <span class="comment">// import在编译的时候就加载，require执行的时候才加载，这里适合用require</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>调用数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.axios.get(<span class="string">'/user/login'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue环境接口设置</title>
      <link href="/vue%E7%8E%AF%E5%A2%83%E6%8E%A5%E5%8F%A3%E8%AE%BE%E7%BD%AE/"/>
      <url>/vue%E7%8E%AF%E5%A2%83%E6%8E%A5%E5%8F%A3%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>开发上线的不同阶段， 需要不同的配置</p><ul><li><p>在src目录下创建一个env.js的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> baseURL; <span class="comment">// 不同阶段，url地址不同</span></span><br><span class="line"><span class="keyword">switch</span> (process.env.NODE_ENV) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'development'</span>:</span><br><span class="line">    baseURL = <span class="string">'http://dev-mall-pre.springboot.cn/api'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'test'</span>:</span><br><span class="line">    baseURL = <span class="string">'http://test-mall-pre.springboot.cn/api'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'prev'</span>:</span><br><span class="line">    baseURL = <span class="string">'http://prev-mall-pre.springboot.cn/api'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'prod'</span>:</span><br><span class="line">    baseURL = <span class="string">'http://mall-pre.springboot.cn/api'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    baseURL = <span class="string">'http://mall-pre.springboot.cn/api'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  baseURL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在packjson文件中配置mode</p><blockquote><p>注意： 在根目录创建.env.[mode]</p></blockquote><p>mode中自带三种阶段分别是development，test， production，如果想创建mode， 可以在根部以<code>.env.mode名称</code>形式创建配置文件，在配置文件中编辑NODE_ENV=’mode名称’，这样process.env.NODE_ENV就能取到设置的mode名称，例如：.env.prev在配置中NODE_ENV=’prev’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve --mode=test"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"vue-cli-service serve --mode=test"</span>,</span><br><span class="line">  <span class="string">"prev"</span>: <span class="string">"vue-cli-service serve --mode=prev"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"vue-cli-service build --mode=production"</span>,</span><br><span class="line">  <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在main.js中使用env.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> env <span class="keyword">from</span> <span class="string">'./env'</span></span><br><span class="line">axios.defaults.baseURL = env.baseURL; <span class="comment">// 不同阶段请求地址不同</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios接口拦截</title>
      <link href="/axios%E6%8E%A5%E5%8F%A3%E6%8B%A6%E6%88%AA/"/>
      <url>/axios%E6%8E%A5%E5%8F%A3%E6%8B%A6%E6%88%AA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/646ed4edf51f" target="_blank" rel="noopener">axios拦截器接口配置与使用</a><br><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h2> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios vue-axios -S</span><br></pre></td></tr></table></figure><h2 id="在main-js配置axios"><a href="#在main-js配置axios" class="headerlink" title="在main.js配置axios"></a>在main.js配置axios</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br><span class="line"><span class="comment">// 请求基本路径</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span></span><br><span class="line"><span class="comment">// 如果请求花费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">axios.defaults.timeout = <span class="number">8000</span></span><br><span class="line"><span class="comment">// 响应拦截</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = response.data</span><br><span class="line">  <span class="keyword">if</span> (res.status === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.status === <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">'/#/login'</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(res.msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storage的封装</title>
      <link href="/storage%E7%9A%84%E5%B0%81%E8%A3%85/"/>
      <url>/storage%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<ol><li>封装后的优势:<ul><li>一份数据储存在一个键值对中，便于数据的维护</li><li>封装的函数中实现了对象结构的存储<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  STORAGE_KEY = <span class="string">'mall'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="comment">// 存储值</span></span><br><span class="line">  setItem(key,value,module_name)&#123;</span><br><span class="line">    <span class="keyword">if</span> (module_name)&#123;</span><br><span class="line">      <span class="keyword">let</span> val = <span class="keyword">this</span>.getItem(module_name);</span><br><span class="line">      val[key] = value;</span><br><span class="line">      <span class="keyword">this</span>.setItem(module_name, val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> val = <span class="keyword">this</span>.getStorage();</span><br><span class="line">      val[key] = value;</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(STORAGE_KEY, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取某一个模块下面的属性user下面的userName</span></span><br><span class="line">  getItem(key,module_name)&#123;</span><br><span class="line">    <span class="keyword">if</span> (module_name)&#123;</span><br><span class="line">      <span class="keyword">let</span> val = <span class="keyword">this</span>.getItem(module_name);</span><br><span class="line">      <span class="keyword">if</span>(val) <span class="keyword">return</span> val[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getStorage()[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  getStorage()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.sessionStorage.getItem(STORAGE_KEY) || <span class="string">'&#123;&#125;'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  clear(key, module_name)&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="keyword">this</span>.getStorage();</span><br><span class="line">    <span class="keyword">if</span> (module_name)&#123;</span><br><span class="line">      <span class="keyword">if</span> (!val[module_name])<span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">delete</span> val[module_name][key];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">delete</span> val[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.sessionStorage.setItem(STORAGE_KEY, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie没有消失之谜</title>
      <link href="/cookie%E6%B2%A1%E6%9C%89%E6%B6%88%E5%A4%B1%E4%B9%8B%E8%B0%9C/"/>
      <url>/cookie%E6%B2%A1%E6%9C%89%E6%B6%88%E5%A4%B1%E4%B9%8B%E8%B0%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>在谷歌浏览器设置了会话cookie，关闭浏览器会话cookies还在，这是为什么那？</strong></p><ul><li>chrome浏览器的设置是“从上次停下的地方继续”。也就是说我关闭之后再打开会回到关闭之前的状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie、storage与session之间的区别</title>
      <link href="/cookie%E3%80%81storage%E4%B8%8Esession%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/cookie%E3%80%81storage%E4%B8%8Esession%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<table align="center"> <tr>  <td></td>  <td>cookie</td>  <td>localStorage</td>  <td>sessionStorage</td>  <td>session</td> </tr> <tr>  <td>存储方式</td>  <td colspan="4">都是key-value存储、同域名可用</td> </tr> <tr>  <td>存储位置</td>  <td>会话cookie储存在浏览器中、持久cookie储存在本地硬盘中</td>  <td>储存在本地硬盘中</td>  <td>储存在浏览器</td>  <td>服务端</td> </tr> <tr>  <td>特点</td>  <td>随请求头每次都进行提交</td>  <td>不随请求头提交，可长时间储存</td>  <td>不随请求头提交，页面关闭即失效</td>  <td>安全</td> </tr> <tr>  <td>是否可以跨页和跨域</td>  <td colspan="2">可跨页，不可跨域</td>  <td>不可跨页，不可跨域</td>  <td>可跨页，不可跨域</td> </tr></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie</title>
      <link href="/cookie/"/>
      <url>/cookie/</url>
      
        <content type="html"><![CDATA[<p>文章转自下面两篇文章<br><a href="https://juejin.im/post/5cbf0749e51d456e781f2023" target="_blank" rel="noopener">3分钟搞懂Cookie与Session</a><br><a href="https://www.jianshu.com/p/e66627122a3e" target="_blank" rel="noopener">本地存储之cookie和storage</a></p><h2 id="cookie存在的意义"><a href="#cookie存在的意义" class="headerlink" title="cookie存在的意义"></a>cookie存在的意义</h2><p>在这咱们就拿一个简单的登录来说，当用户来到我们的登录页面，输入用户名与密码后点击“登录”按钮之后，浏览器将页面上的认证信息通过POST给我们的服务器，当验证通过后，浏览器就会跳转到我们的主页面</p><p>那登录成功之后，我们的服务器又该如何验证用户在别的页面的访问权限呢？因为HTTP协议是无状态的，所以我们的服务器根本就没办法辨别刚刚验证通过的用户，现在发起的请求是不是通过了验证。</p><p>而我们又不能因为HTTP无状态，让用户在每次发起请求的时候，都要输一次账号密码验证，要真这样搞，我想咱家的网站距离倒闭的日子，指日可待啊</p><p>那总得想办法解决吧，最简单的方案就是所有的请求里都带上用户名与密码，虽然可行，但是大大的加大了我们服务器的负担，这回咱家公司是买服务器买倒闭的。。。<br>那么只要客户端或者服务器中保存着可以代表身份的信息，那这样我们就不需要每次都验证用户名与密码了，有了这个身份信息，我们就可以辨别，发起请求的用户是不是已经通过验证了，这就有了Cookie</p><p>总结： 因为Http协议无状态，在需要识别状态的时候，需要借助外力来辨别，而这个外力就是Cookie</p><h2 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h2><p> Cookie是存储在用户本地计算机上，用于保存一些用户操作的历史信息，当用户再次访问我们的服务器的时候，浏览器通过HTTP协议，将他们本地的Cookie内容也发到咱们服务器上，从而完成验证</p><p> Cookie又分为了会话Cookie与持久Cookie，要区分这两种类型，非常的简单，持久Cookie就是我们设置了它的过期时间，而没设置过期时间的，都属于会话Cookie，会话Cookie，当浏览器关闭后将会丢失，事实上这些cookie仅存储在内存中，而没有建立相应的硬盘文件。</p><h2 id="cookie的特点"><a href="#cookie的特点" class="headerlink" title="cookie的特点"></a>cookie的特点</h2><ul><li>cookie可能被禁用，当用户非常注重个人隐私保护时，他很可能禁用浏览器的cookie功能</li><li>发送http请求时会把cookie放在请求头中，服务器通过cookie来了解客户端状态</li><li>大小限制4k左右，低版本浏览器会有数量的限制</li><li>可以设置有效时间，超过时间就会消失</li><li>安全性不够高，所有的cookie都是以纯文本形式记录与文件中，因此保存用户名和密码等重要信息最好事先加密处理</li><li>有路径的概念，可以限制cookie在某个路径下</li><li>在同源窗口中都是共享的</li><li>cookie是与浏览器相关的，即使是同一个页面，不同浏览器之间所保存cookie的也不能相互访问的</li><li>每个cookie都是硬盘上的一个文件，因此很可能被用户删除</li></ul><h2 id="cookie使用"><a href="#cookie使用" class="headerlink" title="cookie使用"></a>cookie使用</h2><ol><li><p>设置cookie:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.cookie &#x3D; &quot;name&#x3D;aimi; age&#x3D;20;&quot;  &#x2F;* 存储多个名&#x2F;值对，用分号加空格（; ）隔开 *&#x2F;</span><br><span class="line"></span><br><span class="line">document.cookie&#x3D;&quot;str&#x3D;&quot;+escape(&quot;I love ajax&quot;); &#x2F;&#x2F; 使用escape()函数</span><br></pre></td></tr></table></figure></li><li><p>获取cookie:<br><strong>在cookie的名/值中不能使用分号、逗号、等号以及空格。</strong><br>在cookie的名中做到很容易，但在保存的值中是不确定的，所以用escape()函数进行编码，它能将一些特殊符号使用十六进制表示，例如空格将会编码为“20%”，从而可以存储cookie值中，而且使用此种方案还可以避免中文乱码的出现。在取出值后用unescape()进行解码就可以得到原来保存的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var strCookie &#x3D; document.cookie;</span><br><span class="line"></span><br><span class="line">var strCookie &#x3D; unescape(document.cookie); &#x2F;&#x2F; unescape()进行解码</span><br></pre></td></tr></table></figure></li><li><p>设置保存有效期：<br>没有设置时间的cookie都是单会话，当浏览器关闭后将会丢失，事实上这些cookie仅存储在内存中，而没有建立相应的硬盘文件。<br><strong>格式：document.cookie = “name=value; expiress=GMT_String”; /* GMT_String 是以GMT格式表示的时间字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var expiresDays &#x3D; 30; &#x2F;* 30天之后过期 *&#x2F;</span><br><span class="line">var data &#x3D; new Date().getTime()+expiresDays*24*3600*1000；</span><br><span class="line">document.cookie &#x3D; &quot;name&#x3D;aimi; expires&#x3D;&quot; + date.toGMTString();</span><br></pre></td></tr></table></figure></li><li><p>删除有效期cookie:<br>为了删除一个cookie，可以将其过期时间设定为一个过去的时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var date&#x3D;new Date();  &#x2F;&#x2F;获取当前时间</span><br><span class="line">date.setTime(date.getTime()-10000);  &#x2F;&#x2F;将date设置为过去的时间</span><br><span class="line">document.cookie&#x3D;&quot;userId&#x3D;828; expires&#x3D;&quot;+date.toGMTString(); &#x2F;&#x2F;将userId这个cookie删除</span><br></pre></td></tr></table></figure></li><li><p>指定cookie可访问的路径：</p><ul><li>默认情况下，如果在某个页面创建一个cookie,那么该页面所在目录中的其他页面也可以访问该cookie,如果这个目录下还有子目录，则在子目录中也可以访问。例如在<a href="http://www.xxxx.com/html/a.html中所创建的cookie，可以被www.xxxx.com/html/b.html或" target="_blank" rel="noopener">www.xxxx.com/html/a.html中所创建的cookie，可以被www.xxxx.com/html/b.html或</a> <a href="http://www.xxx.com/" target="_blank" rel="noopener">www.xxx.com/</a> html/ some/c.html所访问，但不能被<a href="http://www.xxxx.com/d.html访问。" target="_blank" rel="noopener">www.xxxx.com/d.html访问。</a></li><li>为了控制cookie可访问的目录，需要使用path参数设置cookie,<br>doment.cookie = “name=value; path=cookieDir”; 其中cookieDir表示可访问cookie的目录。例如：document.cookie=”userId=320; path=/shop”;就表示当前cookie仅能在shop目录下使用。<br>如果要使cookie在整个网站下可用，可以将cookie_dir指定为根目录。</li></ul></li><li><p>指定可访问cookie的主机名：<br>和 路径类似，主机名是指同一个域下的不同主机，例如：<a href="http://www.google.com和gmail.google.com就是两个不同的主机名。默认情况下，" target="_blank" rel="noopener">www.google.com和gmail.google.com就是两个不同的主机名。默认情况下，</a> 一个主机中创建的cookie在另一个主机下是不能被访问的，但可以通过domain参数来实现对其的控制，其语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;name&#x3D;value; domain&#x3D;cookieDomain&quot;;</span><br></pre></td></tr></table></figure><p>以google为例，要实现跨主机访问，可以写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;name&#x3D;value;domain&#x3D;.google.com&quot;;</span><br></pre></td></tr></table></figure><p>这样，所有google.com下的主机都可以访问该cookie。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地存储</title>
      <link href="/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
      <url>/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h2 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h2><ol><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，sessionStorage约5M、localStorage约20M</li><li>只能存储字符串，可以将对象JSON.stringify() 编码后存储</li></ol><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h2><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的形式存储使用<br>存储数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(key, value)</span><br></pre></td></tr></table></figure>获取数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key)</span><br></pre></td></tr></table></figure>删除数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure>清空数据：(所有都清除掉)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure></li></ol><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h2><ol><li>声明周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用<br>存储数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(key, value)</span><br></pre></td></tr></table></figure>获取数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(key)</span><br></pre></td></tr></table></figure>删除数据：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(key)</span><br></pre></td></tr></table></figure>清空数据：(所有都清除掉)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的命名视图</title>
      <link href="/vue%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE/"/>
      <url>/vue%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://router.vuejs.org/zh/guide/essentials/named-views.html" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>注意：components 不要写成 component</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-router的name属性</title>
      <link href="/vue-router%E7%9A%84name%E5%B1%9E%E6%80%A7/"/>
      <url>/vue-router%E7%9A%84name%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://router.vuejs.org/zh/guide/essentials/named-routes.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/user/:userId'</span>,</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li>可以用name传参 使用$router.name获取路由的name值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Current route name: &#123;&#123; $route.name &#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure></li><li>这跟代码调用 router.push() 是一回事：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.push(&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure>这两种方式都会把路由导航到 /user/123 路径。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;This is Home&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;This is Foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;This is Bar &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: __dirname,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">name</span>: <span class="string">'home'</span>, <span class="attr">component</span>: Home &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">name</span>: <span class="string">'foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/bar/:id'</span>, <span class="attr">name</span>: <span class="string">'bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div id="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Named Routes&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Current route name: &#123;&#123; $route.name &#125;&#125;&lt;/p&gt; </span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link :to="&#123; name: 'home' &#125;"&gt;home&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link :to="&#123; name: 'foo' &#125;"&gt;foo&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;router-link :to="&#123; name: 'bar', params: &#123; id: 123 &#125;&#125;"&gt;bar&lt;/router-link&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view class="view"&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件中的name属性</title>
      <link href="/vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84name/"/>
      <url>/vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84name/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/Uookic/article/details/80420472" target="_blank" rel="noopener">本文转自</a><br><a href="https://cn.vuejs.org/v2/api/#name" target="_blank" rel="noopener">官方文档</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在写vue项目的时候会遇到给组件命名，这里的name非必选项，看起来好像没啥用处，但是实际上这里用处还挺多的<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      name:<span class="string">'xxx'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="当项目使用keep-alive时，可搭配组件name进行缓存过滤"><a href="#当项目使用keep-alive时，可搭配组件name进行缓存过滤" class="headerlink" title="当项目使用keep-alive时，可搭配组件name进行缓存过滤"></a>当项目使用keep-alive时，可搭配组件name进行缓存过滤</h2><p>举个例子：我们有个组件命名为detail,其中dom加载完毕后我们在钩子函数mounted中进行数据加载<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name:&#39;Detail&#39;</span><br><span class="line">&#125;，</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.getInfo();</span><br><span class="line">&#125;，</span><br><span class="line">methods:&#123;</span><br><span class="line">  getInfo()&#123;</span><br><span class="line">          axios.get(&#39;&#x2F;xx&#x2F;detail.json&#39;,&#123;</span><br><span class="line">              params:&#123;</span><br><span class="line">                id:this.$route.params.id  </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;).then(this.getInfoSucc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>  因为我们在App.vue中使用了keep-alive导致我们第二次进入的时候页面不会重新请求，即触发mounted函数。<br>  有两个解决方案,一个增加activated()函数,每次进入新页面的时候再获取一次数据。<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt; </span><br><span class="line">  &lt;keep-alive exclude&#x3D;&quot;Detail&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;keep-alive&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></p><h2 id="DOM做递归组件时"><a href="#DOM做递归组件时" class="headerlink" title="DOM做递归组件时"></a>DOM做递归组件时</h2><p> 比如说detail.vue组件里有个list.vue子组件，递归迭代时需要调用自身name<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">div&gt;</span><br><span class="line">         &lt;div v-for&#x3D;&quot;(item,index) of list&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">             &lt;div&gt;</span><br><span class="line">                 &lt;span class&#x3D;&quot;item-title-icon&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                 &#123;&#123;item.title&#125;&#125;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">             &lt;div v-if&#x3D;&quot;item.children&quot; &gt;</span><br><span class="line">               &lt;detail-list :list&#x3D;&quot;item.children&quot;&gt;&lt;&#x2F;detail-list&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> export default &#123;</span><br><span class="line">     name:&#39;DetailList&#39;,&#x2F;&#x2F;递归组件是指组件自身调用自身</span><br><span class="line">     props:&#123;</span><br><span class="line">         list:Array</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> list数据：</span><br><span class="line">   const list &#x3D; [&#123;</span><br><span class="line">           &quot;title&quot;: &quot;A&quot;,</span><br><span class="line">           &quot;children&quot;: [&#123;</span><br><span class="line">             &quot;title&quot;: &quot;A-A&quot;,</span><br><span class="line">             &quot;children&quot;: [&#123;</span><br><span class="line">               &quot;title&quot;: &quot;A-A-A&quot;</span><br><span class="line">             &#125;]</span><br><span class="line">           &#125;,&#123;</span><br><span class="line">                 &quot;title&quot;: &quot;A-B&quot;</span><br><span class="line">           &#125;]</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">           &quot;title&quot;: &quot;B&quot;</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">           &quot;title&quot;: &quot;C&quot;</span><br><span class="line">         &#125;, &#123;</span><br><span class="line">           &quot;title&quot;: &quot;D&quot;</span><br><span class="line">         &#125;]</span><br></pre></td></tr></table></figure><br> 迭代的结果如下：<br> <img src="https://img-blog.csdn.net/20180523152904570?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvb2tpYw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><h2 id="当你用vue-tools时"><a href="#当你用vue-tools时" class="headerlink" title="当你用vue-tools时"></a>当你用vue-tools时</h2><p> vue-devtools调试工具里显示的组见名称是由vue中组件name决定的<br> <img src="https://img-blog.csdn.net/20180523153448582?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Vvb2tpYw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSBUILD : error MSB4132: 无法识别工具版本2.0。可用的工具版本为 14.0, 4.0。</title>
      <link href="/MSBUILD-error-MSB4132-%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC2-0%E3%80%82%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC%E4%B8%BA-14-0-4-0%E3%80%82/"/>
      <url>/MSBUILD-error-MSB4132-%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC2-0%E3%80%82%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC%E4%B8%BA-14-0-4-0%E3%80%82/</url>
      
        <content type="html"><![CDATA[<p>在报错的项目中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MSBUILD : error MSB4132: 无法识别工具版本“2.0”。可用的工具版本为 &quot;14.0&quot;, &quot;4.0&quot;</span><br><span class="line">PS E:\Project\nodejs\Study&gt; npm install --msvs_version 2015</span><br><span class="line">PS E:\Project\nodejs\Study&gt; npm config set msvs_version 2015 --global</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb</title>
      <link href="/mongodb/"/>
      <url>/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb数据库的安装"><a href="#mongodb数据库的安装" class="headerlink" title="mongodb数据库的安装"></a>mongodb数据库的安装</h2><ol><li><a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">官方下载地址</a></li><li>安装步骤<br><img src="https://img-blog.csdnimg.cn/20190627141817698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dpbGxpYW1fbXVuY2g=,size_16,color_FFFFFF,t_70" alt=""><br>这里我安装在C盘了，想改盘符的请自行百度<br><img src="https://img-blog.csdnimg.cn/20190627141927387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dpbGxpYW1fbXVuY2g=,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://mongoing.com/wp-content/uploads/2019/04/2.png" alt=""><br>下一步安装 “install mongoDB compass” 不勾选（当然你也可以选择安装它，可能需要更久的安装时间），MongoDB Compass 是一个图形界面管理工具，我们可以在后面自己到官网下载安装，下载地址：<a href="https://www.mongodb.com/download-center/compass。" target="_blank" rel="noopener">https://www.mongodb.com/download-center/compass。</a><br><img src="https://www.runoob.com/wp-content/uploads/2013/10/8F7AF133-BE49-4BAB-9F93-88A9D666F6C0.jpg" alt=""></li><li>配置环境变量<ul><li>找到mongodb中的bin文件夹复制路径，把复制的路径粘贴到环境变量的path中</li></ul></li><li>配置mongodb<ul><li>在c盘建一个data文件夹，在data文件夹中建一个db文件夹(这个文件以后会存储数据库)</li></ul></li><li>测试安装是否成功<br>在cmd命令行中输入mongo -&gt; db -&gt; test 出现下面界面证明配置成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\33448&gt; mongo</span><br><span class="line">MongoDB shell version v4.2.6</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;?compressors&#x3D;disabled&amp;gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;129b3153-3c59-4048-a7e9-aa447d3aa587&quot;) &#125;</span><br><span class="line">MongoDB server version: 4.2.6</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2020-05-24T08:05:05.788+0800 I  CONTROL  [initandlisten]</span><br><span class="line">2020-05-24T08:05:05.788+0800 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2020-05-24T08:05:05.788+0800 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2020-05-24T08:05:05.788+0800 I  CONTROL  [initandlisten]</span><br><span class="line">---</span><br><span class="line">Enable MongoDB&#39;s free cloud-based monitoring service, which will then receive and display</span><br><span class="line">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><br><span class="line"></span><br><span class="line">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><br><span class="line">and anyone you share the URL with. MongoDB may use this information to make product</span><br><span class="line">improvements and to suggest MongoDB products and deployment options to you.</span><br><span class="line"></span><br><span class="line">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><br><span class="line">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; db</span><br><span class="line">test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地配置easy-mock</title>
      <link href="/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEeasy-mock/"/>
      <url>/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEeasy-mock/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> <img src="https://img-blog.csdnimg.cn/2019062709583191.png" alt=""></p><blockquote><p>这里我用的node.js是8.9.0</p></blockquote><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p> 这个很简单直接<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官方直接下载</a>，直接下一步，下一步傻瓜式安装，这里建议使用node(8.9.0)</p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><p> 可以借鉴我的<a href="https://wormnimaya.github.io/mongodb/">另一篇文章</a></p><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><p> <a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">官方下载</a>, 下载Redis-x64-3.2.100.zip，解压到本地，这里我解压到D盘</p><ol><li>添加环境变量<br>把<code>D:\Redis-x64-3.2.100</code>添加到环境变量path中</li><li>创建服务<br>cmd下<code>redis-server redis.windows.conf</code></li><li>如果报bind: No error错，则cmd上依次执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe</span><br><span class="line">shutdown</span><br><span class="line">exit</span><br><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure>这时候出来一个图安装正确：<br><img src="https://www.runoob.com/wp-content/uploads/2014/11/redis-install1.png" alt=""></li><li>cmd中注册服务：<br><code>redis-server --service-install redis.windows-service.conf --loglevel verbose</code></li><li>启动服务<br><code>redis-server --service-start</code></li><li>测试是否配置成功<br>在cmd命令行执行如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br><span class="line">set myKey abc</span><br><span class="line">get myKey</span><br></pre></td></tr></table></figure><img src="https://www.runoob.com/wp-content/uploads/2014/11/redis-install2.jpg" alt=""></li></ol><h2 id="安装部署Easy-Mock"><a href="#安装部署Easy-Mock" class="headerlink" title="安装部署Easy-Mock"></a>安装部署Easy-Mock</h2><ol><li><p>首先要全局安装两个库<br><code>npm i -g cross-env pm2</code></p></li><li><p>克隆github上的easy-mock<br><code>git clone https://github.com/easy-mock/easy-mock.git</code></p></li><li><p>配置文件<br>找到 config/default.json，或者创建一个 config/local.json 文件，将如下需要替换的字段换成自己的配置即可。(默认是不需要修改配置文件的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;port&quot;: 7300,&#x2F;&#x2F;easymock项目启动的端口</span><br><span class="line">  &quot;host&quot;: &quot;localhost&quot;, &#x2F;&#x2F;这里我改成了loacalhost</span><br><span class="line">  &quot;pageSize&quot;: 30,</span><br><span class="line">  &quot;proxy&quot;: false,</span><br><span class="line">  &quot;db&quot;: &quot;mongodb:&#x2F;&#x2F;localhost&#x2F;easy-mock&quot;,&#x2F;&#x2F; 不需要自己新建数据库，在启动的easymock新建接口即可</span><br><span class="line">  &quot;unsplashClientId&quot;: &quot;&quot;,</span><br><span class="line">  &quot;redis&quot;: &#123;</span><br><span class="line">    &quot;port&quot;: 6379,&#x2F;&#x2F;redis端口</span><br><span class="line">    &quot;host&quot;: &quot;localhost&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;blackList&quot;: &#123;</span><br><span class="line">    &quot;projects&quot;: [], &#x2F;&#x2F; projectId，例：&quot;5a4495e16ef711102113e500&quot;</span><br><span class="line">    &quot;ips&quot;: [] &#x2F;&#x2F; ip，例：&quot;127.0.0.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rateLimit&quot;: &#123; &#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;koajs&#x2F;ratelimit</span><br><span class="line">    &quot;max&quot;: 1000,</span><br><span class="line">    &quot;duration&quot;: 1000</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;jwt&quot;: &#123;</span><br><span class="line">    &quot;expire&quot;: &quot;14 days&quot;,</span><br><span class="line">    &quot;secret&quot;: &quot;shared-secret&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;upload&quot;: &#123;</span><br><span class="line">    &quot;types&quot;: [&quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.png&quot;, &quot;.gif&quot;, &quot;.json&quot;, &quot;.yml&quot;, &quot;.yaml&quot;],</span><br><span class="line">    &quot;size&quot;: 5242880,</span><br><span class="line">    &quot;dir&quot;: &quot;..&#x2F;public&#x2F;upload&quot;,</span><br><span class="line">    &quot;expire&quot;: &#123;</span><br><span class="line">      &quot;types&quot;: [&quot;.json&quot;, &quot;.yml&quot;, &quot;.yaml&quot;],</span><br><span class="line">      &quot;day&quot;: -1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fe&quot;: &#123;</span><br><span class="line">    &quot;copyright&quot;: &quot;&quot;,</span><br><span class="line">    &quot;storageNamespace&quot;: &quot;easy-mock_&quot;,</span><br><span class="line">    &quot;timeout&quot;: 25000,</span><br><span class="line">    &quot;publicPath&quot;: &quot;&#x2F;dist&#x2F;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>进入你的easy mock文件夹<br>在cmd中执行<code>npm install 和 npm run dev</code><br>如果执行npm install 出现<strong>MSBUILD : error MSB4132: 无法识别工具版本“2.0”。可用的工具版本为 “14.0”, “4.0”。</strong><br><a href="https://wormnimaya.github.io/MSBUILD-error-MSB4132-%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC2-0%E3%80%82%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%89%88%E6%9C%AC%E4%B8%BA-14-0-4-0%E3%80%82/">解决版办法</a></p></li><li><p>进入根目录进行打包<br><code>npm run build</code></p></li><li><p>在项目目录下使用pm2守护运行：<br><code>cross-env NODE_ENV=production pm2 start app.js</code><br>这时候访问本地的 <a href="http://localhost:7300/" target="_blank" rel="noopener">http://localhost:7300/</a> 就可以打开Easy-Mock页面了，跟Easy-Mock官网一样的~</p><blockquote><p>参考文章:  <a href="https://blog.csdn.net/william_munch/article/details/93848117" target="_blank" rel="noopener">windows本地安装部署 Easy Mock</a> <a href="https://juejin.im/post/5b9b6f79e51d450e6e039766" target="_blank" rel="noopener">windows本地安装部署 Easy Mock</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuecli3代理跨域</title>
      <link href="/vuecli3%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F/"/>
      <url>/vuecli3%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="在vue-cli的根目录创建vue-config-js文件"><a href="#在vue-cli的根目录创建vue-config-js文件" class="headerlink" title="在vue-cli的根目录创建vue.config.js文件"></a>在vue-cli的根目录创建vue.config.js文件</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">//允许访问的域名</span></span><br><span class="line">    port: <span class="number">8080</span>, <span class="comment">// 配置端口号</span></span><br><span class="line">    proxy: &#123;<span class="literal">true</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'https://www.imooc.com'</span>, <span class="comment">// 要访问的目的地址</span></span><br><span class="line">        secure: <span class="literal">false</span>, <span class="comment">// 访问的目的地址是https必须设置为true</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'/api'</span>: <span class="string">''</span> <span class="comment">// 重写路径</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios进行跨域访问"><a href="#axios进行跨域访问" class="headerlink" title="axios进行跨域访问"></a>axios进行跨域访问</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/api/activity/servicetime'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res.data)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p> <a href="https://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">linux/Mac的方法</a><br> 在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：<br> <a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a><br> <img src="https://oscimg.oschina.net/oscnet/118701a4510c201f74f1d78f0e06d618ca4.jpg" alt=""><br> 傻瓜式下一步，完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。在开始菜单里找到”Git”-&gt;”Git Bash”，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。</p><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><ol><li><p>用户信息<br>配置个人的用户名称和电子邮件地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;runoob&quot;</span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure><p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p></li><li><p>查看git配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>git免密码登录<br>登录一次密码后，用下面命令行记住密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></li></ol><h2 id="vscode中使用git"><a href="#vscode中使用git" class="headerlink" title="vscode中使用git"></a>vscode中使用git</h2><ol><li><p>vscode中进行git配置<br>在vscode中点击文件 -&gt; 首选项 -&gt; 设置 -&gt; 在搜索栏中搜索git.path -&gt; 打开下方的setting.json文件填写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;git.path&quot;: &quot;git.exe所在目录地址&quot;</span><br></pre></td></tr></table></figure></li><li><p>vscode中添加插件 Git History Diff</p></li><li><p>在vscode的操做git</p><ul><li>上传到github<br><img src="../image/git1.png" alt=""><br><img src="../image/git2.png" alt=""></li><li>创建分支<br><img src="../image/git3.png" alt=""><br><img src="../image/git4.png" alt=""><br><img src="../image/git5.png" alt=""></li></ul></li><li><p>合并分支<br>把分支合并过来</p><ul><li>切换到想合并别人的分支上，按下键盘crtl+ shift + p, 选择合并分支，选择要合并的分支<br><img src="../image/git8.png" alt=""><br><img src="../image/git6.png" alt=""><br><img src="../image/git7.png" alt=""><br><img src="../image/git9.png" alt=""></li></ul></li><li><p>冲突</p><ul><li>当我们提交遇到冲突时<br><img src="../image/git10.png" alt=""><br>解决后在进行提交</li></ul></li><li><p>git基本命令<br><img src="../image/git11.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/nvm/"/>
      <url>/nvm/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm的安装"><a href="#nvm的安装" class="headerlink" title="nvm的安装"></a>nvm的安装</h2><p>  <a href="https://juejin.im/post/5d89cf27f265da0390057013" target="_blank" rel="noopener">文章转自</a><br>  如果你想长期做 node 开发, 或者想快速更新 node 版本, 或者想快速切换 node 版本,那就使用 nvm 来安装你的 node 开发环境, 保持系统的干净.<br>  <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm下载地址</a><br>  window用户直接选择 nvm-setup.zip 下载安装</p><blockquote><p>如果本地已经安装了node，要先卸载node再安装nvm</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ nvm -v &#x2F;&#x2F;检查nvm是否安装成功, 如果出现下面的命令，安装完成</span><br><span class="line">&#x2F;*</span><br><span class="line">Running version 1.1.7.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  nvm arch                     : Show if node is running in 32 or 64 bit mode.</span><br><span class="line">  nvm install &lt;version&gt; [arch] : The version can be a node.js version or &quot;latest&quot; for the latest stable version.</span><br><span class="line">                                Optionally specify whether to install the 32 or 64 bit version (defaults to system arch).</span><br><span class="line">                                Set [arch] to &quot;all&quot; to install 32 AND 64 bit versions.</span><br><span class="line">                                Add --insecure to the end of this command to bypass SSL validation of the remote download server.</span><br><span class="line">  nvm list [available]         : List the node.js installations. Type &quot;available&quot; at the end to see what can be installed. Aliased as ls.</span><br><span class="line">  nvm on                       : Enable node.js version management.</span><br><span class="line">  nvm off                      : Disable node.js version management.</span><br><span class="line">  nvm proxy [url]              : Set a proxy to use for downloads. Leave [url] blank to see the current proxy.</span><br><span class="line">                                Set [url] to &quot;none&quot; to remove the proxy.</span><br><span class="line">  nvm node_mirror [url]        : Set the node mirror. Defaults to https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;. Leave [url] blank to use default url.</span><br><span class="line">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https:&#x2F;&#x2F;github.com&#x2F;npm&#x2F;cli&#x2F;archive&#x2F;. Leave [url] blank to default url.</span><br><span class="line">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class="line">  nvm use [version] [arch]     : Switch to use the specified version. Optionally specify 32&#x2F;64bit architecture.</span><br><span class="line">                                nvm use &lt;arch&gt; will continue using the selected version, but switch to 32&#x2F;64 bit mode.</span><br><span class="line">  nvm root [path]              : Set the directory where nvm should store different versions of node.js.</span><br><span class="line">                                If &lt;path&gt; is not set, the current root will be displayed.</span><br><span class="line">  nvm version                  : Displays the current running version of nvm for Windows. Aliased as v.</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h2 id="使用nvm安装node"><a href="#使用nvm安装node" class="headerlink" title="使用nvm安装node"></a>使用nvm安装node</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nvm -h //查看nvm的指令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm list //查看本地已经安装的node版本列表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm list available //查看可以安装的node版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm install latest //安装最新版本的node</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm install [version][arch] //安装指定版本的node 例如：nvm install 10.16.3 安装node v10.16.3 arch表示电脑的位数 如果电脑需要安装32位的， 则运行：nvm install 10.16.3 32， nvm install 10.16.x 表示安装本版本最高</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm use [version] //使用node 例如：nvm use 10.16.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nvm uninstall [version] //卸载node</span></span><br></pre></td></tr></table></figure><h2 id="镜像设置"><a href="#镜像设置" class="headerlink" title="镜像设置"></a>镜像设置</h2><p> 在使用nvm安装node的过程中如果速度太慢的话，可以设置改用淘宝的镜像地址在nvm安装目录下的setting.txt文件中加入以下代码<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async和await</title>
      <link href="/async%E5%92%8Cawait/"/>
      <url>/async%E5%92%8Cawait/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">function readFile(fileName) &#123;</span><br><span class="line">  return new Promise(function (resolve, reject) &#123;</span><br><span class="line">    fs.readFile(fileName, function(error, data) &#123;</span><br><span class="line">      if (error) return reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">async function asyncReadFile () &#123;</span><br><span class="line">  &#x2F;&#x2F; 这个f1的值就是reslove(data)中data值</span><br><span class="line">  const f1 &#x3D; await readFile(&#39;&#x2F;etc&#x2F;fstab&#39;); </span><br><span class="line">  const f2 &#x3D; await readFile(&#39;&#x2F;etc&#x2F;shells&#39;);</span><br><span class="line">  console.log(f1.toString());</span><br><span class="line">  console.log(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line">asyncReadFile()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/Promise/"/>
      <url>/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="promise的概念"><a href="#promise的概念" class="headerlink" title="promise的概念"></a>promise的概念</h2><ol><li>Promise 是一个 构造函数，既然是构造函数， 那么，我们就可以  new Promise() 得到一个 Promise 的实例；</li><li>在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数） 和 reject（失败之后的回调函数）</li><li>在 Promise 构造函数的 Prototype 属性上，有一个 .then() 方法，也就说，只要是 Promise 构造函数创建的实例，都可以访问到 .then() 方法</li><li>Promise 表示一个 异步操作；每当我们 new 一个 Promise 的实例，这个实例，就表示一个具体的异步操作；</li><li>既然 Promise 创建的实例，是一个异步操作，那么，这个 异步操作的结果，只能有两种状态：<ul><li>状态1： 异步执行成功了，需要在内部调用 成功的回调函数 resolve 把结果返回给调用者；</li><li>状态2： 异步执行失败了，需要在内部调用 失败的回调函数 reject 把结果返回给调用者；</li><li>由于 Promise 的实例，是一个异步操作，所以，内部拿到 操作的结果后，无法使用 return 把操作的结果返回给调用者； 这时候，只能使用回调函数的形式，来把 成功 或 失败的结果，返回给调用者；</li></ul></li><li>我们可以在 new 出来的 Promise 实例上，调用 .then() 方法，【预先】 为 这个 Promise 异步操作，指定 成功（resolve） 和 失败（reject） 回调函数；</li></ol><h2 id="promise的演变"><a href="#promise的演变" class="headerlink" title="promise的演变"></a>promise的演变</h2><p>  这是一个具体的异步操作，其中，使用 function 指定一个具体的异步操作<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var promise &#x3D; new Promise(function()&#123;</span><br><span class="line">  &#x2F;&#x2F; 这个 function 内部写的就是具体的异步操作！！！</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol><li>每当 new 一个 Promise 实例的时候，就会立即 执行这个 异步操作中的代码也就是说，new 的时候，除了能够得到 一个 promise 实例之外，还会立即调用 我们为 Promise 构造函数传递的那个 function，执行这个 function 中的 异步操作代码；<blockquote><p>问题：我们不想那样，我们想要的是什么时候需要调用，才调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./files/2.txt'</span>, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="built_in">console</span>.log(dataStr)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>解决方案，把他封装成一个函数的形式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>调动封装的Promise的函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// then中的第一个函数传递给reslove, 第二函数传递给reject</span></span><br><span class="line"> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data + <span class="string">'-------'</span>) </span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Promise解决回调地域"><a href="#Promise解决回调地域" class="headerlink" title="Promise解决回调地域"></a>Promise解决回调地域</h2><ol><li>定义Promise函数<ul><li>通过 .then 指定 回调函数的时候，成功的 回调函数，必须传，但是，失败的回调，可以省略不传<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;)</span><br><span class="line"></span><br><span class="line">function getFileByPath(fpath) &#123;</span><br><span class="line">  return new Promise(function (resolve, reject) &#123;</span><br><span class="line">    fs.readFile(fpath, &#39;utf-8&#39;, (err, dataStr) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">      if (err) return reject(err)</span><br><span class="line">      resolve(dataStr)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>调用promise对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getFileByPath(<span class="string">'./files/11.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件2</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>) </span><br><span class="line">    <span class="comment">// 不管进入reject或者resolve中，都要返回一个promise对象</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Promise的异常处理"><a href="#Promise的异常处理" class="headerlink" title="Promise的异常处理"></a>Promise的异常处理</h2><p> 1.当 我们有这样的需求： 哪怕前面的 Promise 执行失败了，但是，不要影响后续 promise 的正常执行，此时，我们可以单独为 每个 promise，通过 .then 指定一下失败的回调；<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">getFileByPath(<span class="string">'./files/11.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件2</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是失败的结果：'</span> + err.message)</span><br><span class="line">    <span class="comment">// return 一个 新的 Promise</span></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/2.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><br> 2. 有时候，我们有这样的需求，上面的需求刚好相反：如果 后续的Promise 执行，依赖于 前面 Promise 执行的结果，如果前面的失败了，则后面的就没有继续执行下去的意义了，此时，我们想要实现，一旦有报错，则立即终止所有 Promise的执行；<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getFileByPath(&#39;.&#x2F;files&#x2F;1.txt&#39;)</span><br><span class="line">  .then(function (data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 读取文件2</span><br><span class="line">    return getFileByPath(&#39;.&#x2F;files&#x2F;22.txt&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line"></span><br><span class="line">    return getFileByPath(&#39;.&#x2F;files&#x2F;3.txt&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(function (data) &#123;</span><br><span class="line">    console.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (err) &#123; &#x2F;&#x2F; catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常；</span><br><span class="line">    console.log(&#39;这是自己的处理方式：&#39; + err.message)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h2 id="jQuery中也为我们封装了Promise"><a href="#jQuery中也为我们封装了Promise" class="headerlink" title="jQuery中也为我们封装了Promise"></a>jQuery中也为我们封装了Promise</h2> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">   &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取数据"</span> id=<span class="string">"btn"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script src=<span class="string">"./node_modules/jquery/dist/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     $(function () &#123;</span></span><br><span class="line"><span class="regexp">       $('#btn').on('click', function () &#123;</span></span><br><span class="line"><span class="regexp">         $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">           url: './</span>data.json<span class="string">',</span></span><br><span class="line"><span class="string">           type: '</span><span class="keyword">get</span>',</span><br><span class="line">           dataType: 'json'</span><br><span class="line">         &#125;)</span><br><span class="line">           .then(function (data) &#123;</span><br><span class="line">             <span class="built_in">console</span>.log(data)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>  Promise.resolve(value) 类似的静态方法，是 <code>new Promise()</code> 方法中<code>resolve</code>的快捷方式, 方法 <code>Promise.resolve(value)</code> 的返回值也是一个 <code>Promise</code> 对象，所以我们可以像下面那样接着对其返回值进行 <code>.then</code>调用。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">42</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p> <code>Promise.reject(error)</code>，是 <code>new Promise()</code> 方法中<code>reject</code>的快捷方式。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p> <code>Promise.all(promiseArray)</code>方法是<code>Promise</code>对象上的静态方法，该方法的作用是将多个<code>Promise</code>对象实例包装，生成并返回一个新的<code>Promise</code>实例。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    p2 = <span class="built_in">Promise</span>.resolve(<span class="number">2</span>),</span><br><span class="line">    p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br> 在上面的方法中，<code>promise</code>数组中所有的<code>promise</code>实例都变为<code>resolve</code>的时候，该方法才会返回，并将所有结果传递<code>results数组</code>中。<code>promise</code>数组中任何一个<code>promise</code>为<code>reject</code>的话，则整个<code>Promise.all</code>调用会立即终止，并返回一个<code>reject</code>的新的<code>promise</code>对象。<code>reject</code>使用示例如下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    p2 = <span class="built_in">Promise</span>.reject(<span class="number">2</span>),</span><br><span class="line">    p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//then方法不会被执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(results); </span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//catch方法将会被执行，输出结果为：2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>需要特别注意的是，<code>Promise.all</code>获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的,这带来了一个绝大的好处：在前端开发请求数据的过程中，偶尔会遇到发送多个请求并根据请求顺序获取和使用数据的场景，使用Promise.all毫无疑问可以解决这个问题。</p></blockquote><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p> 顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'success'</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">'failed'</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)  <span class="comment">// 打开的是 'failed'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><p> <code>Promise.allSettled</code>跟<code>Promise.all</code>类似, 其参数接受一个<code>Promise</code>的数组, 返回一个新的<code>Promise</code>, 唯一的不同在于, 其不会进行短路, 也就是说当<code>Promise</code>全部处理完成后我们可以拿到每个<code>Promise</code>的状态, 而不管其是否处理成功.<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>),</span><br><span class="line">    p2 = <span class="built_in">Promise</span>.reject(<span class="number">2</span>),</span><br><span class="line">    p3 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//then方法不会被执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><p> 不管最后状态如何都会执行的回调函数。</p><p> <code>Promise.prototype.finally()</code> 方法返回一个<code>Promise</code>，在<code>promise</code>执行结束时，无论结果是<code>fulfilled</code>或者是<code>rejected</code>，在执行<code>then()</code>和<code>catch()</code>后，都会执行<code>finally</code>指定的回调函数。这为无论结果是<code>fulfilled</code>还是<code>rejected</code>都需要执行的代码提供了一种方式，避免同样的语句需要在<code>then()</code>和<code>catch()</code>中各写一次的情况。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment">// reject('fail')</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><p> 首先，我们使用 <code>async</code> 关键字，把它放在函数声明之前，使其成为 <code>async function</code>。异步函数是一个知道怎样使用 <code>await</code> </p><ol><li><code>async</code>放在函数声明之前, 然后调用该函数会返回一个 <code>promise</code>。这是异步函数的特征之一 —— 它保证函数的返回值为 <code>promise。</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Hello"</span> &#125;;</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure><ul><li>要实际使用promise完成时返回的值，我们可以使用.then()块，因为它返回的是 promise：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello().then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure></li></ul></li><li>当 <code>await</code> 关键字与异步函数一起使用时，它的真正优势就变得明显了 —— 事实上， <strong>await 只在异步函数里面才起作用</strong>。它可以放在任何异步的，基于 <code>promise</code> 的函数之前。它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> greeting = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hello().then(alert);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/learn/JavaScript/%E5%BC%82%E6%AD%A5/Async_await" target="_blank" rel="noopener">推荐async/await 基础</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fetch</title>
      <link href="/fetch/"/>
      <url>/fetch/</url>
      
        <content type="html"><![CDATA[<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><ol><li>这种功能以前是使用 XMLHttpRequest 实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#39;http:&#x2F;&#x2F;39.106.32.91:3000&#x2F;api&#x2F;getlunbo&#39;)</span><br><span class="line">  .then(response &#x3D;&gt; &#123; &#x2F;&#x2F; 通过 fetch 请求的结果，如果成功了，则第一个 .then中拿不到最终的数据</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; 调用 response.json() 得到一个新的 Promise 对象</span><br><span class="line">    return response.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(data &#x3D;&gt; &#123; &#x2F;&#x2F; 第二个.then中得到的才是真实的 数据</span><br><span class="line">    console.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6的import和export和export default</title>
      <link href="/Es6%E7%9A%84export%E5%92%8Cexport-default/"/>
      <url>/Es6%E7%9A%84export%E5%92%8Cexport-default/</url>
      
        <content type="html"><![CDATA[<h2 id="es6的导入导出"><a href="#es6的导入导出" class="headerlink" title="es6的导入导出"></a>es6的导入导出</h2><ol><li><p>ES6中导入模块，使用   <code>import 模块名称 from &#39;模块标识符&#39;</code>    <code>import &#39;表示路径&#39;</code></p></li><li><p>在 ES6 中，使用 <code>export default</code> 和 <code>export</code> 向外暴露成员：</p><ul><li>export default 向外暴露的成员，可以使用任意的变量来接收</li><li>在一个模块中，export default 只允许向外暴露1次</li><li>在一个模块中，可以同时使用 export default 和 export 向外暴露成员</li><li>使用 export 向外暴露的成员，只能使用 { } 的形式来接收，这种形式，叫做 【按需导出】</li><li>export 可以向外暴露多个成员， 同时，如果某些成员，我们在 import 的时候，不需要，则可以 不在 {}  中定义</li><li>使用 export 导出的成员，必须严格按照 导出时候的名称，来使用  {}  按需接收；</li><li>使用 export 导出的成员，如果 就想 换个 名称来接收，可以使用 as 来起别名；</li></ul><p>testEs6Export.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导出变量</span><br><span class="line">export const a &#x3D; &#39;100&#39;;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出方法</span><br><span class="line">export const dogSay &#x3D; function()&#123; </span><br><span class="line">    console.log(&#39;wang wang&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出方法第二种</span><br><span class="line">function catSay()&#123;</span><br><span class="line">  console.log(&#39;miao miao&#39;); </span><br><span class="line">&#125;</span><br><span class="line">export &#123; catSay &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;export default导出</span><br><span class="line">const m &#x3D; 100;</span><br><span class="line">export default m; </span><br><span class="line">&#x2F;&#x2F;export defult const m &#x3D; 100;&#x2F;&#x2F; 这里不能写这种格式。</span><br></pre></td></tr></table></figure><p>import.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; dogSay, catSay &#125; from &#39;.&#x2F;testEs6Export&#39;; &#x2F;&#x2F;导出了 export 方法 </span><br><span class="line">import m1 from &#39;.&#x2F;testEs6Export&#39;;  &#x2F;&#x2F;导出了 export default</span><br><span class="line"></span><br><span class="line">import * as testModule from &#39;.&#x2F;testEs6Export&#39;; &#x2F;&#x2F;as 集合成对象导出</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nrm</title>
      <link href="/nrm/"/>
      <url>/nrm/</url>
      
        <content type="html"><![CDATA[<h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a>nrm的安装使用</h2><p>  作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；</p><p>  什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li><p>运行<code>npm i nrm -g</code>全局安装nrm包；</p></li><li><p>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</p></li><li><p>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</p></li><li><p>测试所有源的速度：<code>nrm test</code></p></li><li><p>添加定制源： <code>nrm add imooc http://192.168.1.100:6666</code> </p><ul><li>imooc是为源起的名称 </li><li>imooc后面的是源的地址</li></ul></li><li><p>删除源: <code>nrm del imooc</code>  </p><ul><li>imooc是为源起的名称</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url的构成</title>
      <link href="/url%E7%9A%84%E7%BB%84%E6%88%90/"/>
      <url>/url%E7%9A%84%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="url的构成"><a href="#url的构成" class="headerlink" title="url的构成"></a>url的构成</h2><p>   例：<code>http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</code></p><blockquote><p>就以下面这个URL为例，介绍下普通URL的各部分组成</p></blockquote><ol><li>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</li><li>域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></li><li>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</li><li>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</li><li>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</li><li>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</li><li>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是跨域以及产生原因？"><a href="#什么是跨域以及产生原因？" class="headerlink" title="什么是跨域以及产生原因？"></a>什么是跨域以及产生原因？</h2><ul><li><p>跨域是浏览器为了安全而做出的限制策略</p></li><li><p>跨域是指a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，或是a页面为ip地址，b页面为域名地址，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。</p><table><thead><tr><th>url</th><th>说明</th><th>是否跨域</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a><br/><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>是</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a><br/><a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同域名下不同文件</td><td>否</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a><br/><a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同域名下不同端口</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同域名 不同协议</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>是</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域名相同 子域名不同</td><td>是（cookie不可访问）</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a><br/><a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名（同上）</td><td>是</td></tr></tbody></table></li></ul><h2 id="跨域的解决办法"><a href="#跨域的解决办法" class="headerlink" title="跨域的解决办法"></a>跨域的解决办法</h2><h3 id="CORES跨域"><a href="#CORES跨域" class="headerlink" title="CORES跨域"></a>CORES跨域</h3><p> <a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">本文转自阮一峰大神的跨域资源共享 CORS 详解</a></p><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><p> <a href="http://localhost:4000/jsonp/#jsonp%E8%A7%86%E9%A2%91%E6%95%99%E5%AD%A6" target="_blank" rel="noopener">我的另一篇文章</a></p><h3 id="代理跨域"><a href="#代理跨域" class="headerlink" title="代理跨域"></a>代理跨域</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp</title>
      <link href="/jsonp/"/>
      <url>/jsonp/</url>
      
        <content type="html"><![CDATA[<h2 id="jsonp视频教学"><a href="#jsonp视频教学" class="headerlink" title="jsonp视频教学"></a><a href="https://www.bilibili.com/video/BV1jt411j72F?p=1" target="_blank" rel="noopener">jsonp视频教学</a></h2><h2 id="为什么会有jsonp"><a href="#为什么会有jsonp" class="headerlink" title="为什么会有jsonp"></a>为什么会有jsonp</h2><p>   由于浏览器的安全性限制，不允许AJAX访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全</p><h2 id="jsonp的实现原理"><a href="#jsonp的实现原理" class="headerlink" title="jsonp的实现原理"></a>jsonp的实现原理</h2><ol><li>初步方案一：用<strong>script</strong>标签<ul><li>服务端：将要发送的数据填充在一条js语句中<code>res.write(document.write(&quot;${weather}&quot;))</code></li><li>客户端：<code>&lt;script src=&quot;服务端接口地址&quot;&gt;&lt;/script&gt;</code></li><li>script发送请求到服务端，浏览器接受到接收到服务器发送的数据进行解析<blockquote><p>问题：服务端代码写死了，客户端只能执行服务端返回的js代码，服务端不能动态操作数据</p></blockquote></li></ul></li><li>完善方案二：提前在客户端定义一个函数，用于处理服务端返回的请求，服务端返回客户端定义的函数名到客户端，客户端接受到函数进行调用，并执行函数中的功能<ul><li>服务端：res.write(`show(${“weather”})`)</li><li>客户端：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> function show(weather) &#123;</span><br><span class="line">  实现代码功能</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>服务端把返回的方法写死，只能通过这个函数访问服务端返回的数据，不方便管理数据</p></blockquote></li></ul></li><li>完善方案三：用请求参数，将函数名动态传递给服务器<ul><li>服务端：res.write(`${callback}(${weather})`)</li><li>客户端：<code>&lt;script src=&quot;http://localhost:3000?callback=show&quot;&gt;&lt;/script&gt;</code><blockquote><p>script标签在页面写死，只有在页面加载的时候执行一次。无法按需反复执行，例如每次点击按钮时，随时发起请求。</p></blockquote></li></ul></li><li>最终完整版：每次点击按钮时，动态创建script标签<ul><li>客户端：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   $(&#39;button&#39;).click(function() &#123;</span><br><span class="line">   var script &#x3D; document.createElement(&quot;script&quot;)</span><br><span class="line">   script.src&#x3D;&#39;http:&#x2F;&#x2F;localhost:3000?callback&#x3D;show&#39;</span><br><span class="line">   document.body.appendChild(script)</span><br><span class="line">   $(&quot;body&gt;script:last&quot;).remove()&#x2F;&#x2F; 每次点击按钮，页面都会动态生成一个script标签，浪费内存，这句话是用来在函数执行完功能是，删除script标签</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>服务端：res.write(`${callback}(${weather})`)</li></ul></li><li>总结<br>方案一使用script标签虽然获得了数据，但是不能操作数据，由此方案二诞生了，但是方案二只能把返回的数据，返回给固定的函数，数据利用率低，由此方案三诞生了，但是方案三中的script标签只能加载一次，无法多次操作数据，数据利用率低，由此出现了最终方案动态创建script标签，但是在我们的日常工作中是不会这样用的，会有事先大牛们为我们封装出来的库和包来供我们使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/vue/"/>
      <url>/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="vue是什么？"><a href="#vue是什么？" class="headerlink" title="vue是什么？"></a>vue是什么？</h2><ol><li><p>Vue是一套构建用户界面的渐进式框架，也是一个非常典型的 MVVM 的程序结构（model-view-viewmodel）。</p></li><li><p>官方解释：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><ul><li>渐变式框架：你可以把vue用在已经有的项目中，进行页面的渲染，也可以利用vue的全家桶创建大型项目,vue不是把所有东西集成在一起，而是你需要什么，在vue中添加相应的工具(例如vue-resource,vuex)，vue实现是加法操作</li><li>MVC: 是后端(node.js)的程序结构，M是model的缩写代表数据层，V是view的缩写代表视图层，C是controller的缩写代表逻辑层</li><li>MVVM: 是前端的程序结构，是MVC中的V进一步划分，M是每一个页面的单独数据，V是每个页面的html结构，VM是页面的调度者，MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 Model 的双向数据绑定，这使得Model 的状态改变可以自动传递给 View，即所谓的<code>数据双向绑定</code>。<br><img src="../image/vue1.png" alt=""></li><li>自底向上逐层应用：由基层开始做起，把基础的东西写好，再逐层往上添加效果和功能。</li></ul><hr></li></ol><h2 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h2><h3 id="vue的兼容性"><a href="#vue的兼容性" class="headerlink" title="vue的兼容性"></a>vue的兼容性</h3><ul><li>Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容   ECMAScript 5 的浏览器</li></ul><h3 id="Vue-Detools"><a href="#Vue-Detools" class="headerlink" title="Vue Detools"></a>Vue Detools</h3><ul><li>在使用 Vue 时，我们推荐在你的浏览器上安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Vue Detools</a>。它允许你在一个更友好的界面中审查和调试 Vue 应用。</li></ul><h3 id="直接-lt-script-gt-引入"><a href="#直接-lt-script-gt-引入" class="headerlink" title="直接&lt;script&gt;引入"></a>直接<code>&lt;script&gt;</code>引入</h3><ul><li><p>直接下载并用 <code>&lt;script&gt;</code>标签引入，Vue 会被注册为一个全局变量。</p><blockquote><p>注意：在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告!</p></blockquote></li><li><p>csdn<br>对于制作原型或学习，你可以这样使用最新版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><pre><code>在用 Vue 构建大型应用时推荐使用 NPM 安装。NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。同时 Vue 也提供配套工具来开发单文件组件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure></code></pre><h3 id="命令行工具-CLI"><a href="#命令行工具-CLI" class="headerlink" title="命令行工具(CLI)"></a>命令行工具(CLI)</h3><blockquote><p>vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了     batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以 及生产环境可用的构建版本。更多详情可查阅 Vue CLI 的文档。</p></blockquote><h3 id="对不同版本的理解-以后更新"><a href="#对不同版本的理解-以后更新" class="headerlink" title="对不同版本的理解(以后更新)"></a>对不同版本的理解(以后更新)</h3><h2 id="与vue的第一次相见"><a href="#与vue的第一次相见" class="headerlink" title="与vue的第一次相见"></a>与vue的第一次相见</h2><ul><li><p>注意：在 VM实例中，如果想要获取 data 上的数据，或者 想要调用 methods 中的 方法，必须通过 this.数据属性名  或  this.方法名 来进行访问，这里的this，就表示 我们 new 出来的  VM 实例对象</p></li><li><p>注意： VM实例，会监听自己身上 data 中所有数据的改变，只要数据一发生变化,就会自动把 最新的数据，从data 上同步到页面中去；【好处：程序员只需要关心数据，不需要考虑如何重新渲染DOM页面】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;!-- 将来 <span class="keyword">new</span> 的Vue实例，会控制这个 元素中的所有内容 --&gt;</span><br><span class="line">  &lt;!-- Vue 实例所控制的这个元素区域，就是我们的 V  --&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 2. 创建一个Vue的实例</span></span><br><span class="line">    <span class="comment">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span></span><br><span class="line">    <span class="comment">//  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,  <span class="comment">// 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域</span></span><br><span class="line">      <span class="comment">// 这里的 data 就是 MVVM中的 M，专门用来保存 每个页面的数据的</span></span><br><span class="line">      data: &#123; <span class="comment">// data 属性中，存放的是 el 中要用到的数据</span></span><br><span class="line">        msg: <span class="string">'欢迎学习Vue'</span> <span class="comment">// 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，程序员不再手动操作DOM元素了【前端的Vue之类的框架，不提倡我们去手动操作DOM元素了】</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><h3 id="v-cloak-v-html-v-text"><a href="#v-cloak-v-html-v-text" class="headerlink" title="v-cloak, v-html, v-text"></a>v-cloak, v-html, v-text</h3><ul><li><p><code>v-cloak</code>: 使用v-cloak能够解决 插值表达式闪烁的问题，并且不会替换标签中的内容，只会替换插值表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  [v-cloak] &#123;</span><br><span class="line">    <span class="comment">/* display: none; */</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 使用 v-cloak 能够解决 插值表达式闪烁的问题 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-cloak&gt;++++++++ &#123;&#123; msg &#125;&#125; ----------&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">      el: '#app',</span></span><br><span class="line"><span class="string">      data: &#123;</span></span><br><span class="line"><span class="string">        msg: '123',</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-text</code>: 自身标签就可以解决闪烁问题，但是会替换标签中所有的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;h4 v-text=<span class="string">"msg"</span>&gt;==================&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 默认 v-text 是没有闪烁问题的 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- v-text会覆盖元素中原本的内容，但是 插值表达式  只会替换自己的这个占位符，不会把 整个元素的内容清空 --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;script src=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        msg: '123',</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>v-html</code>: 用于转化html标签的数据, 也会替换标签中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;div v-html=<span class="string">"msg2"</span>&gt;<span class="number">1212112</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   &lt;script&gt;</span></span><br><span class="line"><span class="string">     var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">       el: '#app',</span></span><br><span class="line"><span class="string">       data: &#123;</span></span><br><span class="line"><span class="string">         msg2: '&lt;h1&gt;哈哈，我是一个大大的H1， 我大，我骄傲&lt;/h1&gt;',</span></span><br><span class="line"><span class="string">       &#125;,</span></span><br><span class="line"><span class="string">     &#125;)</span></span><br><span class="line"><span class="string">   &lt;/script&gt;</span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li><p>v-bind简写<code>:</code> ,用于数据把数据初始化在html页面(例如照片的渲染:src)</p></li><li><p>v-bind不仅能够绑定数据，而且能够在v-bind中书写<strong>表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- v-bind: 是 Vue中，提供的用于绑定属性的指令 --&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + '123'"</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 注意： v-bind: 指令可以被简写为 :要绑定的属性 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span></span></span><br><span class="line">    &lt;input type="button" value="按钮" :title="mytitle + '123'"&gt;</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: '#app',</span><br><span class="line">      data: &#123;</span><br><span class="line">        mytitle: '这是一个自己定义的title'</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>click</span><br></pre></td></tr></table></figure></li></ul><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li><p>v-on简写@(v-on:click简写为@click)</p></li><li><p>用于绑定各种事件(例如常见的click)</p></li><li><p>v-on会通过绑定在自己身上的变量，在methods中寻找自己的函数进行运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"按钮"</span> @click=<span class="string">"show"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="./</span>lib/vue<span class="number">-2.4</span><span class="number">.0</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">      el: '#app',</span></span><br><span class="line"><span class="string">      data: &#123;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      methods: &#123; // 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span><br><span class="line"><span class="string">        show: function () &#123;</span></span><br><span class="line"><span class="string">          alert('Hello')</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ol><li>v-bind 只能实现数据的单向绑定，从 M 自动绑定到 V， 无法实现数据的双向绑定,而v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定</li><li>v-model多用于表单(例如：input(radio, text, address, email….)   select    checkbox   textarea )<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">   &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;!-- 使用  v-model 指令，可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span><br><span class="line">     &lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span><br><span class="line">     &lt;!-- input(radio, text, address, email....)   select    checkbox   textarea   --&gt;</span><br><span class="line">     &lt;input type=<span class="string">"text"</span> style=<span class="string">"width:100%;"</span> v-model=<span class="string">"msg"</span>&gt;</span><br><span class="line">   &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">     var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">       el: '#app',</span></span><br><span class="line"><span class="regexp">       data: &#123;</span></span><br><span class="line"><span class="regexp">         msg: '大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美，没瑕疵！'</span></span><br><span class="line"><span class="regexp">       &#125;,</span></span><br><span class="line"><span class="regexp">       methods: &#123;</span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp">     &#125;);</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><blockquote><p>2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。</p></blockquote><ol><li>迭代普通数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(item, i) in list"</span> :key=<span class="string">"i"</span>&gt;索引值：&#123;&#123;i&#125;&#125; --- 每一项：&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代对象数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(user, i) in list"</span> :key=<span class="string">"i"</span>&gt;Id：&#123;&#123; user.id &#125;&#125; --- 名字：&#123;&#123; user.name &#125;&#125; --- 索引：&#123;&#123;i&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'zs1'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'zs2'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'zs3'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'zs4'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 注意：在遍历对象身上的键值对的时候， 除了 有  val  key  ,在第三个位置还有 一个 索引  --&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"(val, key, i) in user"</span> :key=<span class="string">"i"</span>&gt;值是： &#123;&#123; val &#125;&#125; --- 键是： &#123;&#123;key&#125;&#125; -- 索引： &#123;&#123;i&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        user: &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">'托尼·屎大颗'</span>,</span><br><span class="line">          gender: <span class="string">'男'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li>迭代数字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="keyword">in</span> 后面我们放过  普通数组，对象数组，对象， 还可以放数字 --&gt;</span><br><span class="line">    &lt;!-- 注意：如果使用 v-<span class="keyword">for</span> 迭代数字的话，前面的 count 值从 <span class="number">1</span> 开始 --&gt;</span><br><span class="line">    &lt;p v-<span class="keyword">for</span>=<span class="string">"count in 10"</span> :key=<span class="string">"count"</span>&gt;这是第 &#123;&#123; count &#125;&#125; 次循环&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><ol><li>v-if<ul><li>每次都会重新删除或创建元素</li><li>有较高的切换性能消耗</li></ul></li><li>v-show<ul><li>每次不会重新进行DOM的删除和创建操作，只是切换了元素的 display:none 样式</li><li>有较高的初始渲染消耗</li></ul></li><li>建议使用<ul><li>如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show</li><li>如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"toggle"</span> @click=<span class="string">"flag=!flag"</span>&gt;</span><br><span class="line">    &lt;h3 v-<span class="keyword">if</span>=<span class="string">"flag"</span>&gt;这是用v-<span class="keyword">if</span>控制的元素&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3 v-show="flag"&gt;这是用v-show控制的元素&lt;/</span>h3&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="v-if和v-else"><a href="#v-if和v-else" class="headerlink" title="v-if和v-else"></a>v-if和v-else</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">""</span> @click.prevent=<span class="string">"flag=true"</span>&gt;登录&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="" @click.prevent="flag=false"&gt;注册&lt;/</span>a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;login v-<span class="keyword">if</span>=<span class="string">"flag"</span>&gt;&lt;<span class="regexp">/login&gt;</span></span><br><span class="line"><span class="regexp">    &lt;register v-else="flag"&gt;&lt;/</span>register&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Vue.component('login', &#123;</span></span><br><span class="line"><span class="regexp">      template: '&lt;h3&gt;登录组件&lt;/</span>h3&gt;<span class="string">'</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Vue.component('</span>register<span class="string">', &#123;</span></span><br><span class="line"><span class="string">      template: '</span>&lt;h3&gt;注册组件&lt;<span class="regexp">/h3&gt;'</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="vue自定义指令"><a href="#vue自定义指令" class="headerlink" title="vue自定义指令"></a>vue自定义指令</h3><h4 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h4><ol><li><p>Vue.directive() 定义全局的指令</p></li><li><p>参数1 ： 指令的名称，注意，在定义的时候，指令的名称前面，不需要加 v- 前缀,  但是： 在调用的时候，必须 在指令名称前 加上 v- 前缀来进行调用</p></li><li><p>参数2： 是一个对象，这个对象身上，有一些指令相关的函数，这些函数可以在特定的阶段，执行相关的操作</p><ul><li>bind: 每当指令绑定到元素上的时候，会立即执行这个 bind 函数，只执行一次,在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象,第二个参数是 binding, 在元素刚绑定了指令的时候，还没有 插入到 DOM中去，这时候，调用 focus 方法没有作用,因为，一个元素，只有插入DOM之后，才能获取焦点<blockquote><p>所以bind中应该操作样式</p></blockquote></li><li>inserted: 表示元素 插入到DOM中的时候，会执行 inserted 函数【触发1次】<blockquote><p>JS行为有关的操作，最好在 inserted 中去执行，放置 JS行为不生效</p></blockquote></li><li>updated: 当VNode更新的时候，会执行 updated， 可能会触发多次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;keywords&quot; id&#x3D;&quot;search&quot; v-focus v-color&#x3D;&quot;&#39;green&#39;&quot;&gt;</span><br><span class="line"></span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">  bind(el) &#123;  </span><br><span class="line">    &#x2F;&#x2F; el.focus()</span><br><span class="line">  &#125;,</span><br><span class="line">  inserted(el) &#123; </span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;,</span><br><span class="line">  updated(el) &#123;  </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>全局自定指令简写：</p><blockquote><p>这个 function 等同于把代码写到了 bind 和 update 中去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;color-swatch&#39;, function (el, binding) &#123;</span><br><span class="line">  el.style.backgroundColor &#x3D; binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="局部指令"><a href="#局部指令" class="headerlink" title="局部指令"></a>局部指令</h4><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class="line">    &lt;h3 v-color&#x3D;&quot;&#39;pink&#39;&quot; v-fontweight&#x3D;&quot;900&quot; v-fontsize&#x3D;&quot;50&quot;&gt;&#123;&#123; dt | dateFormat &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app2&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        dt: new Date()</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">      directives: &#123; &#x2F;&#x2F; 自定义私有指令</span><br><span class="line">        &#39;fontweight&#39;: &#123; &#x2F;&#x2F; 设置字体粗细的</span><br><span class="line">          bind: function (el, binding) &#123;</span><br><span class="line">            el.style.fontWeight &#x3D; binding.value</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 私有命令简写</span><br><span class="line">        &#39;fontsize&#39;: function (el, binding) &#123; &#x2F;&#x2F; 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去</span><br><span class="line">          el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></code></pre><ol><li>局部自定义指令简写:<blockquote><p>这个 function 等同于把代码写到了 bind 和 update 中去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app2&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    dt: new Date()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  directives: &#123; &#x2F;&#x2F; 自定义私有指令</span><br><span class="line">    &#39;fontsize&#39;: function (el, binding) &#123; &#x2F;&#x2F; 注意：这个 function 等同于 把 代码写到了 bind 和 update 中去</span><br><span class="line">      el.style.fontSize &#x3D; parseInt(binding.value) + &#39;px&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="钩子函数的参数"><a href="#钩子函数的参数" class="headerlink" title="钩子函数的参数"></a>钩子函数的参数</h4><ol><li>el：指令所绑定的元素，可以用来直接操作 DOM。</li><li>binding：一个对象，包含以下 property：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li></ul></li></ol><h2 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h2><p>   <a href="https://juejin.im/post/5c64e11151882562e4726d98" target="_blank" rel="noopener">https://juejin.im/post/5c64e11151882562e4726d98</a></p><h2 id="在Vue中使用样式"><a href="#在Vue中使用样式" class="headerlink" title="在Vue中使用样式"></a>在Vue中使用样式</h2><h3 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h3><ol><li><strong>数组</strong>(如果直接写一个字符串，vue会把这个变量解析成一个变量，在vue实例中寻找变量，寻找不到就会报错)<br>例：<code>&lt;h1 :class=&quot;thin&quot;&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 <span class="class"><span class="keyword">class</span> 需要使用  <span class="title">v</span>-<span class="title">bind</span> 做数据绑定 --&gt;</span></span><br><span class="line">    &lt;!-- &lt;h1 :class="['thin', 'italic']"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt; --&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>数组</strong>中使用 <strong>三元表达式</strong>(其中flag大多数是条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 在数组中使用三元表达式 --&gt;</span><br><span class="line">    &lt;!-- 其中flag大多数是条件语句 --&gt;</span><br><span class="line">    &lt;h1 :<span class="class"><span class="keyword">class</span></span>=<span class="string">"['thin', 'italic', flag?'active':'']"</span>&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><strong>数组</strong>中嵌套<strong>对象</strong>(其中flag大多数是条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h1 :class="['thin', 'italic', &#123;'active':flag&#125; ]"&gt;这是一个很大很大的H1，大到你无法想象</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><strong>直接使用对象</strong>(通常情况下不直接给false，或者true，经常条件语句)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  &lt;style&gt;</span><br><span class="line">    .red &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .thin &#123;</span><br><span class="line">      font-weight: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .italic &#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      letter-spacing: <span class="number">0.5</span>em;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 在为 <span class="class"><span class="keyword">class</span> 使用 <span class="title">v</span>-<span class="title">bind</span> 绑定 对象的时候，对象的属性是类名，由于 对象的属性可带引号，也可不带引号，所以 这里我没写引号；  属性的值 是一个标识符 --&gt;</span></span><br><span class="line">    &lt;h1 :class=" classObj: &#123; red: true, thin: true, italic: false, active: false &#125;"&gt;这是一个很大很大的H1，大到你无法想象！！！&lt;/h1&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: true,</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="使用内联样式"><a href="#使用内联样式" class="headerlink" title="使用内联样式"></a>使用内联样式</h3><ol><li>直接在元素上通过 :style 的形式，书写样式对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"&#123;color: 'red', 'font-size': '40px'&#125;"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li><li>将样式对象，定义到<code>data</code> 中，并直接引用到 <code>:style</code> 中<ul><li>在data上定义样式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"h1StyleObj"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>在 <code>:style</code> 中通过数组，引用多个<code>data</code> 上的样式对象<ul><li>在data上定义样式：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    h1StyleObj: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="string">'font-size'</span>: <span class="string">'40px'</span>, <span class="string">'font-weight'</span>: <span class="string">'200'</span> &#125;,</span><br><span class="line">    h1StyleObj2: &#123; <span class="attr">fontStyle</span>: <span class="string">'italic'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 :style=<span class="string">"[h1StyleObj, h1StyleObj2]"</span>&gt;这是一个善良的H1&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue的过滤器"><a href="#Vue的过滤器" class="headerlink" title="Vue的过滤器"></a>Vue的过滤器</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用作一些常见的文本格式化。过滤器可以用在两个地方：mustache 插值和 v-bind 表达式。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><blockquote><p>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</p></blockquote></blockquote><ul><li>过滤器的第一个参数要处理的值(也就是管道符前面的值)，过滤器可以传递多个参数</li><li>一个值也可以使用多个过滤器<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><ul><li>所谓的全局过滤器，就是所有的VM实例都共享的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat(<span class="string">'疯狂+1'</span>, <span class="string">'123'</span>) | test &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.filter(<span class="string">'msgFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, arg, arg2</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 字符串的  replace 方法，第一个参数，除了可写一个 字符串之外，还可以定义一个正则</span></span><br><span class="line">      <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg + arg2)</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.filter(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> msg + <span class="string">'========'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: <span class="string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><ul><li>私有过滤器只能应用于自己vm的区域<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg | msgFormat(<span class="string">'疯狂+1'</span>, <span class="string">'123'</span>)&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: <span class="string">'曾经，我也是一个单纯的少年，单纯的我，傻傻的问，谁是世界上最单纯的男人'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      filters: &#123; </span><br><span class="line">        msgFormat(msg, arg, arg2) &#123;</span><br><span class="line">          <span class="keyword">return</span> msg.replace(<span class="regexp">/单纯/g</span>, arg + arg2)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ol><li><p>事件修饰符可以叠加使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组织默认行为，并且只能触发一次 --&gt;</span><br><span class="line">&lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent.once=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>.stop</strong>用于阻止冒泡(例如子元素与父元素都有点击事件，默认触发子元素事件，父元素事件也要被触发，通过.stop可以实现触发子元素事件，父元素事件不会被触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用  .stop  阻止冒泡 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click.stop=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.prevent</strong>用于阻止默认行为(例如：a链接默认是提供超链接的，我们可以通过.prevent来阻止默认行为)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .prevent 阻止默认行为 --&gt;</span><br><span class="line">    &lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        linkClick() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'触发了连接的点击事件'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.capture</strong> 实现捕获触发事件的机制(默认是冒泡机制，触发子元素事件，父元素事件被冒泡触发，使用.capture后触发子元素，父元素事件先触发，子元素事件再触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用  .capture 实现捕获触发事件的机制 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click.capture=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>.self</strong> 实现只有点击当前元素时候，才会触发事件处理函数(.self使只有触发当前元素才会触发事件，其他元素冒泡或者捕获都不会触发这个元素事件，但是他只作用与自己，其他元素冒泡和捕获继续执行)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .self 实现只有点击当前元素时候，才会触发事件处理函数 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click=<span class="string">"div1Handler"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他"</span> @click=<span class="string">"btnHandler"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>.once 只触发一次事件处理函数(事件只触发一次，事件触发过后，不能再触发)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 使用 .once 只触发一次事件处理函数 --&gt;</span><br><span class="line">    &lt;a href=<span class="string">"http://www.baidu.com"</span> @click.prevent.once=<span class="string">"linkClick"</span>&gt;有问题，先去百度&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        div1Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 inner div 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        btnHandler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 btn 按钮 的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        linkClick() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'触发了连接的点击事件'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        div2Handler() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'这是触发了 outer div 的点击事件'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>.self 和 .stop的区别<br>.self 只会阻止自己身上冒泡行为的触发，并不会真正阻止 冒泡的行为<br>.stop是真正的组织了冒泡</p></li></ol><h3 id="键盘修饰符"><a href="#键盘修饰符" class="headerlink" title="键盘修饰符"></a>键盘修饰符</h3><ol><li>以下是vue官方为我们定义的键盘修饰符<ul><li>.enter</li><li>.tab</li><li>.delete (捕获“删除”和“退格”键)</li><li>.esc</li><li>.space</li><li>.up(↑)</li><li>.down(↓)</li><li>.left(←)</li><li>.right(→)</li></ul></li><li>自定义修饰符<ul><li>通过Vue.config.keyCodes.名称 = 按键值来自定义案件修饰符的别名：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f2 = <span class="number">113</span></span><br></pre></td></tr></table></figure></li><li>使用自定义的按键修饰符：<br><a href="https://www.cnblogs.com/wuhua1/p/6686237.html" target="_blank" rel="noopener">键盘事件对应的键码</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot; @keyup.f2&#x3D;&quot;add&quot;&gt; &#x2F;&#x2F; 只有按下键盘f2才有效</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Vue-resource的基本使用"><a href="#Vue-resource的基本使用" class="headerlink" title="Vue-resource的基本使用"></a>Vue-resource的基本使用</h2><h3 id="vue-resource-的配置步骤："><a href="#vue-resource-的配置步骤：" class="headerlink" title="vue-resource 的配置步骤："></a>vue-resource 的配置步骤：</h3><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件<blockquote><p>引用的先后顺序是：先引用 Vue 的脚本文件，再引用 vue-resource 的脚本文件；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 注意：vue-resource 依赖于 Vue，所以先后顺序要注意  --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>lib/vue-resource<span class="number">-1.3</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于已经导入了 Vue-resource这个包，所以 ，可以直接通过  this.$http 来发起数据请求</li><li>如果我们通过全局配置了，请求的数据接口 根域名，则 ，在每次单独发起 http 请求的时候，请求的 url 路径，应该以相对路径开头，前面不能带 /  ，否则 不会启用根路径做拼接；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.root &#x3D; &#39;http:&#x2F;&#x2F;vue.studyit.io&#x2F;&#39;</span><br></pre></td></tr></table></figure></li><li>如果全局启用 emulateJSON 选项, post请求就不用写第三个参数了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.options.emulateJSON &#x3D; true;</span><br></pre></td></tr></table></figure></li></ul><h3 id="发起get请求"><a href="#发起get请求" class="headerlink" title="发起get请求"></a>发起get请求</h3><ul><li>this.$http.get(‘url’).then(function(result){})</li><li>当通过 then 指定回调函数之后，在回调函数中，可以拿到数据服务器返回的 result</li><li>先判断 result.body.status 是否等于0，如果等于0，就成功了，可以 把 result..body.message 赋值给 this.list ; 如果不等于0，可以弹框提醒，获取数据失败！<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">     getAllList() &#123; </span><br><span class="line">        <span class="keyword">this</span>.$http.get(<span class="string">'api/getprodlist'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 注意： 通过 $http 获取到的数据，都在 result.body 中放着</span></span><br><span class="line">          <span class="keyword">var</span> result = result.body</span><br><span class="line">          <span class="keyword">if</span> (result.status === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功了</span></span><br><span class="line">            <span class="keyword">this</span>.list = result.message</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败了</span></span><br><span class="line">            alert(<span class="string">'获取数据失败！'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h3><ol><li>this.$http.post() 中接收三个参数：<ul><li>第一个参数： 要请求的URL地址</li><li>第二个参数： 要提交给服务器的数据 ，要以对象形式提交给服务器 { name: this.name }</li><li>第三个参数： 是一个配置对象，要以哪种表单数据类型提交过去， { emulateJSON: true }, 以普通表单格式，将数据提交给服务器 application/x-www-form-urlencoded</li></ul></li><li>在 post 方法中，使用 .then 来设置成功的回调函数，如果想要拿到成功的结果，需要 result.body<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add() &#123;  </span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="string">'api/addproduct'</span>, &#123; <span class="attr">name</span>: <span class="keyword">this</span>.name &#125;, &#123; <span class="attr">emulateJSON</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (result.body.status === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功了！</span></span><br><span class="line">            <span class="comment">// 添加完成后，只需要手动，再调用一下 getAllList 就能刷新品牌列表了</span></span><br><span class="line">            <span class="keyword">this</span>.getAllList()</span><br><span class="line">            <span class="comment">// 清空 name </span></span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">''</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败了</span></span><br><span class="line">            alert(<span class="string">'添加失败！'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="发送JSONP请求获取数据"><a href="#发送JSONP请求获取数据" class="headerlink" title="发送JSONP请求获取数据"></a>发送JSONP请求获取数据</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">     el: <span class="string">'#app'</span>,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       jsonpInfo() &#123; <span class="comment">// 发起JSONP 请求</span></span><br><span class="line">         <span class="keyword">this</span>.$http.jsonp(<span class="string">'http://vue.studyit.io/api/jsonp'</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(result.body)</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue中发送axios请求"><a href="#vue中发送axios请求" class="headerlink" title="vue中发送axios请求"></a>vue中发送axios请求</h2><ol><li>Vue.prototype.$http = axios, 把 axios 挂载到 Vue 构造函数的原型上</li><li>axios.defaults.baseURL =’’, 配置请求根路径<blockquote><p>axios.create() 方法，调用的返回值，是一个新的 axios 实例，在 调用 create 函数的时候，可以初始化一些默认配置项，比如，请求的 baseURL 地址<br>Vue.prototype.$http = axios.create({<br> baseURL: ‘<a href="http://39.106.32.91:3000&#39;">http://39.106.32.91:3000&#39;</a><br>})  这句个配置相当于1, 2之和</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"get请求"</span> @click=<span class="string">"getInfo"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"post请求"</span> @click=<span class="string">"postInfo"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 把 axios 挂载到 Vue 构造函数的原型上</span></span><br><span class="line"><span class="regexp">    Vue.prototype.$http = axios</span></span><br><span class="line"><span class="regexp">    axios.defaults.baseURL = 'http:/</span><span class="regexp">/39.106.32.91:3000'</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        async getInfo() &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ this.$http.get()</span></span><br><span class="line"><span class="regexp">          /</span>* <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'http://39.106.32.91:3000/api/getlunbo'</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(data) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          const &#123; data &#125; = await this.$http.get('http:/</span><span class="regexp">/39.106.32.91:3000/</span>api/getlunbo<span class="string">')</span></span><br><span class="line"><span class="string">          console.log(data)</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        async postInfo() &#123;</span></span><br><span class="line"><span class="string">          const &#123; data &#125; = await this.$http.post('</span>http:<span class="comment">//39.106.32.91:3000/api/post', &#123; name: 'zs' &#125;)</span></span><br><span class="line">          <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue的生命周期函数"><a href="#vue的生命周期函数" class="headerlink" title="vue的生命周期函数"></a>vue的生命周期函数</h2><h3 id="vue生命函数图解"><a href="#vue生命函数图解" class="headerlink" title="vue生命函数图解"></a>vue生命函数图解</h3><p> <img src="/image/vue2.png" alt=""></p><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><ol><li>这是我们遇到的第1个生命周期函数，表示实例完全被创建出来之前，会执行它</li><li>在 beforeCreate 生命周期函数执行的时候，data 和 methods 中的 数据都还没有没初始化</li></ol><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><ol><li>这是遇到的第2个生命周期函数</li><li>在 created 中，data 和 methods 都已经被初始化好了！</li><li>如果要调用 methods 中的方法，或者操作 data 中的数据，最早，只能在 created 中操作</li><li>最好在created函数中执行<strong>请求函数</strong></li></ol><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><ol><li>这是遇到的第3个生命周期函数</li><li>模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中</li><li>在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串</li></ol><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><ol><li>这是遇到的第4个生命周期函数</li><li>内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了<blockquote><p>注意： mounted 是 实例创建期间的最后一个生命周期函数，当执行完 mounted 就表示，实例已经被完全创建好了，此时，如果没有其它操作的话，这个实例，就静静的 躺在我们的内存中，一动不动</p></blockquote></li></ol><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><ol><li>这是遇到的第5个生命周期函数</li><li>这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】<blockquote><p>得出结论： 当执行 beforeUpdate 的时候，页面中的显示的数据，还是旧的，此时 data 数据是最新的，页面尚未和 最新的数据保持同步</p></blockquote></li></ol><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><ol><li>这是遇到的第6个生命周期函数</li><li>updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的</li></ol><h2 id="Vue动画"><a href="#Vue动画" class="headerlink" title="Vue动画"></a>Vue动画</h2><h3 id="过渡类实现动画"><a href="#过渡类实现动画" class="headerlink" title="过渡类实现动画"></a>过渡类实现动画</h3><ol><li>v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入</li><li>v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了</li><li>v-enter-active 【入场动画的时间段】</li><li>v-leave-active 【离场动画的时间段】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  &#x2F;* v-enter 【这是一个时间点】 是进入之前，元素的起始状态，此时还没有开始进入 *&#x2F;</span><br><span class="line">  &#x2F;* v-leave-to 【这是一个时间点】 是动画离开之后，离开的终止状态，此时，元素 动画已经结束了 *&#x2F;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(150px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;* v-enter-active 【入场动画的时间段】 *&#x2F;</span><br><span class="line">  &#x2F;* v-leave-active 【离场动画的时间段】 *&#x2F;</span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active&#123;</span><br><span class="line">    transition: all 0.8s ease;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br><span class="line">    &lt;!-- 1. 使用 transition 元素，把 需要被动画控制的元素，包裹起来 --&gt;</span><br><span class="line">    &lt;!-- transition 元素，是 Vue 官方提供的 --&gt;</span><br><span class="line">    &lt;transition&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改过渡类前缀v"><a href="#修改过渡类前缀v" class="headerlink" title="修改过渡类前缀v-"></a>修改过渡类前缀v-</h3><ol><li>将过渡类的v-换成自行定义的名字</li><li>在transition标签name属性中指定该名字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    .my-enter,</span><br><span class="line">    .my-leave-to &#123;</span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(70px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .my-enter-active,</span><br><span class="line">    .my-leave-active&#123;</span><br><span class="line">      transition: all 0.8s ease;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle2&quot; @click&#x3D;&quot;flag2&#x3D;!flag2&quot;&gt;</span><br><span class="line">    &lt;transition name&#x3D;&quot;my&quot;&gt;</span><br><span class="line">      &lt;h6 v-if&#x3D;&quot;flag2&quot;&gt;这是一个H6&lt;&#x2F;h6&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag2: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用第三方库实现动画"><a href="#使用第三方库实现动画" class="headerlink" title="使用第三方库实现动画"></a>使用第三方库实现动画</h3><ol><li>在head标签中引入animate库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.&#x2F;lib&#x2F;animate.css&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>transition标签中设置2个类，enter-active-class与leave-active-class<ul><li>enter-active-class可以在里面指定进场动画类, 但是必须在类中加入animated类，如果不想在这个类中添加，那请在被作用的元素添加<code>class=&quot;animated&quot;</code></li><li>leave-active-class可以在里面指定出场动画类, 但是必须在类中加入animated类，如果不想在这个类中添加，那请在被作用的元素添加<code>class=&quot;animated&quot;</code></li></ul></li><li>transition标签中设置duration属性来控制动画的时间，指定一个值，进场时间和出场时间都是这个时间，也可以分别指定进场时间，和出场时间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition :duration&#x3D;&quot;200&quot;&gt;</span><br><span class="line">  &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br><span class="line"></span><br><span class="line">&lt;transition :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;&gt;</span><br><span class="line">  &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;toggle&quot; @click&#x3D;&quot;flag&#x3D;!flag&quot;&gt;</span><br><span class="line">    &lt;!-- 需求： 点击按钮，让 h3 显示，再点击，让 h3 隐藏 --&gt;</span><br><span class="line">    &lt;!-- &lt;transition enter-active-class&#x3D;&quot;animated bounceIn&quot; leave-active-class&#x3D;&quot;animated bounceOut&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用 :duration&#x3D;&quot;毫秒值&quot; 来统一设置 入场 和 离场 时候的动画时长 --&gt;</span><br><span class="line">    &lt;!-- &lt;transition enter-active-class&#x3D;&quot;bounceIn&quot; leave-active-class&#x3D;&quot;bounceOut&quot; :duration&#x3D;&quot;200&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用  :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;  来分别设置 入场的时长 和 离场的时长  --&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">    enter-active-class&#x3D;&quot;bounceIn&quot; </span><br><span class="line">    leave-active-class&#x3D;&quot;bounceOut&quot; </span><br><span class="line">    :duration&#x3D;&quot;&#123; enter: 200, leave: 400 &#125;&quot;&gt;</span><br><span class="line">      &lt;h3 v-if&#x3D;&quot;flag&quot; class&#x3D;&quot;animated&quot;&gt;这是一个H3&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt; </span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: false</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="钩子函数实现半场动画"><a href="#钩子函数实现半场动画" class="headerlink" title="钩子函数实现半场动画"></a>钩子函数实现半场动画</h3><ol><li>每一个钩子函数表视每一个时间段</li><li>如果要具体每个时间段要做什么具体操作，请用钩子函数实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"快到碗里来"</span> @click=<span class="string">"flag=!flag"</span>&gt;</span><br><span class="line">    &lt;!-- <span class="number">1.</span> 使用 transition 元素把 小球包裹起来 --&gt;</span><br><span class="line">    &lt;transition</span><br><span class="line">      @before-enter=<span class="string">"beforeEnter"</span></span><br><span class="line">      @enter=<span class="string">"enter"</span></span><br><span class="line">      @after-enter=<span class="string">"afterEnter"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ball"</span> v-show=<span class="string">"flag"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>transition&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        flag: false</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 注意： 动画钩子函数的第一个参数：el，表示 要执行动画的那个DOM元素，是个原生的 JS DOM对象</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 大家可以认为 ， el 是通过 document.getElementById('') 方式获取到的原生JS DOM对象</span></span><br><span class="line"><span class="regexp">        beforeEnter(el)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ beforeEnter 表示动画入场之前，此时，动画尚未开始，可以 在 beforeEnter 中，设置元素开始动画之前的起始样式</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 设置小球开始动画之前的，起始位置</span></span><br><span class="line"><span class="regexp">          el.style.transform = "translate(0, 0)"</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        enter(el, done)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 这句话，没有实际的作用，但是，如果不写，出不来动画效果；</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 可以认为 el.offsetWidth 会强制动画刷新</span></span><br><span class="line"><span class="regexp">          el.offsetWidth</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ enter 表示动画 开始之后的样式，这里，可以设置小球完成动画之后的，结束状态</span></span><br><span class="line"><span class="regexp">          el.style.transform = "translate(150px, 450px)"</span></span><br><span class="line"><span class="regexp">          el.style.transition = 'all 1s ease'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 这里的 done， 起始就是 afterEnter 这个函数，也就是说：done 是 afterEnter 函数的引用</span></span><br><span class="line"><span class="regexp">          done()</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        afterEnter(el)&#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 动画完成之后，会调用 afterEnter</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ console.log('ok')</span></span><br><span class="line"><span class="regexp">          this.flag = !this.flag</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="transition-group"><a href="#transition-group" class="headerlink" title="transition-group"></a>transition-group</h3><ul><li><p>在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup </p></li><li><p>如果要为 v-for 循环创建的元素设置动画，必须为每一个 元素 设置 :key 属性</p></li><li><p>给 transition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果</p></li><li><p>通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">      border: 1px dashed #999;</span><br><span class="line">      margin: <span class="number">5</span>px;</span><br><span class="line">      line-height: <span class="number">35</span>px;</span><br><span class="line">      padding-left: <span class="number">5</span>px;</span><br><span class="line">      font-size: <span class="number">12</span>px;</span><br><span class="line">      width: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">      background-color: hotpink;</span><br><span class="line">      transition: all <span class="number">0.8</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    .v-enter,</span><br><span class="line">    .v-leave-to &#123;</span><br><span class="line">      opacity: <span class="number">0</span>;</span><br><span class="line">      transform: translateY(<span class="number">80</span>px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .v-enter-active,</span><br><span class="line">    .v-leave-active &#123;</span><br><span class="line">      transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 */</span></span><br><span class="line">    .v-move &#123;</span><br><span class="line">      transition: all <span class="number">0.6</span>s ease;</span><br><span class="line">    &#125;</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label&gt;</span><br><span class="line">        Id:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"id"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;label&gt;</span></span><br><span class="line"><span class="regexp">        Name:</span></span><br><span class="line"><span class="regexp">        &lt;input type="text" v-model="name"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>label&gt;</span><br><span class="line"></span><br><span class="line">      &lt;input type=<span class="string">"button"</span> value=<span class="string">"添加"</span> @click=<span class="string">"add"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- &lt;ul&gt; --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;transition-group appear tag="ul"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li v-for="(item, i) in list" :key="item.id" @click="del(i)"&gt;</span></span><br><span class="line"><span class="regexp">          &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/transition-group&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- &lt;/u</span>l&gt; --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 创建 Vue 实例，得到 ViewModel</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">      el: '#app',</span></span><br><span class="line"><span class="regexp">      data: &#123;</span></span><br><span class="line"><span class="regexp">        id: '',</span></span><br><span class="line"><span class="regexp">        name: '',</span></span><br><span class="line"><span class="regexp">        list: [</span></span><br><span class="line"><span class="regexp">          &#123; id: 1, name: '赵高' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 2, name: '秦桧' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 3, name: '严嵩' &#125;,</span></span><br><span class="line"><span class="regexp">          &#123; id: 4, name: '魏忠贤' &#125;</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">      &#125;,</span></span><br><span class="line"><span class="regexp">      methods: &#123;</span></span><br><span class="line"><span class="regexp">        add() &#123;</span></span><br><span class="line"><span class="regexp">          this.list.push(&#123; id: this.id, name: this.name &#125;)</span></span><br><span class="line"><span class="regexp">          this.id = this.name = ''</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        del(i) &#123;</span></span><br><span class="line"><span class="regexp">          this.list.splice(i, 1)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="全局组件定义的四种方式"><a href="#全局组件定义的四种方式" class="headerlink" title="全局组件定义的四种方式"></a>全局组件定义的四种方式</h3><ol><li><p>使用 Vue.extend 配合 Vue.component 方法：</p><ul><li><p>第一种形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 Vue.extend 来创建全局的Vue组件</span><br><span class="line"> var com1 &#x3D; Vue.extend(&#123;</span><br><span class="line">    &#x2F;&#x2F;   template: &#39;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;&#x2F;h3&gt;&#39; &#x2F;&#x2F; 通过 template 属性，指定了组件要展示的HTML结构</span><br><span class="line"> &#125;)</span><br><span class="line"> &#x2F;&#x2F; 使用 Vue.component(&#39;组件的名称&#39;, 创建出来的组件模板对象)</span><br><span class="line"> &#x2F;&#x2F; 如果使用 Vue.component 定义全局组件的时候，组件名称使用了 驼峰命名，则在引用组件的时候，需要把 大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接；</span><br><span class="line"> Vue.component(&#39;myCom1&#39;, com1)</span><br></pre></td></tr></table></figure></li><li><p>第二种形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;mycom1&#39;, Vue.extend(&#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;!-- 如果要使用组件，直接，把组件的名称，以 HTML 标签的形式，引入到页面中，即可 --&gt;</span><br><span class="line">    &lt;mycom1&gt;&lt;<span class="regexp">/mycom1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">'mycom1'</span>, Vue.extend(&#123;</span><br><span class="line">      template: <span class="string">'&lt;h3&gt;这是使用 Vue.extend 创建的组件&lt;/h3&gt;'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用 Vue.component 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 还是使用 标签形式,引入自己的组件 --&gt;</span><br><span class="line">    &lt;mycom2&gt;&lt;&#x2F;mycom2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 注意:不论是哪种方式创建出来的组件,组件的 template 属性指向的模板内容,必须有且只能有唯一的一个根元素</span><br><span class="line">    Vue.component(&#39;mycom2&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;div&gt;&lt;h3&gt;这是直接使用 Vue.component 创建出来的组件&lt;&#x2F;h3&gt;&lt;span&gt;123&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件模板template配合component：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;mycom3&gt;&lt;&#x2F;mycom3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 在 被控制的 #app 外面,使用 template 元素,定义组件的HTML模板结构  --&gt;</span><br><span class="line">  &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h4&gt;好用,不错!&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Vue.component(&#39;mycom3&#39;, &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过 对象 字面量的形式， 定义了一个 组件模板对象,来构造组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;mylogin&gt;&lt;&#x2F;mylogin&gt; --&gt;</span><br><span class="line">    &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义组件的时候，如果要定义全局的组件， Vue.component(&#39;组件的名称&#39;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 通过 对象 字面量的形式， 定义了一个 组件模板对象</span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;1234&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;  通过  Vue.component 把 组件模板对象，注册为一个全局的Vue 组件，同时，为这个组件起了一个名称，可以让我们  通过 标签形式，在页面中直接引入这个组件</span><br><span class="line">    &#x2F;&#x2F; Vue.component(&#39;mylogin&#39;, login)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        &#x2F;&#x2F; &#39;组件的名称&#39;: 组件的模板对象</span><br><span class="line">        &#x2F;&#x2F; &#39;mylogin&#39;: login</span><br><span class="line">        login</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用components属性定义局部子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class="line">      &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;template id&#x3D;&quot;tmpl2&quot;&gt;</span><br><span class="line">      &lt;h1&gt;这是私有的 login 组件&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    </span><br><span class="line">      var vm2 &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app2&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        components: &#123; &#x2F;&#x2F; 定义实例内部私有组件的</span><br><span class="line">          login: &#123;</span><br><span class="line">            template: &#39;#tmpl2&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3></li></ol></li></ul><ol><li>组件可以有自己的 data 数据</li><li>组件的 data 和 实例的 data 有点不一样,实例中的 data 可以为一个对象,但是 组件中的 data 必须是一个方法</li><li>组件中的 data 除了必须为一个方法之外,这个方法内部,还必须返回一个对象才行;</li><li>组件中 的data 数据,使用方式,和实例中的 data 使用方式完全一样!!!<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;mycom1&gt;&lt;&#x2F;mycom1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt; </span><br><span class="line">    Vue.component(&#39;mycom1&#39;, &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;这是全局组件 --- &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">      data: function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#39;这是组件的中data定义的数据&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h3 id="component"><a href="#component" class="headerlink" title="component"></a>component</h3><ol><li>component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;login&#39;&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">     &lt;a href&#x3D;&quot;&quot; @click.prevent&#x3D;&quot;comName&#x3D;&#39;register&#39;&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- Vue提供了 component ,来展示对应名称的组件 --&gt;</span><br><span class="line">     &lt;!-- component 是一个占位符, :is 属性,可以用来指定要展示的组件的名称 --&gt;</span><br><span class="line">     &lt;component :is&#x3D;&quot;comName&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line"></span><br><span class="line">     &lt;!-- 总结:当前学习了几个 Vue 提供的标签了??? --&gt;</span><br><span class="line">     &lt;!-- component,  template,  transition,  transitionGroup  --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     &#x2F;&#x2F; 组件名称是 字符串</span><br><span class="line">     Vue.component(&#39;login&#39;, &#123;</span><br><span class="line">       template: &#39;&lt;h3&gt;登录组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     Vue.component(&#39;register&#39;, &#123;</span><br><span class="line">       template: &#39;&lt;h3&gt;注册组件&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         comName: &#39;login&#39; &#x2F;&#x2F; 当前 component 中的 :is 绑定的组件的名称</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;&#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h3><ol><li>子组件中，默认无法访问到 父组件中的 data 上的数据 和 methods 中的方法</li><li>父组件，可以在引用子组件的时候， 通过 属性绑定（v-bind:） 的形式, 把 需要传递给 子组件的数据，以属性绑定的形式，传递到子组件内部，供子组件使用<blockquote><p> 注意： 子组件中的 data 数据，并不是通过 父组件传递过来的，而是子组件自身私有的，比如： 子组件通过 Ajax ，请求回来的数据，都可以放到子组件 data 身上,data 上的数据，都是可读可写的；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;com1 v-bind:parentmsg&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;com1&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         msg: &#39;123 啊-父组件中的数据&#39;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         com1: &#123;</span><br><span class="line">           data() &#123; </span><br><span class="line">             return &#123;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           template: &#39;&lt;h1 @click&#x3D;&quot;change&quot;&gt;这是子组件 --- &#123;&#123; parentmsg &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line"></span><br><span class="line">           &lt;!-- 注意： 组件中的 所有 props 中的数据，都是通过 父组件传递给子组件的</span><br><span class="line">           props 中的数据，都是只读的，无法重新赋值 --&gt;</span><br><span class="line">           props: [&#39;parentmsg&#39;], &#x2F;&#x2F; 把父组件传递过来的 parentmsg 属性，先在 props 数组中，定义一下，这样，才能使用这个数据</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="父组件把方法传给子组件"><a href="#父组件把方法传给子组件" class="headerlink" title="父组件把方法传给子组件"></a>父组件把方法传给子组件</h3><ol><li><p>父组件向子组件传递方法多用于，把子组件的数据传递给父组件</p></li><li><p>父组件向子组件传递方法，使用的是事件绑定机制； v-on, 当我们自定义了一个 事件属性之后，那么，子组件就能够，通过某些方式，来调用传递进去的这个方法了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;com2 @func&#x3D;&quot;show&quot;&gt;&lt;&#x2F;com2&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;h1&gt;这是 子组件&lt;&#x2F;h1&gt;</span><br><span class="line">       &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;这是子组件中的按钮 - 点击它，触发 父组件传递过来的 func 方法&quot; @click&#x3D;&quot;myclick&quot;&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var com2 &#x3D; &#123;</span><br><span class="line">       template: &#39;#tmpl&#39;,</span><br><span class="line">       data() &#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           sonmsg: &#123; name: &#39;小头儿子&#39;, age: 6 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         myclick() &#123;</span><br><span class="line">           &#x2F;&#x2F; 当点击子组件的按钮的时候，如何 拿到 父组件传递过来的 func 方法，并调用这个方法？？？</span><br><span class="line">           &#x2F;&#x2F; this.$emit(&#39;func123&#39;, 123, 456) 可以向父组件的函数传递多个值</span><br><span class="line">           this.$emit(&#39;func&#39;, this.sonmsg)</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;</span><br><span class="line">         datamsgFormSon: null</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         show(data) &#123;</span><br><span class="line">           this.datamsgFormSon &#x3D; data</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         com2</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2><ol><li><p>refs既可以操作元素也可以操作组件中的数据和方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">   &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;获取元素&quot; @click&#x3D;&quot;getElement&quot; ref&#x3D;&quot;mybtn&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;h3 id&#x3D;&quot;myh3&quot; ref&#x3D;&quot;myh3&quot;&gt;哈哈哈， 今天天气太好了！！！&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">   &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">   &lt;login ref&#x3D;&quot;mylogin&quot;&gt;&lt;&#x2F;login&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line"></span><br><span class="line">   var login &#x3D; &#123;</span><br><span class="line">     template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">     data() &#123;</span><br><span class="line">       return &#123;</span><br><span class="line">         msg: &#39;son msg&#39;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       show() &#123;</span><br><span class="line">         console.log(&#39;调用了子组件的方法&#39;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 创建 Vue 实例，得到 ViewModel</span><br><span class="line">   var vm &#x3D; new Vue(&#123;</span><br><span class="line">     el: &#39;#app&#39;,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       getElement() &#123;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 使用refs操作元素输出h3中的内容</span><br><span class="line">         console.log(this.$refs.myh3.innerText) --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 使用refs操作子组件的数据和方法</span><br><span class="line">         console.log(this.$refs.mylogin.msg)</span><br><span class="line">          this.$refs.mylogin.show() --&gt;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     components: &#123;</span><br><span class="line">       login</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="router的基本使用"><a href="#router的基本使用" class="headerlink" title="router的基本使用"></a>router的基本使用</h3><ol><li>router-link 默认渲染为一个a 标签</li><li>vue-router 提供的元素，专门用来 当作占位符的，将来，路由规则，匹配到的组件，就会展示到这个 router-view 中去, 我们可以把 router-view 认为是一个占位符</li><li>创建一个路由对象， 当 导入 vue-router 包之后，在 window 全局对象中，就有了一个 路由的构造函数，叫做 VueRouter, 在 new 路由对象的时候，可以为 构造函数，传递一个配置对象</li><li>routes路由匹配规则<ul><li>每个路由规则，都是一个对象，这个规则对象，身上，有两个必须的属性：</li><li>属性1 是 path， 表示监听 哪个路由链接地址；</li><li>属性2 是 component， 表示，如果 路由是前面匹配到的 path ，则展示 component 属性对应的那个组件<blockquote><p>component 的属性值，必须是一个 组件的模板对象， 不能是 组件的引用名称；</p></blockquote></li></ul></li><li>router高亮的两种方式<ul><li>linkActiveClass 里面添加类</li><li>也可以直接在router-link-active中抒写样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .router-link-active,</span><br><span class="line">  .myactive &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: 800;</span><br><span class="line">    font-style: italic;</span><br><span class="line">    font-size: 80px;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot; tag&#x3D;&quot;span&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 组件的模板对象</span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var register &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h1&gt;注册组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var routerObj &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [ </span><br><span class="line">        &#x2F;&#x2F; &#123; path: &#39;&#x2F;&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;&#39;, redirect: &#39;&#x2F;login&#39; &#125;, &#x2F;&#x2F; 这里的 redirect 和 Node 中的 redirect 完全是两码事</span><br><span class="line">        &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">      ],</span><br><span class="line">      linkActiveClass: &#39;myactive&#39;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: routerObj &#x2F;&#x2F; 将路由规则对象，注册到 vm 实例上，用来监听 URL 地址的变化，然后展示对应的组件</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="路由中的传参"><a href="#路由中的传参" class="headerlink" title="路由中的传参"></a>路由中的传参</h3><ol><li><p>使用 查询字符串，给路由传递参数方式一:</p><ul><li>如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性</li><li>传递后需要用this.$route.query调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;login?id&#x3D;10&amp;name&#x3D;zs&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;登录 --- &#123;&#123; $route.query.id &#125;&#125; --- &#123;&#123; $route.query.name &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">       data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           msg: &#39;123&#39;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       created()&#123; &#x2F;&#x2F; 组件的生命周期钩子函数</span><br><span class="line">         &#x2F;&#x2F; console.log(this.$route)</span><br><span class="line">         &#x2F;&#x2F; console.log(this.$route.query.id)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var register &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var router &#x3D; new VueRouter(&#123;</span><br><span class="line">       routes: [</span><br><span class="line">         &#123; path: &#39;&#x2F;login&#39;, component: login &#125;,</span><br><span class="line">         &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       &#x2F;&#x2F; router: router</span><br><span class="line">       router</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 查询字符串，给路由传递参数方式二:</p></li></ol><ul><li>如果在路由中，使用 查询字符串，给路由传递参数，则 不需要修改 路由规则的 path 属性</li><li>传递后需要用this.$route.params调用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;login&#x2F;12&#x2F;ls&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">     &lt;router-link to&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">     &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;登录 --- &#123;&#123; $route.params.id &#125;&#125; --- &#123;&#123; $route.params.name &#125;&#125;&lt;&#x2F;h1&gt;&#39;,</span><br><span class="line">       data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           msg: &#39;123&#39;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       created()&#123; &#x2F;&#x2F; 组件的生命周期钩子函数</span><br><span class="line">         console.log(this.$route.params.id)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var register &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;注册&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var router &#x3D; new VueRouter(&#123;</span><br><span class="line">       routes: [</span><br><span class="line">         &#123; path: &#39;&#x2F;login&#x2F;:id&#x2F;:name&#39;, component: login &#125;,</span><br><span class="line">         &#123; path: &#39;&#x2F;register&#39;, component: register &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       &#x2F;&#x2F; router: router</span><br><span class="line">       router</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><ol><li>使用 children 属性，实现子路由，同时，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;account&quot;&gt;Account&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template id&#x3D;&quot;tmpl&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;这是 Account 组件&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;login&quot;&gt;登录&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;account&#x2F;register&quot;&gt;注册&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 组件的模板对象</span><br><span class="line">    var account &#x3D; &#123;</span><br><span class="line">      template: &#39;#tmpl&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var login &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;登录&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var register &#x3D; &#123;</span><br><span class="line">      template: &#39;&lt;h3&gt;注册&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var router &#x3D; new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &#39;&#x2F;account&#39;,</span><br><span class="line">          component: account,</span><br><span class="line">          &#x2F;&#x2F; </span><br><span class="line">          children: [</span><br><span class="line">            &#123; path: &#39;login&#39;, component: login &#125;,</span><br><span class="line">            &#123; path: &#39;register&#39;, component: register &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="导航对象"><a href="#导航对象" class="headerlink" title="导航对象"></a>导航对象</h3><ol><li><p>this.$router.push(‘/home’)</p><ul><li>这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</li></ul></li><li><p>this.$router.replace(‘/home’)</p><ul><li>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录</li></ul></li><li><p>this.$router.go(n)</p><ul><li>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在浏览器记录中前进一步，等同于 history.forward()</span><br><span class="line">this.$router.go(1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 后退一步记录，等同于 history.back()</span><br><span class="line">this.$router.go(-1)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 前进 3 步记录</span><br><span class="line"> this.$router.go(3)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果 history 记录不够用，那就默默地失败呗</span><br><span class="line"> this.$router.go(-100)</span><br><span class="line"> this.$router.go(100)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>this.$router.back()</p></li></ol><h2 id="watch和computed"><a href="#watch和computed" class="headerlink" title="watch和computed"></a>watch和computed</h2><ol><li>watch使用这个 属性，可以监视 data 中指定数据的变化，然后触发这个 watch 中对应的 function 处理函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstname&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastname&quot;&gt; &#x3D;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;fullname&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstname: &#39;&#39;,</span><br><span class="line">        lastname: &#39;&#39;,</span><br><span class="line">        fullname: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123; </span><br><span class="line">        firstname(newVal, oldVal) &#123;</span><br><span class="line">          this.fullname &#x3D; newVal + &#39;-&#39; + this.lastname</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;lastname&#39;: function (newVal) &#123;</span><br><span class="line">          this.fullname &#x3D; this.firstname + &#39;-&#39; + newVal</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li>computed 中，可以定义一些属性，这些属性，叫做 【计算属性】， 计算属性的本质，就是一个方法，只不过，我们在使用这些计算属性的时候，是把它们的名称，直接当作属性来使用的；并不会把计算属性，当作方法去调用；<ul><li>计算属性，在引用的时候，一定不要加 () 去调用，直接把它当作普通属性去使用就好了；</li><li>只要计算属性，这个 function 内部，所用到的任何data中的数据发送了变化，就会立即重新计算这个计算属性的值</li><li>计算属性的求值结果，会被缓存起来，方便下次直接使用； 如果计算属性方法中，所以来的任何数据，都没有发生过变化，则，不会重新对计算属性求值；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;firstname&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;middlename&quot;&gt; +</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;lastname&quot;&gt; &#x3D;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;fullname&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; fullname &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">      el: &#39;#app&#39;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstname: &#39;&#39;,</span><br><span class="line">        lastname: &#39;&#39;,</span><br><span class="line">        middlename: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; </span><br><span class="line">        fullname() &#123;</span><br><span class="line">          return this.firstname + &#39;-&#39; + this.middlename + &#39;-&#39; + this.lastname</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>watch和computed的区别<ul><li>watch是监听data身上的数据， 主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体；</li><li>computed只是单纯的将数据处理后返回回来，只是对数据进行了处理，只能进行简单的处理，不能进行具体的业务逻辑操作，计算后会缓存下来，直到数据发生变化，才会重新计算</li></ul></li></ol><h2 id="vue项目式结构"><a href="#vue项目式结构" class="headerlink" title="vue项目式结构"></a>vue项目式结构</h2><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><ol><li>普通形式渲染页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;33333&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;login&gt;&lt;&#x2F;login&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       components: &#123;</span><br><span class="line">         login</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li>render函数渲染页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;p&gt;444444&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     var login &#x3D; &#123;</span><br><span class="line">       template: &#39;&lt;h1&gt;这是登录组件&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     var vm &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#app&#39;,</span><br><span class="line">       data: &#123;&#125;,</span><br><span class="line">       methods: &#123;&#125;,</span><br><span class="line">       render: function (createElements) &#123; &#x2F;&#x2F; createElements 是一个 方法，调用它，能够把 指定的 组件模板，渲染为 html 结构</span><br><span class="line">         return createElements(login)</span><br><span class="line">         &#x2F;&#x2F; 注意：这里 return 的结果，会 替换页面中 el 指定的那个 容器</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="项目中vue的版本问题"><a href="#项目中vue的版本问题" class="headerlink" title="项目中vue的版本问题"></a>项目中vue的版本问题</h3><ol><li>在项目中我们用import导入的vue是阉割版的vue(vue.runtime.commom.js), 阉割版的vue没有编译器，不能解析模板字符串（比如传入一个字符串给 template 选项，或挂载到一个元素上并以其 DOM 内部的 HTML 作为模板）<ul><li>在阉割版中不能在main.js中通过el：#app，找到相应的位置，把数据和组件渲染到页面中，只能通过render函数把组件渲染到#app相应的位置</li><li>如果想在Vue项目中使用模板对象，在webpack中配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ul><li>默认阉割版不能解析.vue文件需要安装<code>cnpm i vue-loader vue-template-compiler -D</code>, 在配置文件中，新增loader哦配置项 { test:/.vue$/, use: ‘vue-loader’ }</li></ul></li></ul></li></ol><h3 id="webpack-中如何使用-vue"><a href="#webpack-中如何使用-vue" class="headerlink" title="webpack 中如何使用 vue"></a>webpack 中如何使用 vue</h3><ol><li>安装vue的包：  cnpm i vue -S</li><li>由于 在 webpack 中，推荐使用 .vue 这个组件模板文件定义组件，所以，需要安装 能解析这种文件的 loader    cnpm i vue-loader vue-template-complier -D</li><li>在webpack.config.js中，添加如下module规则：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> module: &#123;</span><br><span class="line"></span><br><span class="line">  rules: [</span><br><span class="line"></span><br><span class="line">    &#123; test: &#x2F;\.css$&#x2F;, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; test: &#x2F;\.vue$&#x2F;, use: &#39;vue-loader&#39; &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建App.js组件页面：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;我是h3&lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      msg: &#39;OK&#39;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">h1 &#123;</span><br><span class="line"></span><br><span class="line">  color: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li><li>创建main.js入口文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 导入 Vue 组件</span><br><span class="line"></span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入 App组件</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;components&#x2F;App.vue&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建一个 Vue 实例，使用 render 函数，渲染指定的组件</span><br><span class="line"></span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  render: c &#x3D;&gt; c(App)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="在vue组件页面中，集成vue-router路由模块"><a href="#在vue组件页面中，集成vue-router路由模块" class="headerlink" title="在vue组件页面中，集成vue-router路由模块"></a>在vue组件页面中，集成vue-router路由模块</h3><ol><li>在main.js中导入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> import Vue from &#39;vue&#39;</span><br><span class="line"> import router from &#39;.&#x2F;index.js&#39;</span><br><span class="line"></span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line"></span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; render: c &#x3D;&gt; &#123; return c(App) &#125;</span><br><span class="line"></span><br><span class="line">  render(c) &#123;</span><br><span class="line"></span><br><span class="line">    return c(App);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  router &#x2F;&#x2F; 将路由对象，挂载到 Vue 实例上</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>创建index.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> import Vue from &#39;vue&#39;</span><br><span class="line"> import Router from &#39;vue-router&#39;</span><br><span class="line"></span><br><span class="line"> Vue.use(Router)</span><br><span class="line"></span><br><span class="line"> import login from &#39;.&#x2F;components&#x2F;account&#x2F;login.vue&#39;</span><br><span class="line"> import register from &#39;.&#x2F;components&#x2F;account&#x2F;register.vue&#39;</span><br><span class="line"> </span><br><span class="line"> export default new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#x2F;&#x2F; account  goodslist</span><br><span class="line">    &#123; path: &#39;&#x2F;account&#39;, component: account &#125;,</span><br><span class="line">    &#123; path: &#39;&#x2F;goodslist&#39;, component: goodslist &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在.vue组件中使用vue-resource获取数据</h3><ol><li>运行cnpm i vue-resource -S安装模块</li><li>导入 vue-resource组件并使用在main.js如下配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import VueResource from &#39;vue-resource&#39;</span><br><span class="line">Vue.use(VueResource)</span><br><span class="line">&#x2F;&#x2F; 设置请求的根路径</span><br><span class="line">Vue.http.options.root &#x3D; &#39;&#39;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="在-vue组件中使用axios获取数据"><a href="#在-vue组件中使用axios获取数据" class="headerlink" title="在.vue组件中使用axios获取数据"></a>在.vue组件中使用axios获取数据</h3><ol><li>安装axios模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios -S</span><br></pre></td></tr></table></figure></li><li>在main.js主文件进行配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">&#x2F;&#x2F; 把 axios 挂载到 Vue的 原型对象上</span><br><span class="line">Vue.prototype.$http &#x3D; axios.create(&#123;</span><br><span class="line">  baseURL: &#39;http:&#x2F;&#x2F;39.106.32.91:3000&#x2F;&#39; &#x2F;&#x2F; 在全局设置 axios 的请求根路径，这样，在发起请求的时候，就可以不写 根地址了</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><ol><li><p>vuex的结构目录<br><img src="../image/vue3.png" alt=""></p></li><li><p>action.js<br>作用: 进行异步数据的请求和统一操作mutations.js中的方法<br>在vue页面可以调用的两种方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.dispatch(&#39;方法名&#39;, 传递参数)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapActions &#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">   selectItem (item, index) &#123;</span><br><span class="line">     this.selectPlay(&#123;</span><br><span class="line">       list: this.songs,</span><br><span class="line">       index</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;,</span><br><span class="line">   ...mapActions([</span><br><span class="line">     &#39;selectPlay&#39;,</span><br><span class="line">     &#39;randomPlay&#39;</span><br><span class="line">   ])</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>action.js页面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"> <span class="comment">// 在action定义的函数只有两个参数：参数一是context对象我们可以把它理解为是store,action中的函数能直接修改state中的数据只能利用commit调用mutation中的函数修改state中的数据</span></span><br><span class="line">                                  参数二是传递过来的参数</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> selectPlay = <span class="function"><span class="keyword">function</span> (<span class="params">&#123; commit, state &#125;, &#123; list, index &#125;</span>) </span>&#123;</span><br><span class="line">       commit(types.SET_SEQUENCE_LIST, list)</span><br><span class="line">       commit(types.SET_PLAYLIST, randomList)</span><br><span class="line">       commit(types.SET_PLAYLIST, list)</span><br><span class="line">       commit(types.SET_CURRENT_INDEX, index)</span><br><span class="line">       commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">       commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>getters.js<br>主要作用：使vue模块调用，获得包装后的数据</p><ul><li>这里的 getters， 只负责 对外提供数据，不负责 修改数据，如果想要修改 state 中的数据，请 去找 mutations</li><li>经过咱们回顾对比，发现 getters 中的方法， 和组件中的过滤器比较类似，因为 过滤器和 getters 都没有修改原数据， 都是把原数据做了一层包装，提供给了 调用者, 其次， getters 也和 computed 比较像， 只要 state 中的数据发生变化了，那么，如果 getters 正好也引用了这个数据，那么 就会立即触发 getters 的重新求值；</li><li>如果 store 中 state 上的数据， 在对外提供的时候，需要做一层包装，那么 ，推荐使用 getters, 如果需要使用 getters ,则用 this.$store.getters.***<br>在vue页面使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.getters.***</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapGetters&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">        &#39;singer&#39;</span><br><span class="line">        &#39;fullScreen&#39;,</span><br><span class="line">        &#39;playing&#39;    &#x2F;&#x2F; 这里得名字与getters.js对应得函数名保持一致</span><br><span class="line">    ])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>getters.js页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const singer &#x3D; state &#x3D;&gt; state.singer</span><br></pre></td></tr></table></figure></li></ul></li><li><p>mutation-types.js<br>主要作用：为mutations.js定义常量，mutations.js用这些常量作为方法名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const SET_SINGER &#x3D; &#39;SET_SINGER&#39;</span><br></pre></td></tr></table></figure></li><li><p>mutations.js<br>主要作用：修改state中的数据，只有这个方法有权利修改state中的数据</p><ul><li>如果要操作 store 中的 state 值，只能通过 调用 mutations 提供的方法，才能操作对应的数据，不推荐直接操作 state 中的数据，因为 万一导致了数据的紊乱，不能快速定位到错误的原因，因为，每个组件都可能有操作数据的方法；</li><li>如果组件想要调用 mutations 中的方法，只能使用 this.$store.commit(‘方法名’, 传递的参数)</li><li>mutations 的 函数参数列表中，最多支持两个参数，其中，参数1： 是 state 状态； 参数2： 通过 commit 提交过来的参数；<br>在vue页面调用的两种方式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&#39;方法名&#39;, 传递的参数)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapMutations&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">     selectSinger(singer) &#123;</span><br><span class="line">         this.$router.push(&#123;</span><br><span class="line">             path: &#96;&#x2F;singer&#x2F;$&#123;singer.id&#125;&#96;</span><br><span class="line">         &#125;)</span><br><span class="line">         this.setSinger(singer)</span><br><span class="line">     &#125;,</span><br><span class="line">     ...mapMutations(&#123;</span><br><span class="line">         setSinger: &#39;SET_SINGER&#39;,</span><br><span class="line">         setPlaylist: &#39;SET_PLAYLIST&#39; &#x2F;&#x2F; 这里的名字与mutations.js中修改state方法名保持一致</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import * as types from &#39;.&#x2F;mutation-types&#39;</span><br><span class="line"></span><br><span class="line">const mutations &#x3D; &#123;</span><br><span class="line">   [types.SET_SINGER](state, singer) &#123;</span><br><span class="line">     state.singer &#x3D; singer</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">export default mutations</span><br></pre></td></tr></table></figure></li></ul></li><li><p>state.js<br>主要作用： 用于储存数据</p><ul><li>大家可以把 state 想象成 组件中的 data ,专门用来存储数据的</li><li>第一种：如果在 组件中，想要访问，store 中的数据，只能通过 this.$store.state.*** 来访问</li><li>第二种获取state的数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([&#39;count&#39;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>state.js页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> const state &#x3D; &#123;</span><br><span class="line">  singer: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default state</span><br></pre></td></tr></table></figure></li></ul></li><li><p>index.js<br>主要作用：使vuex得配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line">import * as actions from &#39;.&#x2F;actions&#39;</span><br><span class="line">import * as getters from &#39;.&#x2F;getters&#39;</span><br><span class="line">import state from &#39;.&#x2F;state&#39;</span><br><span class="line">import mutations from &#39;.&#x2F;mutations&#39;</span><br><span class="line">import createLogger from &#39;vuex&#x2F;dist&#x2F;logger&#39;</span><br><span class="line"></span><br><span class="line"> Vue.use(Vuex)</span><br><span class="line">&#x2F;&#x2F; 判断是生产环境还是开发环境， 开发环境开启严格模式</span><br><span class="line"> const debug &#x3D; process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line"></span><br><span class="line"> export default new Vuex.Store(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   getters,</span><br><span class="line">   state,</span><br><span class="line">   mutations,</span><br><span class="line">   strict: debug, &#x2F;&#x2F; 开启严格模式后，如果修改state没有用mutations就会报错，但是开启严格模式会有性能消耗，建议在生产环境不要打开</span><br><span class="line">   plugins: debug ? [createLogger()] : [] &#x2F;&#x2F; 在控制台打印state修改数据情况</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>在main.js文件下进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import store from &#39;.&#x2F;store&#x2F;index&#39;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  render: h &#x3D;&gt; h(App),</span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/Hexo/"/>
      <url>/Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli</title>
      <link href="/vue-cli/"/>
      <url>/vue-cli/</url>
      
        <content type="html"><![CDATA[<p>Vue.js 开发的标准工具</p><a id="more"></a><h2 id="vue-cli脚手架的安装"><a href="#vue-cli脚手架的安装" class="headerlink" title="vue-cli脚手架的安装"></a>vue-cli脚手架的安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"># OR</span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><hr><h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p><code>vue create hello-world</code></p><hr><h3 id="项目搭建过程"><a href="#项目搭建过程" class="headerlink" title="项目搭建过程"></a>项目搭建过程</h3><ol><li><p>命令行输入<code>vue create 文件名</code><br><img src="../image/vuecli1.png" alt=""></p><ul><li><p>Please pick a preset: (Use arrow keys) preset是之前预设过的配置(如果没有选择下面两个选项, 如果有选择直接安装)enter</p></li><li><p>default (babel, eslint): 默认配置(直接enter)非常适合快速创建一个新的项目的原型, 但是没有带任何辅助功能的npm包</p></li><li><p>Manually select feature: 手动配置(按下方向键↓调换选项)是我们所需要的面向生产的项目，提供可选择的npm包</p></li></ul></li><li><p>vue配置 (方向键↑和↓进行切换，空格键进行确定)<br><img src="../image/vuecli2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">&gt;(*) Babel  <span class="comment">// Babel 是一个 JavaScript 编译器</span></span><br><span class="line">( ) TypeScript <span class="comment">// javaScript的超集</span></span><br><span class="line">( ) Progressive Web App (PWA) Support <span class="comment">// 渐变式web应用程序</span></span><br><span class="line">( ) Router <span class="comment">// vue-router(vue路由)</span></span><br><span class="line">( ) Vuex <span class="comment">// vuex(vue的状态管理模式)</span></span><br><span class="line">( ) CSS Pre-processors <span class="comment">// css 预处理器</span></span><br><span class="line">(*) Linter / Formatter <span class="comment">// 代码风险检测和格式化(如：Eslnt)</span></span><br><span class="line">( ) Unit Testing <span class="comment">// 单元测试</span></span><br><span class="line">( ) E2E Testing <span class="comment">// e2e测试</span></span><br></pre></td></tr></table></figure></li><li><p>Router<br><img src="../image/vuecli3.png" alt=""></p><ul><li>首先会让你选择是否使用history router: Vue-Router有两种模式分别是hash和history(建议选择no), 这样直接可以使用， 如果想使用可以查看下面的方法尽享配置</li><li>如果想切换到history模式,在路由中填上如下代码:<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">具体配置</a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CSS Pre-processors(根据自己的需要选择配置)<br><img src="../image/vuecli4.png" alt=""></p><ul><li>Sass 是一款强化 CSS 的辅助工具，它在 CSS 语法的基础上增加了变量 (variables)、嵌套 (nested rules)、混合 (mixins)、导入 (inline imports) 等高级功能，这些拓展令 CSS 更加强大与优雅。使用 Sass 以及 Sass 的样式库（如 Compass）有助于更好地组织管理样式文件，以及更高效地开发项目</li><li>Less （Leaner Style Sheets 的缩写） 是一门向后兼容的 CSS 扩展语言。包含了 Less 语言以及利用 JavaScript 开发的用于将 Less 样式转换成 CSS 样式的 Less.js 工具。</li><li>Stylus - 富有表现力的、动态的、健壮的CSS</li></ul></li><li><p>Linter / Formatter(如下是代码检测错误的不同版本, 根据自己的需要选择配置)<br><img src="../image/vuecli5.png" alt=""></p><ul><li>ESLint with error prevention only(仅仅给你报语法上的错误，不给你代码进行规范)</li><li>ESLint + Airbnb config(这三个选项不仅有语法错误上的提示，而且有自己不同的代码规范原则，想进行具体了解，自行看官方文档)<br>ESLint + Standard config<br>ESLint + Prettier</li></ul></li><li><p>把babel,postcss,eslint这些配置文件放哪：(建议选择In dedicated config files，这样不会时package.json太过杂乱)<br><img src="../image/vuecli6.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? (Use arrow keys)</span><br><span class="line">&gt; In dedicated config files <span class="comment">// 单独放在一个文件</span></span><br><span class="line">  In package.json <span class="comment">// 放在package.json</span></span><br></pre></td></tr></table></figure></li><li><p>是否保存配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Save <span class="keyword">this</span> <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? (Y/n) <span class="comment">// 是否记录一下以便下次继续使用这套配置</span></span><br><span class="line"><span class="comment">// 选保存之后，会让你写一个配置的名字：</span></span><br><span class="line">Save preset <span class="keyword">as</span>:  name <span class="comment">// 然后你下次进入配置可以直接使用你这次的配置了</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="通过vue-ui进行项目构建"><a href="#通过vue-ui进行项目构建" class="headerlink" title="通过vue ui进行项目构建"></a>通过<code>vue ui</code>进行项目构建</h3><ol><li>在命令行执行如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><img src="../image/vuecli7.png" alt=""></li><li>浏览器弹出如图弹框<br><img src="../image/vuecli8.png" alt=""></li><li>打开项目管理器 -&gt; 创建 -&gt; 在此创建新项目<br><img src="../image/vuecli9.png" alt=""></li><li>在详情中创建项目名 -&gt; 下一步<br><img src="../image/vuecli10.png" alt=""></li><li>预设中选择手动 -&gt; 下一步<br><img src="../image/vuecli11.png" alt=""></li><li>在功能中选自自己需要的配置 -&gt; 下一步<br><img src="../image/vuecli12.png" alt=""></li><li>在配置中选择自己需要的配置 -&gt; 创建项目<br><img src="../image/vuecli13.png" alt=""></li><li>保存预设名(我选择了不保存)<br><img src="../image/vuecli14.png" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
